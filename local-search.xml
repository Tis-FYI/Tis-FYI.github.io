<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Centos8忘记root用户密码</title>
    <link href="/2025/03/19/Centos8%E5%BF%98%E8%AE%B0root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2025/03/19/Centos8%E5%BF%98%E8%AE%B0root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1-启动centos8系统-在开机界面选择第一行，按e"><a href="#1-启动centos8系统-在开机界面选择第一行，按e" class="headerlink" title="1.启动centos8系统,在开机界面选择第一行，按e"></a>1.启动centos8系统,在开机界面选择第一行，按e</h2><p><img src="https://www.ttgogogo.cn/usr/uploads/2022/02/3353281327.jpg" alt="10.jpg"></p><h2 id="2-进入以下界面，找到ro并将其修改为rw-init-sysroot-bin-bash"><a href="#2-进入以下界面，找到ro并将其修改为rw-init-sysroot-bin-bash" class="headerlink" title="2.进入以下界面，找到ro并将其修改为rw init&#x3D;&#x2F;sysroot&#x2F;bin&#x2F;bash"></a>2.进入以下界面，找到ro并将其修改为rw init&#x3D;&#x2F;sysroot&#x2F;bin&#x2F;bash</h2><p><img src="https://www.ttgogogo.cn/usr/uploads/2022/02/1320728506.png" alt="11.png"></p><h2 id="3-同时按住ctrl和x键，系统进入以下界面"><a href="#3-同时按住ctrl和x键，系统进入以下界面" class="headerlink" title="3.同时按住ctrl和x键，系统进入以下界面"></a>3.同时按住ctrl和x键，系统进入以下界面</h2><p> <img src="https://www.ttgogogo.cn/usr/uploads/2022/02/269935157.png" alt="12.png"></p><h2 id="4-输入以下命令修改密码"><a href="#4-输入以下命令修改密码" class="headerlink" title="4.输入以下命令修改密码"></a>4.输入以下命令修改密码</h2><p>&#x2F;# chroot &#x2F;sysroot&#x2F;      &#x2F;切换回原始系统&#x2F;</p><p>&#x2F;# LANG&#x3D;en           &#x2F;把语言改为英文&#x2F;</p><p>&#x2F;# passwd            &#x2F;设置新密码&#x2F;</p><p>&#x2F;# touch &#x2F;.autorelabel    &#x2F;使密码生效&#x2F;</p><p><img src="https://www.ttgogogo.cn/usr/uploads/2022/02/794660917.png" alt="1.png"></p><h2 id="5-同时按住Ctrl和d键，进入以下界面，输入reboot，重启系统"><a href="#5-同时按住Ctrl和d键，进入以下界面，输入reboot，重启系统" class="headerlink" title="5.同时按住Ctrl和d键，进入以下界面，输入reboot，重启系统"></a>5.同时按住Ctrl和d键，进入以下界面，输入reboot，重启系统</h2><p><img src="https://www.ttgogogo.cn/usr/uploads/2022/02/4091631669.png" alt="14.png"></p><h2 id="6-系统重启成功后，输入新设置的密码即可正常登录"><a href="#6-系统重启成功后，输入新设置的密码即可正常登录" class="headerlink" title="6.系统重启成功后，输入新设置的密码即可正常登录"></a>6.系统重启成功后，输入新设置的密码即可正常登录</h2><p>原文来自：<a href="https://www.cnblogs.com/canyezhizi/p/13574958.html">Cnblog</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7忘记root账户密码</title>
    <link href="/2025/03/19/Centos7%E5%BF%98%E8%AE%B0root%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2025/03/19/Centos7%E5%BF%98%E8%AE%B0root%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h4 id="第一步：开启服务器，在如下界面键入”e”进入编辑"><a href="#第一步：开启服务器，在如下界面键入”e”进入编辑" class="headerlink" title="第一步：开启服务器，在如下界面键入”e”进入编辑"></a>第一步：开启服务器，在如下界面键入”e”进入编辑</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319171617009.png" alt="image-20250319171617009"></p><h4 id="第二步：找到以linux16开头的一行，在本行行尾键入”rd-break”"><a href="#第二步：找到以linux16开头的一行，在本行行尾键入”rd-break”" class="headerlink" title="第二步：找到以linux16开头的一行，在本行行尾键入”rd.break”"></a>第二步：找到以linux16开头的一行，在本行行尾键入”rd.break”</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319171636219.png" alt="image-20250319171636219"></p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319171654534.png" alt="image-20250319171654534"></p><h4 id="第三步：输入完成后，按“Ctrl-x”运行"><a href="#第三步：输入完成后，按“Ctrl-x”运行" class="headerlink" title="第三步：输入完成后，按“Ctrl+x”运行"></a>第三步：输入完成后，按“Ctrl+x”运行</h4><h4 id="第四步：现在的根为只读状态，需要挂载为读写状态以便进行修改；输入“mount-o-remount-rw-sysroot”"><a href="#第四步：现在的根为只读状态，需要挂载为读写状态以便进行修改；输入“mount-o-remount-rw-sysroot”" class="headerlink" title="第四步：现在的根为只读状态，需要挂载为读写状态以便进行修改；输入“mount -o remount,rw &#x2F;sysroot”"></a>第四步：现在的根为只读状态，需要挂载为读写状态以便进行修改；输入“mount -o remount,rw &#x2F;sysroot”</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172132380.png" alt="image-20250319172132380"></p><h4 id="第六步：切换根，进入到sh"><a href="#第六步：切换根，进入到sh" class="headerlink" title="第六步：切换根，进入到sh"></a>第六步：切换根，进入到sh</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172627511.png" alt="image-20250319172627511"></p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172647504.png" alt="image-20250319172647504"></p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172709327.png" alt="image-20250319172709327"></p><h4 id="第八步：退出并重启"><a href="#第八步：退出并重启" class="headerlink" title="第八步：退出并重启"></a>第八步：退出并重启</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172726698.png" alt="image-20250319172726698"></p><h4 id="第九步：使用新密码进行登录"><a href="#第九步：使用新密码进行登录" class="headerlink" title="第九步：使用新密码进行登录"></a>第九步：使用新密码进行登录</h4>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么获取磁盘配额的sid</title>
    <link href="/2025/03/19/%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E7%A3%81%E7%9B%98%E9%85%8D%E9%A2%9D%E7%9A%84sid/"/>
    <url>/2025/03/19/%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E7%A3%81%E7%9B%98%E9%85%8D%E9%A2%9D%E7%9A%84sid/</url>
    
    <content type="html"><![CDATA[<h1 id="导出对应的sid信息到文本"><a href="#导出对应的sid信息到文本" class="headerlink" title="导出对应的sid信息到文本"></a>导出对应的sid信息到文本</h1><p>sutil.exe quota query D: &gt; 1.txt</p><h1 id="查询特定的sid"><a href="#查询特定的sid" class="headerlink" title="查询特定的sid"></a>查询特定的sid</h1><p>wmic useraccount get name,sid |findstr ftp用户名</p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux查看登录日志</title>
    <link href="/2025/03/19/Linux%E6%9F%A5%E7%9C%8B%E7%99%BB%E5%BD%95%E6%97%A5%E5%BF%97/"/>
    <url>/2025/03/19/Linux%E6%9F%A5%E7%9C%8B%E7%99%BB%E5%BD%95%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>####&#x2F;var&#x2F;run&#x2F;utmp</p><blockquote><p>(用于记录当前打开的会话)被<code>who</code>和<code>w</code>用来记录当前有谁登录以及他们正在做什么，uptime用来记录系统启动时间。</p></blockquote><p>####&#x2F;var&#x2F;log&#x2F;wtmp</p><blockquote><p>(用于存储系统连接历史记录)被last工具用来记录最后登录的用户的列表。</p></blockquote><p>####&#x2F;var&#x2F;log&#x2F;btmp</p><blockquote><p>(记录失败的登录尝试)被lastb工具用来记录最后失败的登录尝试的列表。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows使用APPCMD导出对应的配置内容</title>
    <link href="/2025/03/19/windows%E4%BD%BF%E7%94%A8APPCMD%E5%AF%BC%E5%87%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9/"/>
    <url>/2025/03/19/windows%E4%BD%BF%E7%94%A8APPCMD%E5%AF%BC%E5%87%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="导出所有应用程序池"><a href="#导出所有应用程序池" class="headerlink" title="导出所有应用程序池"></a>导出所有应用程序池</h4><blockquote><p>%windir%\system32\inetsrv\appcmd list apppool &#x2F;config &#x2F;xml &gt; c:\apppools.xml</p></blockquote><h4 id="导入所有应用程序池"><a href="#导入所有应用程序池" class="headerlink" title="导入所有应用程序池"></a>导入所有应用程序池</h4><blockquote><p>%windir%\system32\inetsrv\appcmd add apppool &#x2F;in &lt; c:\apppools.xml</p></blockquote><h4 id="导出所有站点"><a href="#导出所有站点" class="headerlink" title="导出所有站点"></a>导出所有站点</h4><blockquote><p>%windir%\system32\inetsrv\appcmd list site &#x2F;config &#x2F;xml &gt; c:\sites.xml</p></blockquote><h4 id="导入所有站点"><a href="#导入所有站点" class="headerlink" title="导入所有站点"></a>导入所有站点</h4><blockquote><p>%windir%\system32\inetsrv\appcmd add site &#x2F;in &lt; c:\sites.xml</p></blockquote><h4 id="导出单独的应用程序池"><a href="#导出单独的应用程序池" class="headerlink" title="导出单独的应用程序池"></a>导出单独的应用程序池</h4><blockquote><p>%windir%\system32\inetsrv\appcmd list apppool “应用程序池名称” &#x2F;config &#x2F;xml &gt; c:\myapppool.xml</p></blockquote><h4 id="导入单独的应用程序池"><a href="#导入单独的应用程序池" class="headerlink" title="导入单独的应用程序池"></a>导入单独的应用程序池</h4><blockquote><p>%windir%\system32\inetsrv\appcmd add apppool &#x2F;in &lt; c:\myapppool.xml</p></blockquote><h1 id="导出单独站点"><a href="#导出单独站点" class="headerlink" title="导出单独站点"></a>导出单独站点</h1><blockquote><p>%windir%\system32\inetsrv\appcmd list site “站点名称” &#x2F;config &#x2F;xml &gt; c:\mywebsite.xml</p></blockquote><h1 id="导入单独站点"><a href="#导入单独站点" class="headerlink" title="导入单独站点"></a>导入单独站点</h1><blockquote><p>%windir%\system32\inetsrv\appcmd add site &#x2F;in &lt; c:\mywebsite.xml</p></blockquote><p><a href="https://www.cnblogs.com/fanful/p/13061783.html">原来来自</a>：<a href="https://www.cnblogs.com/fanful/p/13061783.html">https://www.cnblogs.com/fanful/p/13061783.html</a></p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="/2025/03/19/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/03/19/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h4 id="一-Redis简介"><a href="#一-Redis简介" class="headerlink" title="一.Redis简介"></a>一.Redis简介</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Redis 是一个开源（BSD 许可）的内存中数据结构存储，用作数据库、缓存、消息代理和流引擎。Redis 提供数据结构，例如字符串、哈希、列表、集、带有范围查询的排序集、位图、hyperloglog、地理空间索引和流。Redis 具有内置复制、Lua 脚本、LRU 逐出、事务和不同级别的磁盘持久性，并通过 Redis Sentinel 提供高可用性，并使用 Redis Cluster 进行自动分区。<br>可以对这些类型运行原子操作，例如追加到字符串;递增哈希中的值;将元素推送到列表;计算集交集、并集和差分;或者在排序集中获得排名最高的成员。<br>Redis 可以通过定期将数据集转储到磁盘或将每个命令附加到基于磁盘的日志来持久保存数据。<br>Redis 支持异步复制，具有快速无阻塞同步和自动重新连接，并在网络拆分时进行部分重新同步。<br></code></pre></td></tr></table></figure><h4 id="二-在linux上安装redis"><a href="#二-在linux上安装redis" class="headerlink" title="二.在linux上安装redis"></a>二.在linux上安装redis</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># ubuntu/Debian安装方法</span><br>curl -fsSL https://packages.redis.io/gpg | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg <span class="hljs-comment"># 下载密钥</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb <span class="hljs-subst">$(lsb_release -cs)</span> main&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/redis.list<br><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install redis<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># centos yum 方式安装redis</span><br><span class="hljs-built_in">sudo</span> yum install epel-release<br><span class="hljs-built_in">sudo</span> yum update<br><br>然后安装Redis数据库：<br><span class="hljs-built_in">sudo</span> yum -y install redis<br><br>安装好后启动Redis服务即可：<br><span class="hljs-built_in">sudo</span> systemctl start redis<br>这里同样可以使用redis-cli进入Redis命令行模式操作。<br><br>需要修改配置文件，路径为/etc/redis.conf<br><br>vi /etc/redis.conf<br>需要修改的地方：<br><br>首先，注释这一行：#<span class="hljs-built_in">bind</span> 127.0.0.1<br><br>另外，推荐给Redis设置密码，取消注释这一行并设置密码：#requirepass foobared<br><br>然后重启Redis服务，使用的命令如下：<br><br><span class="hljs-built_in">sudo</span> systemctl restart redis<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 源码编译redis</span><br>https://redis.io/download/ <span class="hljs-comment"># 下载地址</span><br><br>tar -zxvf redis-xxxx.tar.gz  <span class="hljs-comment"># 解压下载的redis压缩包</span><br><br>yum install gcc-c++ -y <span class="hljs-comment"># 安装编译工具</span><br><br>gcc -v  <span class="hljs-comment">#查看GCC版本</span><br><br><span class="hljs-built_in">cd</span> redis-x.x.x  &amp;&amp; make &amp;&amp; make install  <span class="hljs-comment"># 切换到源码路径下进行编译  ，或者是可以指定你向要存放redis的路径  make install PREFIX=/usr/local/redis/</span><br><br><span class="hljs-comment"># 如果是编译好的二进制执行文件放到对应的bin目录下，那么可以直接  redis-server 启动对应的redis</span><br><br><span class="hljs-comment"># 后台模式启动redis，需要修改redis配置文件当中的daemonize字段为yes，修改完成之后重新启动服务</span><br><br><span class="hljs-comment"># 登录redis</span><br>redis-cli -h 192.168.10.20 -p 6379  <span class="hljs-comment"># 远程连接redis，进入之后，如果是之前设置过redis的密码，那么使用auth  密码  进行认证</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># windows 上安装redis，官方是不支持windows的，但是可以安装WSL2来运行linux的二进制包</span><br><br>To install Redis on Windows, you<span class="hljs-string">&#x27;ll first need to enable WSL2 (Windows Subsystem for Linux). WSL2 lets you run Linux binaries natively on Windows. For this method to work, you&#x27;</span>ll need to be running Windows 10 version 2004 and higher or Windows 11<br><br></code></pre></td></tr></table></figure><h4 id="三-怎么升级redis"><a href="#三-怎么升级redis" class="headerlink" title="三.怎么升级redis"></a>三.怎么升级redis</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">注意，在看本教程前，请先自行备份配置文件以及数据。<br>如果持久化用的是rdb，备份<span class="hljs-string">.rdb</span>文件，默认叫dump.rdb，如果你更改为其他名字，请自行查看配置，你的<span class="hljs-string">.rdb</span>叫什么。完成本教程后，把<span class="hljs-string">.rdb</span>文件放入redis的启动目录即可。不知道启动目录，就在redis-cil 命令行输入config get dir查看<br>如果持久化用的是aof，备份<span class="hljs-string">.aof</span>文件，默认叫appendonly.aof<br>本教程写的时候是redis版本是 redis-6.0.9 ，如果高于此版本或者低于此版本，目录结果不一样，请安装redis-6.0.9 版本，把文中的 redis-X.X.X 替换为 redis-6.0.9<br>系统版本<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">如果是通过 apt-get install redis-server 方式安装的 redis ，可以输入 apt-get remove --purge redis-server 进行redis的卸载操作，输入此命令会问你是否卸载，输入 Y 确认卸载 redis 。<br>然后输入 redis-server -v 查看是否卸载完成，如果出现提示 Command <span class="hljs-string">&#x27;redis-server&#x27;</span> not found 说明卸载成功。<br><br><span class="hljs-comment"># 卸载redis</span><br>apt-get remove --purge redis-server<br><span class="hljs-comment"># 卸载之后查看redis版本信息</span><br>redis-server -v<br><br><span class="hljs-comment"># 安装编译工具gcc</span><br>检查是否安装了 gcc ，输入 gcc --version 进行查看是否安装了 gcc ，如果出现 Command <span class="hljs-string">&#x27;gcc&#x27;</span> not found,but can be installed with: apt install gcc ，则说明没用安装 gcc，需要输入 apt install gcc 进行安装。然后再次输入 gcc --version 查看是否安装成功<br><br><br><br>然后进入 /usr/local 目录下载 redis 最新安装压缩包，安装完成后输入 <span class="hljs-built_in">ls</span> 可以查看到下载成功的文件 redis-x.x.x.taz.gz。去 redis官网 查看下载链接以及最新版本。<br><br><span class="hljs-built_in">cd</span> /usr/local<br><br><span class="hljs-comment"># 进入 /usr/local 目录</span><br><br>wget https://download.redis.io/releases/redis-X.X.X.tar.gz<br><br><span class="hljs-comment"># 下载最新的 redis ，此处我用 X.X.X 代替，因为 redis 是一直在更新的，所以你自己去官方查看</span><br><br><span class="hljs-built_in">ls</span>  <span class="hljs-comment"># 看到有 redis-x.x.x.taz.gz ，说明下载成功</span><br></code></pre></td></tr></table></figure><h4 id="解压安装redis"><a href="#解压安装redis" class="headerlink" title="解压安装redis"></a>解压安装redis</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">然后解压 redis-x.x.x.taz.gz ，输入 <span class="hljs-built_in">ls</span> 查看解压后的目录 redis-x.x.x ，然后进入 redis-x.x.x 目录，输入 make 进行编译，编译完成后 进入 src 目录，输入 make install 进行安装<br><br>tar xzf redis-x.x.x.taz.gz<br><br><span class="hljs-comment"># 解压压缩包</span><br><br><span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 查看解压后的目录 redis-x.x.x</span><br><br><span class="hljs-built_in">cd</span> redis-x.x.x<br><br><span class="hljs-comment"># 进入解压后的 redis-x.x.x 目录</span><br><br>make<br><br><span class="hljs-comment"># 进行编译,此处时间可能会有点久</span><br><br><span class="hljs-built_in">cd</span> src &amp;&amp; make install  <span class="hljs-comment"># 自行切换下载的源码路径</span><br><br><span class="hljs-comment"># 进入src 目录并进行安装</span><br><br><span class="hljs-comment"># 出现下面显示，说明安装成功</span><br></code></pre></td></tr></table></figure><h4 id="复制配置文件（如果是有原来的配置文件，记得保存一份-下面是对配置文件以及启动脚本做调整）"><a href="#复制配置文件（如果是有原来的配置文件，记得保存一份-下面是对配置文件以及启动脚本做调整）" class="headerlink" title="复制配置文件（如果是有原来的配置文件，记得保存一份,下面是对配置文件以及启动脚本做调整）"></a>复制配置文件（如果是有原来的配置文件，记得保存一份,下面是对配置文件以及启动脚本做调整）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sh">然后创建 /etc/redis 目录，把 /usr/local/redis-X.X.X/redis.conf 文件复制到 /etc/redis/redis.conf ，复制完成后，再把 /usr/local/redis-.X.X.X/utils/redis_init_script 文件复制到 /etc/init.d/redis<br><br><span class="hljs-built_in">mkdir</span> -p /etc/redis<br><br><span class="hljs-comment"># 创建 /etc/redis 目录</span><br><br><span class="hljs-built_in">cp</span> /usr/local/redis-X.X.X/redis.conf /etc/redis/redis.conf<br><br><span class="hljs-comment"># 把配置文件复制到 /etc/redis 目录下</span><br><br><span class="hljs-built_in">cp</span> /usr/local/redis-.X.X.X/utils/redis_init_script /etc/init.d/redis<br><br><span class="hljs-comment"># 把启动脚本复制到 /etc/init.d 目录下，通常都以d结尾表示是后台自启动服务</span><br><br>然后进行 redis配置文件设置<br><br><span class="hljs-comment"># 把 daemonize 设置为 yes ，因为redis 默认不开启守护进程模式</span><br>sed -i <span class="hljs-string">&#x27;s/daemonize no/daemonize yes/g&#x27;</span> /etc/redis/redis.conf<br><br><br><span class="hljs-comment"># 如果要开启远程访问，就进行修改，* 代表任何地址都能访问，redis 默认是</span><br><br><span class="hljs-comment"># 只能本地访问，不过不想任何地址都能访问，就把 * 改成你的IP地址</span><br>sed -i <span class="hljs-string">&#x27;s/bind 127.0.0.1/bind */g&#x27;</span> /etc/redis/redis.conf<br><br><br><span class="hljs-comment"># 此命令是设置redis密码设置成123456，redis默认是没有密码的。</span><br><span class="hljs-comment"># 如果你不想设置密码，可以不输入此命令设置密码（防止五认证登录redis，建议还是设置密码认证）</span><br>sed -i <span class="hljs-string">&#x27;s/# requirepass foobared/requirepass 123456/g&#x27;</span> /etc/redis.conf<br><br><span class="hljs-comment">#最后设置开机自启redis以及启动redis服务</span><br><br>update-rc.d -f redis defaults<br><br><span class="hljs-comment"># 设置开机执行脚本，也就是添加开机自启</span><br><br>service redis start<br><br><span class="hljs-comment"># 启动redis服务</span><br><br>redis-server -v<br><br><span class="hljs-comment"># 查看redis版本号，验证一下是否启动成功</span><br><br>ps -ef | grep redis<br><br><span class="hljs-comment"># 也可以输入此命令查看redis是否启动成功</span><br><br><br></code></pre></td></tr></table></figure><h4 id="错误与解决办法"><a href="#错误与解决办法" class="headerlink" title="错误与解决办法"></a>错误与解决办法</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">遇到的错误解决方案：<br>如果遇到权限不足，切换成 root 用户或者命令加上 <span class="hljs-built_in">sudo</span><br><br>输入 redis-server 报错 bash: /usr/bin/redis-server: No such file or directory<br>解决方案<br>1、重启一下服务器。<br>2、或者建立软连接<br><span class="hljs-built_in">ln</span> -s /usr/bin/redis-server /usr/local/bin/redis-server<br>3、或者添加环境变量path<br></code></pre></td></tr></table></figure><h4 id="四-redis-cli当中的一些基础命令"><a href="#四-redis-cli当中的一些基础命令" class="headerlink" title="四.redis-cli当中的一些基础命令"></a>四.redis-cli当中的一些基础命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将标准输出内容输出到文件当中</span><br>redis-cli --raw INCR mycounter<br><br><span class="hljs-comment"># 远程连接redis服务器并执行命令，类似于mysql外部执行命令</span><br>$ redis-cli -h redis15.localnet.org -p 6390 PING<br><br><span class="hljs-comment"># 对于有密码的情况，需要使用-a参数指定对应的密码</span><br>$ redis-cli -a myUnguessablePazzzzzword123 PING<br><br><span class="hljs-comment"># it&#x27;s possible to send a command that operates on a database number other than the default number zero by using the option </span><br><span class="hljs-comment"># redis-cli默认操作的是0号数据库，如果是需要操作其他数据库，那么就需要使用 -n &lt;dbnum&gt; 指定对应执行的数据库</span><br>$ redis-cli FLUSHALL<br>OK<br>$ redis-cli -n 1 INCR a<br>(<span class="hljs-built_in">integer</span>) 1<br>$ redis-cli -n 1 INCR a<br>(<span class="hljs-built_in">integer</span>) 2<br><br><span class="hljs-comment"># 使用特定的格式去连接redis数据库 -u &lt;uri&gt;redis://user:password@host:port/dbnum</span><br>$ redis-cli -u redis://LJenkins:p%40ssw0rd@redis-16379.hosted.com:16379/0 PING<br>PONG<br><br><span class="hljs-comment"># redis 默认是使用 TCP进行连接，如果是使用SSL或者是TLS的方式进行连接，可以设置对应的证书</span><br><span class="hljs-comment"># By default, uses a plain TCP connection to connect to Redis. You may enable SSL/TLS using the option, along with or to configure a trusted root certificate bundle or directory.redis-cli--tls--cacert--cacertdir</span><br><br><br><span class="hljs-comment"># redis-cli 执行文件当中的内容</span><br>$ <span class="hljs-built_in">cat</span> /tmp/commands.txt | redis-cli<br>OK<br><br><span class="hljs-comment"># 在redis-cli 当中连接其他的数据库</span><br><br>127.0.0.1:6379&gt; CONNECT metal 6379<br>metal:6379&gt; PING<br>PONG<br><br><br><span class="hljs-comment"># 使用tab键补齐对应的命令</span><br>127.0.0.1:6379&gt; Z&lt;TAB&gt;<br>127.0.0.1:6379&gt; ZADD&lt;TAB&gt;<br>127.0.0.1:6379&gt; ZCARD&lt;TAB&gt;<br></code></pre></td></tr></table></figure><h4 id="五-关于命令的学习，可以参照redis官方文档"><a href="#五-关于命令的学习，可以参照redis官方文档" class="headerlink" title="五.关于命令的学习，可以参照redis官方文档"></a>五.关于命令的学习，可以参照redis官方文档</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 中文文档</span><br>http://redis.cn/commands<br><br><span class="hljs-comment"># 英文文档</span><br>https://redis.io/docs/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s补全命令安装</title>
    <link href="/2025/03/19/k8s%E8%A1%A5%E5%85%A8%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85/"/>
    <url>/2025/03/19/k8s%E8%A1%A5%E5%85%A8%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="自动补全安装"><a href="#自动补全安装" class="headerlink" title="自动补全安装"></a>自动补全安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH">yum install bash-completion -y<br><span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h4 id="补全安装完成后执行报错"><a href="#补全安装完成后执行报错" class="headerlink" title="补全安装完成后执行报错"></a>补全安装完成后执行报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行kubectl tab时出现以下报错</span><br>[root@k8s-node ~]# kubectl desc-bash: _get_comp_words_by_ref: <span class="hljs-built_in">command</span> not found <br></code></pre></td></tr></table></figure><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1、执行bash_completion</span><br>[root@k8s-node ~]# <span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><br><span class="hljs-comment">#2、重新加载kubectl completion</span><br>[root@k8s-node ~]# <span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><br><span class="hljs-comment">#3、又能用tab了</span><br>[root@k8s-node ~]# kubectl describe pod<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手动清理Linux的缓存</title>
    <link href="/2025/03/19/%E6%89%8B%E5%8A%A8%E6%B8%85%E7%90%86Linux%E7%9A%84%E7%BC%93%E5%AD%98/"/>
    <url>/2025/03/19/%E6%89%8B%E5%8A%A8%E6%B8%85%E7%90%86Linux%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h6 id="1）清理pagecache（页面缓存）"><a href="#1）清理pagecache（页面缓存）" class="headerlink" title="1）清理pagecache（页面缓存）"></a>1）清理pagecache（页面缓存）</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@backup ~]# <span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches   或者 <span class="hljs-comment"># sysctl -w vm.drop_caches=1</span><br></code></pre></td></tr></table></figure><h6 id="2）清理dentries（目录缓存）和inodes"><a href="#2）清理dentries（目录缓存）和inodes" class="headerlink" title="2）清理dentries（目录缓存）和inodes"></a>2）清理dentries（目录缓存）和inodes</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@backup ~]# <span class="hljs-built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches   或者 <span class="hljs-comment"># sysctl -w vm.drop_caches=2</span><br></code></pre></td></tr></table></figure><h6 id="3）清理pagecache、dentries和inodes"><a href="#3）清理pagecache、dentries和inodes" class="headerlink" title="3）清理pagecache、dentries和inodes"></a>3）清理pagecache、dentries和inodes</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@backup ~]# <span class="hljs-built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches   或者 <span class="hljs-comment"># sysctl -w vm.drop_caches=3 </span><br></code></pre></td></tr></table></figure><p><strong>上面三种方式都是临时释放缓存的方法，要想永久释放缓存，需要在&#x2F;etc&#x2F;sysctl.conf文件中配置：vm.drop_caches&#x3D;1&#x2F;2&#x2F;3，然后sysctl -p生效即可！</strong></p><blockquote><p>另外，可以使用sync命令来清理文件系统缓存，还会清理僵尸(zombie)对象和它们占用的内存</p><p>[root@backup ~]# sync</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于EOF和-EOF语句的意思</title>
    <link href="/2025/03/19/%E5%85%B3%E4%BA%8EEOF%E5%92%8C-EOF%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%84%8F%E6%80%9D/"/>
    <url>/2025/03/19/%E5%85%B3%E4%BA%8EEOF%E5%92%8C-EOF%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%84%8F%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>在linux shell脚本中<code>cat &lt;&lt; EOF</code>的语句，起到什么作用？</p><p>EOF在这里<code>没有特殊的含义</code>，你可以使用FOE或OOO等（当然也不限制在三个字符或大写字符）,EOF只是习惯性的用来作为开头和结尾</p><p>接下来，简单描述一下几种常见的使用方式及其作用：</p><blockquote><p>1、cat&lt;&lt;EOF，以EOF输入字符为标准输入结束;</p></blockquote><blockquote><p>2、cat&gt;filename，创建文件，并<code>把标准输入输出到filename文件中</code>，以ctrl+d作为输入结束;</p></blockquote><blockquote><p>3、cat&gt;filename&lt;&lt;EOF，以<code>EOF作为输入结束</code>，和ctrl+d的作用一样;</p></blockquote><blockquote><p>cat &lt;<EOF>&gt;&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root     # 以EOF为结束符号，将标准输入的内容追加到&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root内。可以理解为&gt;&gt;还是追加到文件当中，只是多了&lt;&lt;EOF作为输入结束符标志。</p></blockquote><hr><p>cat &lt;&lt;EOF与cat &lt;&lt;-EOF的区别（原文：<a href="http://blog.csdn.net/apache0554/article/details/45508631%EF%BC%89">http://blog.csdn.net/apache0554/article/details/45508631）</a></p><p>两个都是获取stdin,并在EOF处结束stdin(标准输入)，输出stdout(标准输出)。</p><blockquote><p>man中的说明：</p></blockquote><blockquote><p>If the redirection operator is &lt;&lt;-, then all leading tab characters are stripped from input lines and the line containing delimiter.  </p></blockquote><p>翻译过来的意思就是：如果重定向的操作符是&lt;&lt;-，那么<code>分界符（EOF）所在行的开头部分的制表符（Tab）都将被去除</code>。</p><p>这可以解决由于脚本中的自然缩进产生的制表符。</p><blockquote><p>通俗一点的解释：</p></blockquote><p>在我们使用cat &lt;&lt;EOF时，我们输入完成后，需要在一个新的一行输入EOF结束stdin的输入。EOF必须顶行写，前面不能用制表符或者空格。</p><p>比如,下面的语句就不会出错：</p><p>cat &lt;&lt;EOF </p><p>Hello,world! </p><p>EOF </p><p><code>如果结束分解符EOF前有制表符或者空格，则EOF不会被当做结束分界符，只会继续被当做stdin来输入。</code></p><p>而<code>&lt;&lt;-</code>就是为了解决这一问题：</p><p>cat &lt;&lt;-EOF </p><p>Hello,world! </p><p>   EOF </p><p><code>上面的写法，虽然最后的EOF前面有多个制表符和空格，但仍然会被当做结束分界符，表示stdin的结束。</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian系统上源码编译Redis7.0</title>
    <link href="/2025/03/19/Debian%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91Redis7-0/"/>
    <url>/2025/03/19/Debian%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91Redis7-0/</url>
    
    <content type="html"><![CDATA[<ol><li><p><strong>安装编译工具和依赖项：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install build-essential tcl<br></code></pre></td></tr></table></figure></li><li><p><strong>下载并解压 Redis 7.0 源代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://download.redis.io/releases/redis-7.0.0.tar.gz<br>tar xzf redis-7.0.0.tar.gz<br><span class="hljs-built_in">cd</span> redis-7.0.0<br></code></pre></td></tr></table></figure></li><li><p><strong>进行编译：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure></li><li><p><strong>运行测试（可选）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></li><li><p><strong>安装 Redis 7.0：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> make install  <span class="hljs-comment"># 这一步会将redis默认安装到/usr/local/bin/下</span><br></code></pre></td></tr></table></figure></li><li><p><strong>拷贝redis.conf 配置文件</strong></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">在源码（redis-7.0.0）文件夹的路径下，有一个名为redis.conf的文件，这个可以拷贝到你想要存放的路径，推荐/etc/redis/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CephOSD磁盘更换的三种方法（数据发生迁移的时间不同）</title>
    <link href="/2025/03/19/CephOSD%E7%A3%81%E7%9B%98%E6%9B%B4%E6%8D%A2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%95%B0%E6%8D%AE%E5%8F%91%E7%94%9F%E8%BF%81%E7%A7%BB%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%EF%BC%89/"/>
    <url>/2025/03/19/CephOSD%E7%A3%81%E7%9B%98%E6%9B%B4%E6%8D%A2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%95%B0%E6%8D%AE%E5%8F%91%E7%94%9F%E8%BF%81%E7%A7%BB%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">更换方式1：<br><br>    1到指定节点上，停止指定的osd进程 systemctl stop ceph-osd@id<br><br>    2 将移除OSD节点状态标记为  ceph osd out ceph-osd@id<br><br>    3从crush中移除OsD节点，该节点不作为数据的载体 ceph osd crush remove id<br><br>    4 删除OSD节点和对应的认证信息 ceph osd rm id /ceph auth del id<br><br>    5 增加一个新的 OSD(zap擦除磁盘数据，create 创建磁盘)<br><br>    注意：1、2、3、4、5 这几步都会发生数据迁移的动作<br>    <br>如果是原始磁盘占用，无法格式化删除，使用下面的命令<br>查看磁盘的当前状态：dmsetup status<br>查看磁盘的唯一标识：cat /var/lib/ceph/osd/ceph-1/fsid  <br>清理磁盘的占用：dmsetup remove ceph-1的id <br>格式化磁盘（新的磁盘不用）：mkfs.ext4 /dev/sdc<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">更换方式2:<br>1 修改osd的数据操作权重值，让数据不分布在这个节点上<br>2 到指定节点上，停止指定的osd进程<br>3 将移除OSD节点状态标记为out<br>4 从crush中移除OSD节点，该节点不作为数据的载体  # 可以通过两次 ceph pg dump pgs &gt; file.txt 查看两次pg的变化，然后通过 diff命令比对<br>5 删除OSD节点和对应的认证信息<br>6 增加一个新的 OSD<br><br>注意：1、5、6这几步会发生数据迁移动作<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">更换方式3:<br><span class="hljs-meta prompt_"># </span><span class="language-bash">最主要的就是设置标记和清除标记中间这段操作当中，只是看到一个数据迁移的现象，但是并未发生真正的数据迁移</span><br>1 对ceph集群的osd设置禁止数据迁移的标记<br>2 修改osd的数据操作权重值，让数据不分布在这个节点上<br>3 到指定节点上，停止指定的osd进程<br>4 从crush中移除osD节点，该节点不作为数据的载体<br>5 删除OSD节点和对应的认证信息<br>6 增加一个新的OSD与样式2一致<br>7 移除ceph集群的osd禁止数据迁移标记集<br><br>注意：因为添加了标记，所以1-6这几步的数据迁移都不会执行，只有7这一步会发生数据迁移动作。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用kubeadm1.23.x版本部署kubernetes（一主两从）</title>
    <link href="/2025/03/19/%E4%BD%BF%E7%94%A8kubeadm1-23-x%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2kubernetes%EF%BC%88%E4%B8%80%E4%B8%BB%E4%B8%A4%E4%BB%8E%EF%BC%89/"/>
    <url>/2025/03/19/%E4%BD%BF%E7%94%A8kubeadm1-23-x%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2kubernetes%EF%BC%88%E4%B8%80%E4%B8%BB%E4%B8%A4%E4%BB%8E%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="配置系统环境"><a href="#配置系统环境" class="headerlink" title="配置系统环境"></a>配置系统环境</h3><h5 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a><strong>查看系统版本</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@localhost]# </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/centos-release</span><br></code></pre></td></tr></table></figure><h5 id="配置网络-根据自己本地的网络环境设置主机IP地址"><a href="#配置网络-根据自己本地的网络环境设置主机IP地址" class="headerlink" title="配置网络(根据自己本地的网络环境设置主机IP地址)"></a><strong>配置网络(根据自己本地的网络环境设置主机IP地址)</strong></h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@localhost ~]</span><span class="hljs-comment"># cat /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="hljs-attr">TYPE</span>=Ethernet<br><span class="hljs-attr">PROXY_METHOD</span>=none<br><span class="hljs-attr">BROWSER_ONLY</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">BOOTPROTO</span>=static<br><span class="hljs-attr">DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV4_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_AUTOCONF</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy<br><span class="hljs-attr">NAME</span>=enp0s3<br><span class="hljs-attr">UUID</span>=<span class="hljs-number">039303</span>a5-c70d-<span class="hljs-number">4973</span>-<span class="hljs-number">8</span>c91-<span class="hljs-number">97</span>eaa071c23d<br><span class="hljs-attr">DEVICE</span>=enp0s3<br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">1.31</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">122.1</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-number">223.5</span>.<span class="hljs-number">5.5</span><br></code></pre></td></tr></table></figure><h5 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a><strong>设置主机名</strong></h5><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-master01</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node01</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node02</span><br></code></pre></td></tr></table></figure><h5 id="添加并启动源"><a href="#添加并启动源" class="headerlink" title="添加并启动源"></a><strong>添加并启动源</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu忽略，CentOS执行</span><br><br><span class="hljs-comment"># 为 RHEL-8或 CentOS-8配置源</span><br>yum install https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm -y <br>sed -i <span class="hljs-string">&quot;s@mirrorlist@#mirrorlist@g&quot;</span> /etc/yum.repos.d/elrepo.repo <br>sed -i <span class="hljs-string">&quot;s@elrepo.org/linux@mirrors.tuna.tsinghua.edu.cn/elrepo@g&quot;</span> /etc/yum.repos.d/elrepo.repo <br><br><span class="hljs-comment"># 为 RHEL-7 SL-7 或 CentOS-7 安装 ELRepo </span><br>yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm -y <br>sed -i <span class="hljs-string">&quot;s@mirrorlist@#mirrorlist@g&quot;</span> /etc/yum.repos.d/elrepo.repo <br>sed -i <span class="hljs-string">&quot;s@elrepo.org/linux@mirrors.tuna.tsinghua.edu.cn/elrepo@g&quot;</span> /etc/yum.repos.d/elrepo.repo <br><br><span class="hljs-comment"># 查看可用安装包</span><br>yum  --disablerepo=<span class="hljs-string">&quot;*&quot;</span>  --enablerepo=<span class="hljs-string">&quot;elrepo-kernel&quot;</span>  list  available<br></code></pre></td></tr></table></figure><h5 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a><strong>配置yum源</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 其他系统的源地址</span><br><span class="hljs-comment"># https://mirrors.tuna.tsinghua.edu.cn/help/</span><br><br><span class="hljs-comment"># 对于 Ubuntu</span><br>sed -i <span class="hljs-string">&#x27;s/cn.archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list<br><br><span class="hljs-comment"># 对于 CentOS 7</span><br><span class="hljs-built_in">sudo</span> sed -e <span class="hljs-string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \<br>         -e <span class="hljs-string">&#x27;s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos|g&#x27;</span> \<br>         -i.bak \<br>         /etc/yum.repos.d/CentOS-*.repo<br><br><span class="hljs-comment"># 对于 CentOS 8</span><br><span class="hljs-built_in">sudo</span> sed -e <span class="hljs-string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \<br>         -e <span class="hljs-string">&#x27;s|^#baseurl=http://mirror.centos.org/$contentdir|baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos|g&#x27;</span> \<br>         -i.bak \<br>         /etc/yum.repos.d/CentOS-*.repo<br><br><span class="hljs-comment"># 对于私有仓库</span><br>sed -e <span class="hljs-string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> -e <span class="hljs-string">&#x27;s|^#baseurl=http://mirror.centos.org/\$contentdir|baseurl=http://192.168.1.123/centos|g&#x27;</span> -i.bak  /etc/yum.repos.d/CentOS-*.repo<br></code></pre></td></tr></table></figure><h5 id="安装一些必备工具"><a href="#安装一些必备工具" class="headerlink" title="安装一些必备工具"></a><strong>安装一些必备工具</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对于 Ubuntu</span><br>apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install -y wget psmisc vim net-tools nfs-kernel-server telnet lvm2 git tar curl<br><br><span class="hljs-comment"># 对于 CentOS 7</span><br>yum update -y &amp;&amp; yum -y install  wget psmisc vim net-tools nfs-utils telnet yum-utils device-mapper-persistent-data lvm2 git tar curl<br>yum install -y bash-completion net-tools gcc<br><br><span class="hljs-comment"># 对于 CentOS 8</span><br>yum update -y &amp;&amp; yum -y install wget psmisc vim net-tools nfs-utils telnet yum-utils device-mapper-persistent-data lvm2 git network-scripts tar curl<br></code></pre></td></tr></table></figure><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu忽略，CentOS执行</span><br>systemctl <span class="hljs-built_in">disable</span> --now firewalld<br></code></pre></td></tr></table></figure><h5 id="关闭selinux（记得升级内核后重启）"><a href="#关闭selinux（记得升级内核后重启）" class="headerlink" title="关闭selinux（记得升级内核后重启）"></a>关闭selinux（记得升级内核后重启）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu忽略，CentOS执行</span><br>setenforce 0<br>sed -i <span class="hljs-string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/selinux/config<br><br><span class="hljs-comment"># 参数解释</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># setenforce 0</span><br><span class="hljs-comment"># 此命令用于设置 SELinux 的执行模式。0 表示关闭 SELinux。</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># sed -i &#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27; /etc/selinux/config</span><br><span class="hljs-comment"># 该命令使用 sed 工具来编辑 /etc/selinux/config 文件。其中 &#x27;-i&#x27; 参数表示直接修改原文件，而不是输出到终端或另一个文件。&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27; 是 sed 的替换命令，它将文件中所有的 &quot;SELINUX=enforcing&quot; 替换为 &quot;SELINUX=disabled&quot;。这里的 &#x27;#&#x27; 是分隔符，用于替代传统的 &#x27;/&#x27; 分隔符，以避免与路径中的 &#x27;/&#x27; 冲突。</span><br></code></pre></td></tr></table></figure><h5 id="关闭交换分区"><a href="#关闭交换分区" class="headerlink" title="关闭交换分区"></a>关闭交换分区</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<br>swapoff -a &amp;&amp; sysctl -w vm.swappiness=0<br><br>cat /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># -ri: 这个参数用于在原文件中替换匹配的模式。-r表示扩展正则表达式，-i允许直接修改文件。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span>: 这是一个sed命令，用于在文件/etc/fstab中找到包含swap的行，并在行首添加#来注释掉该行。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/fstab: 这是一个文件路径，即/etc/fstab文件，用于存储文件系统表。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">swapoff -a: 这个命令用于关闭所有启用的交换分区。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sysctl -w vm.swappiness=0: 这个命令用于修改vm.swappiness参数的值为0，表示系统在物理内存充足时更倾向于使用物理内存而非交换分区。</span><br></code></pre></td></tr></table></figure><h5 id="网络配置（俩种方式二选一）"><a href="#网络配置（俩种方式二选一）" class="headerlink" title="网络配置（俩种方式二选一）"></a>网络配置（俩种方式二选一）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu忽略，CentOS执行</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式一</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">disable</span> --now NetworkManager</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl start network &amp;&amp; systemctl <span class="hljs-built_in">enable</span> network</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二</span><br>cat &gt; /etc/NetworkManager/conf.d/calico.conf &lt;&lt; EOF <br>[keyfile]<br>unmanaged-devices=interface-name:cali*;interface-name:tunl*<br>EOF<br>systemctl restart NetworkManager<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 这个参数用于指定不由 NetworkManager 管理的设备。它由以下两个部分组成</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># interface-name:cali*</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示以 <span class="hljs-string">&quot;cali&quot;</span> 开头的接口名称被排除在 NetworkManager 管理之外。例如，<span class="hljs-string">&quot;cali0&quot;</span>, <span class="hljs-string">&quot;cali1&quot;</span> 等接口不受 NetworkManager 管理。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># interface-name:tunl*</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示以 <span class="hljs-string">&quot;tunl&quot;</span> 开头的接口名称被排除在 NetworkManager 管理之外。例如，<span class="hljs-string">&quot;tunl0&quot;</span>, <span class="hljs-string">&quot;tunl1&quot;</span> 等接口不受 NetworkManager 管理。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 通过使用这个参数，可以将特定的接口排除在 NetworkManager 的管理范围之外，以便其他工具或进程可以独立地管理和配置这些接口。</span></span><br></code></pre></td></tr></table></figure><h5 id="进行时间同步"><a href="#进行时间同步" class="headerlink" title="进行时间同步"></a>进行时间同步</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">服务端</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install chrony -y</span><br>yum install chrony -y<br>cat &gt; /etc/chrony.conf &lt;&lt; EOF <br>pool ntp.aliyun.com iburst<br>driftfile /var/lib/chrony/drift<br>makestep 1.0 3<br>rtcsync<br>allow 192.168.101.0/24<br>local stratum 10<br>keyfile /etc/chrony.keys<br>leapsectz right/UTC<br>logdir /var/log/chrony<br>EOF<br><br>systemctl restart chronyd ; systemctl enable chronyd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install chrony -y</span><br>yum install chrony -y<br>cat &gt; /etc/chrony.conf &lt;&lt; EOF <br>pool 192.168.1.31 iburst<br>driftfile /var/lib/chrony/drift<br>makestep 1.0 3<br>rtcsync<br>keyfile /etc/chrony.keys<br>leapsectz right/UTC<br>logdir /var/log/chrony<br>EOF<br><br>systemctl restart chronyd ; systemctl enable chronyd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用客户端进行验证</span><br>chronyc sources -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># pool ntp.aliyun.com iburst</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定使用ntp.aliyun.com作为时间服务器池，iburst选项表示在初始同步时会发送多个请求以加快同步速度。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># driftfile /var/lib/chrony/drift</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定用于保存时钟漂移信息的文件路径。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># makestep 1.0 3</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置当系统时间与服务器时间偏差大于1秒时，会以1秒的步长进行调整。如果偏差超过3秒，则立即进行时间调整。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># rtcsync</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启用硬件时钟同步功能，可以提高时钟的准确性。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># allow 192.168.0.0/24</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许192.168.0.0/24网段范围内的主机与chrony进行时间同步。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># local stratum 10</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将本地时钟设为stratum 10，stratum值表示时钟的准确度，值越小表示准确度越高。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># keyfile /etc/chrony.keys</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定使用的密钥文件路径，用于对时间同步进行身份验证。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># leapsectz right/UTC</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定时区为UTC。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># logdir /var/log/chrony</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定日志文件存放目录。</span><br></code></pre></td></tr></table></figure><h5 id="配置ulimit-根据自己服务器性能设置"><a href="#配置ulimit-根据自己服务器性能设置" class="headerlink" title="配置ulimit(根据自己服务器性能设置)"></a>配置ulimit(根据自己服务器性能设置)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">ulimit -SHn 65535<br>cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF<br>* soft nofile 655360<br>* hard nofile 131072<br>* soft nproc 655350<br>* hard nproc 655350<br>* soft memlock unlimited<br>* hard memlock unlimited<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># soft nofile 655360</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">soft表示软限制，nofile表示一个进程可打开的最大文件数，默认值为1024。这里的软限制设置为655360，即一个进程可打开的最大文件数为655360。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># hard nofile 131072</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hard表示硬限制，即系统设置的最大值。nofile表示一个进程可打开的最大文件数，默认值为4096。这里的硬限制设置为131072，即系统设置的最大文件数为131072。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># soft nproc 655350</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">soft表示软限制，<span class="hljs-built_in">nproc</span>表示一个用户可创建的最大进程数，默认值为30720。这里的软限制设置为655350，即一个用户可创建的最大进程数为655350。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># hard nproc 655350</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hard表示硬限制，即系统设置的最大值。<span class="hljs-built_in">nproc</span>表示一个用户可创建的最大进程数，默认值为4096。这里的硬限制设置为655350，即系统设置的最大进程数为655350。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># soft memlock unlimited</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">soft表示软限制，memlock表示一个进程可锁定在RAM中的最大内存，默认值为64 KB。这里的软限制设置为unlimited，即一个进程可锁定的最大内存为无限制。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># hard memlock unlimited</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hard表示硬限制，即系统设置的最大值。memlock表示一个进程可锁定在RAM中的最大内存，默认值为64 KB。这里的硬限制设置为unlimited，即系统设置的最大内存锁定为无限制。</span><br></code></pre></td></tr></table></figure><h5 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install -y sshpass</span><br>yum install -y sshpass<br>ssh-keygen -f /root/.ssh/id_rsa -P &#x27;&#x27;<br>export IP=&quot;192.168.1.31 192.168.1.32 192.168.1.33 192.168.1.34 192.168.1.35&quot;<br>export SSHPASS=123123<br>for HOST in $IP;do<br>     sshpass -e ssh-copy-id -o StrictHostKeyChecking=no $HOST<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这段脚本的作用是在一台机器上安装sshpass工具，并通过sshpass自动将本机的SSH公钥复制到多个远程主机上，以实现无需手动输入密码的SSH登录。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 具体解释如下：</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 1. `apt install -y sshpass` 或 `yum install -y sshpass`：通过包管理器（apt或yum）安装sshpass工具，使得后续可以使用sshpass命令。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 2. `ssh-keygen -f /root/.ssh/id_rsa -P &#x27;&#x27;`：生成SSH密钥对。该命令会在/root/.ssh目录下生成私钥文件id_rsa和公钥文件id_rsa.pub，同时不设置密码（即-P参数后面为空），方便后续通过ssh-copy-id命令自动复制公钥。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 3. `export IP=&quot;192.168.1.31 192.168.1.32 192.168.1.33 192.168.1.34 192.168.1.35&quot;`：设置一个包含多个远程主机IP地址的环境变量IP，用空格分隔开，表示要将SSH公钥复制到这些远程主机上。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 4. `export SSHPASS=123123`：设置环境变量SSHPASS，将sshpass所需的SSH密码（在这里是&quot;123123&quot;）赋值给它，这样sshpass命令可以自动使用这个密码进行登录。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 5. `for HOST in $IP;do`：遍历环境变量IP中的每个IP地址，并将当前IP地址赋值给变量HOST。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 6. `sshpass -e ssh-copy-id -o StrictHostKeyChecking=no $HOST`：使用sshpass工具复制本机的SSH公钥到远程主机。其中，-e选项表示使用环境变量中的密码（即SSHPASS）进行登录，-o StrictHostKeyChecking=no选项表示连接时不检查远程主机的公钥，以避免交互式确认。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 通过这段脚本，可以方便地将本机的SSH公钥复制到多个远程主机上，实现无需手动输入密码的SSH登录。</span></span><br></code></pre></td></tr></table></figure><h5 id="升级内核至4-18版本以上"><a href="#升级内核至4-18版本以上" class="headerlink" title="升级内核至4.18版本以上"></a>升级内核至4.18版本以上</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu忽略，CentOS执行</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装最新的内核</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我这里选择的是稳定版kernel-ml   如需更新长期维护版本kernel-lt</span>  <br>yum -y --enablerepo=elrepo-kernel  install  kernel-ml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看已安装那些内核</span><br>rpm -qa | grep kernel<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看默认内核</span><br>grubby --default-kernel<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">若不是最新的使用命令设置</span><br>grubby --set-default $(ls /boot/vmlinuz-* | grep elrepo)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启生效</span><br>reboot<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">v8 整合命令为：</span><br>yum install https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm -y ; sed -i &quot;s@mirrorlist@#mirrorlist@g&quot; /etc/yum.repos.d/elrepo.repo ; sed -i &quot;s@elrepo.org/linux@mirrors.tuna.tsinghua.edu.cn/elrepo@g&quot; /etc/yum.repos.d/elrepo.repo ; yum  --disablerepo=&quot;*&quot;  --enablerepo=&quot;elrepo-kernel&quot;  list  available -y ; yum  --enablerepo=elrepo-kernel  install kernel-lt -y ; grubby --default-kernel ; reboot <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">v7 整合命令为：</span><br>yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm -y ; sed -i &quot;s@mirrorlist@#mirrorlist@g&quot; /etc/yum.repos.d/elrepo.repo ; sed -i &quot;s@elrepo.org/linux@mirrors.tuna.tsinghua.edu.cn/elrepo@g&quot; /etc/yum.repos.d/elrepo.repo ; yum  --disablerepo=&quot;*&quot;  --enablerepo=&quot;elrepo-kernel&quot;  list  available -y ; yum  --enablerepo=elrepo-kernel  install  kernel-lt -y ; grubby --set-default $(ls /boot/vmlinuz-* | grep elrepo) ; grubby --default-kernel ; reboot <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">离线版本</span> <br>yum install -y /root/cby/kernel-lt-*-1.el7.elrepo.x86_64.rpm ; grubby --set-default $(ls /boot/vmlinuz-* | grep elrepo) ; grubby --default-kernel ; reboot <br></code></pre></td></tr></table></figure><h5 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf<br>net.ipv4.ip_forward = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>fs.may_detach_mounts = 1<br>vm.overcommit_memory=1<br>vm.panic_on_oom=0<br>fs.inotify.max_user_watches=89100<br>fs.file-max=52706963<br>fs.nr_open=52706963<br>net.netfilter.nf_conntrack_max=2310720<br><br>net.ipv4.tcp_keepalive_time = 600<br>net.ipv4.tcp_keepalive_probes = 3<br>net.ipv4.tcp_keepalive_intvl =15<br>net.ipv4.tcp_max_tw_buckets = 36000<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_max_orphans = 327680<br>net.ipv4.tcp_orphan_retries = 3<br>net.ipv4.tcp_syncookies = 1<br>net.ipv4.tcp_max_syn_backlog = 16384<br>net.ipv4.ip_conntrack_max = 65536<br>net.ipv4.tcp_max_syn_backlog = 16384<br>net.ipv4.tcp_timestamps = 0<br>net.core.somaxconn = 16384<br><br>net.ipv6.conf.all.disable_ipv6 = 0<br>net.ipv6.conf.default.disable_ipv6 = 0<br>net.ipv6.conf.lo.disable_ipv6 = 0<br>net.ipv6.conf.all.forwarding = 1<br>EOF<br><br>sysctl --system<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这些是Linux系统的一些参数设置，用于配置和优化网络、文件系统和虚拟内存等方面的功能。以下是每个参数的详细解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 1. net.ipv4.ip_forward = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 这个参数启用了IPv4的IP转发功能，允许服务器作为网络路由器转发数据包。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 2. net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 当使用网络桥接技术时，将数据包传递到iptables进行处理。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> </span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. fs.may_detach_mounts = 1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 允许在挂载文件系统时，允许被其他进程使用。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> </span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. vm.overcommit_memory=1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 该设置允许原始的内存过量分配策略，当系统的内存已经被完全使用时，系统仍然会分配额外的内存。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 5. vm.panic_on_oom=0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 当系统内存不足（OOM）时，禁用系统崩溃和重启。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">6. fs.inotify.max_user_watches=89100</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 设置系统允许一个用户的inotify实例可以监控的文件数目的上限。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 7. fs.file-max=52706963</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 设置系统同时打开的文件数的上限。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 8. fs.nr_open=52706963</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 设置系统同时打开的文件描述符数的上限。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 9. net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 设置系统可以创建的网络连接跟踪表项的最大数量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 10. net.ipv4.tcp_keepalive_time = 600</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置TCP套接字的空闲超时时间（秒），超过该时间没有活动数据时，内核会发送心跳包。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 11. net.ipv4.tcp_keepalive_probes = 3</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置未收到响应的TCP心跳探测次数。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 12. net.ipv4.tcp_keepalive_intvl = 15</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置TCP心跳探测的时间间隔（秒）。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 13. net.ipv4.tcp_max_tw_buckets = 36000</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统可以使用的TIME_WAIT套接字的最大数量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 14. net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用TIME_WAIT套接字的重新利用，允许新的套接字使用旧的TIME_WAIT套接字。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 15. net.ipv4.tcp_max_orphans = 327680</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统可以同时存在的TCP套接字垃圾回收包裹数的最大数量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 16. net.ipv4.tcp_orphan_retries = 3</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统对于孤立的TCP套接字的重试次数。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 17. net.ipv4.tcp_syncookies = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用TCP SYN cookies保护，用于防止SYN洪泛攻击。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 18. net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置新的TCP连接的半连接数（半连接队列）的最大长度。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 19. net.ipv4.ip_conntrack_max = 65536</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统可以创建的网络连接跟踪表项的最大数量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 20. net.ipv4.tcp_timestamps = 0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 关闭TCP时间戳功能，用于提供更好的安全性。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 21. net.core.somaxconn = 16384</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统核心层的连接队列的最大值。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 22. net.ipv6.conf.all.disable_ipv6 = 0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用IPv6协议。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 23. net.ipv6.conf.default.disable_ipv6 = 0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用IPv6协议。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 24. net.ipv6.conf.lo.disable_ipv6 = 0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用IPv6协议。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 25. net.ipv6.conf.all.forwarding = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 允许IPv6数据包转发。</span><br></code></pre></td></tr></table></figure><h5 id="使用aliyun源安装docker-ce"><a href="#使用aliyun源安装docker-ce" class="headerlink" title="使用aliyun源安装docker-ce"></a>使用aliyun源安装docker-ce</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 底层是用docker运行，所以每台主机都需要安装docker</span><br>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>yum -y install docker-ce<br></code></pre></td></tr></table></figure><p>Kubernetes是一个开源系统，用于容器化应用的自动部署、扩缩和管理。它将构成应用的容器按逻辑单位进行分组以便于管理和发现。</p><p>由于 Kubernetes 官方变更了仓库的存储路径以及使用方式，如果需要使用 1.28 及以上版本，请使用 新版配置方法 进行配置。</p><p>下载地址：<a href="https://mirrors.aliyun.com/kubernetes/">https://mirrors.aliyun.com/kubernetes/</a></p><p>新版下载地址：<a href="https://mirrors.aliyun.com/kubernetes-new/">https://mirrors.aliyun.com/kubernetes-new/</a></p><h4 id="k8s组件安装配置方法"><a href="#k8s组件安装配置方法" class="headerlink" title="k8s组件安装配置方法"></a>k8s组件安装配置方法</h4><h5 id="新版配置方法"><a href="#新版配置方法" class="headerlink" title="新版配置方法"></a>新版配置方法</h5><p>新版 kubernetes 源使用方法和之前有一定区别，请求按照如下配置方法配置使用。</p><p>其中新版 kubernetes 源按照安装版本区分不同仓库，该文档示例为配置 1.30 版本，如需其他版本请在对应位置字符串替换即可。</p><h6 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian &#x2F; Ubuntu"></a>Debian &#x2F; Ubuntu</h6><ol><li>在配置中添加镜像（注意修改为自己需要的版本号）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update &amp;&amp; apt-get install -y apt-transport-https<br>curl -fsSL https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/deb/Release.key |<br>    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg<br>echo &quot;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.28/deb/ /&quot; |<br>    tee /etc/apt/sources.list.d/kubernetes.list<br></code></pre></td></tr></table></figure><ol start="2"><li>安装必要应用：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br>apt-get install -y kubelet kubeadm kubectl<br>systemctl enable kubelet &amp;&amp; systemctl start kubelet<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如安装指定版本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install kubelet=1.28.2-00 kubeadm=1.28.2-00 kubectl=1.28.2-00</span><br></code></pre></td></tr></table></figure><h6 id="CentOS-RHEL-Fedora"><a href="#CentOS-RHEL-Fedora" class="headerlink" title="CentOS &#x2F; RHEL &#x2F; Fedora"></a>CentOS &#x2F; RHEL &#x2F; Fedora</h6><ol><li>执行如下命令（注意修改为自己需要的版本号）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF | tee /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/rpm/<br>enabled=1<br>gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/rpm/repodata/repomd.xml.key<br>EOF<br></code></pre></td></tr></table></figure><ol start="2"><li>安装必要应用：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看kubelet的版本，方便在安装的时候使用k8s 1.23的新版本</span><br>yum search kubelet --showduplicates <br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据查询出来的kubelet，选择对应的安装版本，这里以1.23.9为例</span><br>yum install kubelet-1.23.9-0 kubeadm-1.23.9-0 kubectl-1.23.9-0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置kubelet自动启动，但是查看状态的时候是没有启动的，在kubeadm初始化集群的时候会自动启动</span><br>systemctl enable kubelet &amp;&amp; systemctl start kubelet<br><br></code></pre></td></tr></table></figure><p>ps: 由于官网未开放同步方式, 可能会有索引gpg检查失败的情况, 这时请用 <code>yum install -y --nogpgcheck kubelet kubeadm kubectl</code> 安装</p><h5 id="旧版配置方法"><a href="#旧版配置方法" class="headerlink" title="旧版配置方法"></a>旧版配置方法</h5><p>目前由于kubernetes官方变更了仓库的存储路径以及使用方式，旧版 kubernetes 源只更新到 1.28 部分版本，后续更新版本请使用 新源配置方法 进行配置。</p><h6 id="Debian-Ubuntu-1"><a href="#Debian-Ubuntu-1" class="headerlink" title="Debian &#x2F; Ubuntu"></a>Debian &#x2F; Ubuntu</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update &amp;&amp; apt-get install -y apt-transport-https<br>curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - <br>cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list<br>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main<br>EOF<br>apt-get update<br>apt-get install -y kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><h6 id="CentOS-RHEL-Fedora-1"><a href="#CentOS-RHEL-Fedora-1" class="headerlink" title="CentOS &#x2F; RHEL &#x2F; Fedora"></a>CentOS &#x2F; RHEL &#x2F; Fedora</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看kubelet的版本，方便在安装的时候使用k8s 1.23的新版本</span><br>yum search kubelet --showduplicates <br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据查询出来的kubelet，选择对应的安装版本，这里以1.23.9为例</span><br>yum install kubelet-1.23.9-0 kubeadm-1.23.9-0 kubectl-1.23.9-0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置kubelet自动启动，但是查看状态的时候是没有启动的，在kubeadm初始化集群的时候会自动启动</span><br>systemctl enable kubelet &amp;&amp; systemctl start kubelet<br></code></pre></td></tr></table></figure><p>ps: 由于官网未开放同步方式, 可能会有索引gpg检查失败的情况, 这时请用 <code>yum install -y --nogpgcheck kubelet kubeadm kubectl</code> 安装</p><h4 id="使用kubeadm初始化安装"><a href="#使用kubeadm初始化安装" class="headerlink" title="使用kubeadm初始化安装"></a>使用kubeadm初始化安装</h4><h5 id="配置k8s使用阿里云源"><a href="#配置k8s使用阿里云源" class="headerlink" title="配置k8s使用阿里云源"></a>配置k8s使用阿里云源</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master01 ~]# <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">repo_gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h5 id="查看k8s版本使用的镜像（可以先拉取下来这样比较快一点）"><a href="#查看k8s版本使用的镜像（可以先拉取下来这样比较快一点）" class="headerlink" title="查看k8s版本使用的镜像（可以先拉取下来这样比较快一点）"></a>查看k8s版本使用的镜像（可以先拉取下来这样比较快一点）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看最新版本有那些镜像</span><br>[root@k8s-master01 ~]# kubeadm config images list --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers<br><br><span class="hljs-comment"># 如果想要查看默认配置，可以使用下面的这个命令将配置重定向到文件当中，后面自行修改</span><br>[root@k8s-master01 ~]# kubeadm config <span class="hljs-built_in">print</span> init-defaults &gt; kubeadm-init.yaml<br><br><span class="hljs-comment"># 上面的配置文件配置完成了之后，使用指定配置文件的方式初始化集群</span><br>[root@k8s-master01 ~]# kubeadm init --config=kubeadm.yaml<br><br><span class="hljs-comment"># 如果安装失败，执行下面的命令</span><br><span class="hljs-comment"># 重新初始化</span><br>[root@k8s-master01 ~]# kubeadm reset<br><br><span class="hljs-comment"># 使用参数的形式初始化</span><br>[root@k8s-master01 ~]# kubeadminit--kubernetes-version=1.23.9 --apiserver-advertise-address=10.0.0.19       --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16 <br><br><span class="hljs-comment"># 这个参数可加可不加（因为前面关闭了swap，并重启了机器）</span><br>--ignore-preflight-errors=Swap<br></code></pre></td></tr></table></figure><h5 id="安装完成后"><a href="#安装完成后" class="headerlink" title="安装完成后"></a>安装完成后</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]#  <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>[root@k8s-master01 ~]#  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>[root@k8s-master01 ~]#  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h5 id="把其他节点以node方式加入k8s"><a href="#把其他节点以node方式加入k8s" class="headerlink" title="把其他节点以node方式加入k8s"></a>把其他节点以node方式加入k8s</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把其他的节点作为master（control-plane ）加入</span><br><span class="hljs-comment"># 但是下面的命令不要复制这里的，kubeadm安装完成后会自己输出在终端内</span><br>You can now <span class="hljs-built_in">join</span> any number of control-plane nodes by copying certificate authorities<br>and service account keys on each node and <span class="hljs-keyword">then</span> running the following as root:<br><br>  kubeadm <span class="hljs-built_in">join</span> 192.168.1.36:9443 --token abcdef.0123456789abcdef \<br>--discovery-token-ca-cert-hash sha256:583ddadd1318dae447c3890aa3a2469c5b00c6775e87102458db07e691c724be \<br>--control-plane <br><br><span class="hljs-comment"># 把其他节点作为work节点加入</span><br>Then you can <span class="hljs-built_in">join</span> any number of worker nodes by running the following on each as root:<br><br>kubeadm <span class="hljs-built_in">join</span> 192.168.1.36:9443 --token abcdef.0123456789abcdef \<br>--discovery-token-ca-cert-hash sha256:583ddadd1318dae447c3890aa3a2469c5b00c6775e87102458db07e691c724be <br></code></pre></td></tr></table></figure><h4 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h4><h5 id="打开k8s官网网址提供的网络插件"><a href="#打开k8s官网网址提供的网络插件" class="headerlink" title="打开k8s官网网址提供的网络插件"></a>打开k8s官网网址提供的网络插件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://kubernetes.io/docs/concepts/cluster-administration/addons/<br><span class="hljs-comment"># 找到Networking and Network Policy  这个部分，根据需要安装网络插件</span><br><span class="hljs-comment"># 这里选择的是flannel网络插件，可以直接复制这里的地址打开github上的地址，也可以自己打开上面的k8s页面，自己找到对应的网址，建议还是打开看一下</span><br>https://github.com/flannel-io/flannel#deploying-flannel-manually<br><br><span class="hljs-comment"># For Kubernetes v1.17+ Deploying Flannel with kubectl</span><br>[root@master01 ~]# kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml<br><br><span class="hljs-comment"># 如果想用calico网络插件</span><br>[root@master01 ~]# kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml<br><br><span class="hljs-comment"># 等待kube-flannel命名空间内的pod容器启动完成</span><br><span class="hljs-comment"># 可以使用下面的命令监视</span><br>watch -n 1 kubectl get po  -n kube-flannel<br></code></pre></td></tr></table></figure><h4 id="查看k8s集群状态"><a href="#查看k8s集群状态" class="headerlink" title="查看k8s集群状态"></a>查看k8s集群状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]# kubectl get nodes<br>NAME           STATUS     ROLES           AGE     VERSION<br>k8s-master01   NotReady   control-plane   2m14s   v1.23.9<br>k8s-node01     NotReady   &lt;none&gt;          19s     v1.23.9<br>k8s-node02     NotReady   &lt;none&gt;          9s      v1.23.9<br></code></pre></td></tr></table></figure><h4 id="安装后完善"><a href="#安装后完善" class="headerlink" title="安装后完善"></a>安装后完善</h4><h5 id="执行下面命令，使kubectl可以自动补充"><a href="#执行下面命令，使kubectl可以自动补充" class="headerlink" title="执行下面命令，使kubectl可以自动补充"></a>执行下面命令，使kubectl可以自动补充</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master01 ~]# <span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br>[root@master01 ~]# <span class="hljs-built_in">source</span> &lt;(kubeadm completion bash)<br></code></pre></td></tr></table></figure><h4 id="安装kubernetes-dashboard"><a href="#安装kubernetes-dashboard" class="headerlink" title="安装kubernetes-dashboard"></a>安装kubernetes-dashboard</h4><h5 id="为dashboard配置nodeport端口"><a href="#为dashboard配置nodeport端口" class="headerlink" title="为dashboard配置nodeport端口"></a>为dashboard配置nodeport端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 官方部署`dashboard`的服务没使用`nodeport`，将yaml文件下载到本地，在service里添加nodeport</span><br>[root@master01 ~]# wget  https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc7/aio/deploy/recommended.yaml<br>[root@master01 ~]# vim recommended.yaml<br>kind: Service<br>apiVersion: v1<br>metadata:<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>  name: kubernetes-dashboard<br>  namespace: kubernetes-dashboard<br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>    - port: 443<br>      targetPort: 8443<br>      nodePort: 30000<br>  selector:<br>    k8s-app: kubernetes-dashboard<br><br>[root@master01 ~]# kubectl create -f recommended.yaml<br>namespace/kubernetes-dashboard created<br>serviceaccount/kubernetes-dashboard created<br>service/kubernetes-dashboard created<br>secret/kubernetes-dashboard-certs created<br>secret/kubernetes-dashboard-csrf created<br>secret/kubernetes-dashboard-key-holder created<br>configmap/kubernetes-dashboard-settings created<br>role.rbac.authorization.k8s.io/kubernetes-dashboard created<br>clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created<br>rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created<br>clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created<br>deployment.apps/kubernetes-dashboard created<br>service/dashboard-metrics-scraper created<br>deployment.apps/dashboard-metrics-scraper created<br></code></pre></td></tr></table></figure><h5 id="查看pod，service"><a href="#查看pod，service" class="headerlink" title="查看pod，service"></a>查看pod，service</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NAME</span>                                        READY   STATUS    RESTARTS   AGE<br><span class="hljs-attribute">dashboard</span>-metrics-scraper-dc6947fbf-<span class="hljs-number">869</span>kf   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">37</span>s<br><span class="hljs-attribute">kubernetes</span>-dashboard-<span class="hljs-number">5</span>d4dc8b976-sdxxt       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">37</span>s<span class="hljs-meta"></span><br><span class="hljs-meta">[root@master01 ~]# kubectl get svc -n kubernetes-dashboard</span><br><span class="hljs-meta">NAME                        TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE</span><br><span class="hljs-meta">dashboard-metrics-scraper   ClusterIP   10.10.58.93    &lt;none&gt;        8000/TCP        44s</span><br><span class="hljs-meta">kubernetes-dashboard        NodePort    10.10.132.66   &lt;none&gt;        443:30000/TCP   44s</span><br></code></pre></td></tr></table></figure><h5 id="通过页面访问，推荐使用firefox浏览器"><a href="#通过页面访问，推荐使用firefox浏览器" class="headerlink" title="通过页面访问，推荐使用firefox浏览器"></a>通过页面访问，推荐使用firefox浏览器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据自己的网络环境打开对应的网址</span><br>打开浏览器输入https://192.168.1.30000  <br></code></pre></td></tr></table></figure><h5 id="使用token进行登录，执行下面命令获取token"><a href="#使用token进行登录，执行下面命令获取token" class="headerlink" title="使用token进行登录，执行下面命令获取token"></a>使用token进行登录，执行下面命令获取token</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master01 ~]# kubectl describe secrets -n kubernetes-dashboard kubernetes-dashboard-token-t4hxz  | grep token | awk <span class="hljs-string">&#x27;NR==3&#123;print $2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>登录后，如果没有namespace可选，并且提示找不到资源 ，那么就是权限问题。</p><p>通过查看dashboard日志，得到如下 信息，出现以下信息的原因是，登录dashboard的权限不够，不能获取到内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2023/04/08 01:54:31 Non-critical <span class="hljs-built_in">error</span> occurred during<span class="hljs-built_in"> resource </span>retrieval: jobs.batch is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;system:serviceaccount:kubernetes-dashboard:kubernetes-dashboard&quot;</span> cannot list<span class="hljs-built_in"> resource </span><span class="hljs-string">&quot;jobs&quot;</span> <span class="hljs-keyword">in</span> API<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;batch&quot;</span> <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;default&quot;</span><br></code></pre></td></tr></table></figure><h5 id="创建集群角色绑定"><a href="#创建集群角色绑定" class="headerlink" title="创建集群角色绑定"></a>创建集群角色绑定</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解决办法就是创建集群角色绑定，以集群管理员的方式，管理dashboard</span><br>[root@master01 ~]# kubectl create clusterrolebinding serviceaccount-cluster-admin --clusterrole=cluster-admin --group=system:serviceaccount <br>clusterrolebinding.rbac.authorization.k8s.io/serviceaccount-cluster-admin created<br></code></pre></td></tr></table></figure><h5 id="查看dashboard日志"><a href="#查看dashboard日志" class="headerlink" title="查看dashboard日志"></a>查看dashboard日志</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master01 ~]# kubectl logs -f -n kubernetes-dashboard kubernetes-dashboard-5d4dc8b976-sdxx<br></code></pre></td></tr></table></figure><h5 id="此时再查看dashboard，即可看到有资源展示"><a href="#此时再查看dashboard，即可看到有资源展示" class="headerlink" title="此时再查看dashboard，即可看到有资源展示"></a>此时再查看dashboard，即可看到有资源展示</h5>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s、云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes集群包管理解决方案-helm</title>
    <link href="/2025/03/19/Kubernetes%E9%9B%86%E7%BE%A4%E5%8C%85%E7%AE%A1%E7%90%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-helm/"/>
    <url>/2025/03/19/Kubernetes%E9%9B%86%E7%BE%A4%E5%8C%85%E7%AE%A1%E7%90%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-helm/</url>
    
    <content type="html"><![CDATA[<h5 id="一、引入helm原因"><a href="#一、引入helm原因" class="headerlink" title="一、引入helm原因"></a>一、引入helm原因</h5><pre><code class="hljs">当今的软件开发，随着云原生技术的普及，我们的工程应用进行微服务化和容器化的现象也变得越来越普遍。而Kubernetes几乎已经成了云原生服务编排绕不开的标准和技术。实际生产中，微服务项目可能有十几个模块，若还需要进行安全访问和控制，那么需要创建诸如Role、ServiceAccount等资源。部署和版本升级时也往往需要修改或添加配置文件中的一些参数（例如：服务占用的CPU、内存、副本数、端口等），维护大量的yaml文件极为不便，所以，我们需要将这些YAML文件作为一个**整体**管理，并高效复用。</code></pre><ul><li>在Linux操作系统软件部署中，我们可以使用批量管理工具完成软件的批量管理等，例如yum、dnf等；</li><li>在容器应用中Docker使用Dockerfile文件解决了容器镜像制作难题；</li><li>在kubernetes应用中，通过YAML格式文件解决容器编排部署难题，例如可以通过YAML格式的资源清单文件，非常方便部署不同控制器类型的应用;但是如何维护大量的，系统性的YAML文件，需要我们拥有更好的工具，不能简单使用YAML资源清单托管服务器就可以解决的。</li></ul><h5 id="二、helm是什么"><a href="#二、helm是什么" class="headerlink" title="二、helm是什么"></a>二、helm是什么</h5><ul><li><p>官方: <a href="https://helm.sh/">https://helm.sh/</a></p></li><li><p>作为CNCF的毕业项目。它的官方的定义是：Helm是一个为K8s进行包管理的工具</p></li></ul><ul><li>Helm(舵柄; 舵轮)是一个Kubernetes的包管理工具，就像Linux下的包管理器，如yum&#x2F;apt等。</li><li>helm一个命令行客户端工具，主要用于Kubernetes应用chart的创建、打包、发布和管理。</li><li>通过helm可以很方便的将之前打包好的yaml文件部署到kubernetes上。</li><li>对于应用发布者而言，可以通过Helm打包应用，管理应用依赖关系，管理应用版本并发布应用到软件仓库。</li><li>对于使用者而言，使用Helm后不用需要了解Kubernetes的Yaml语法并编写应用部署文件，可以通过Helm下载并在kubernetes上安装需要的应用。</li><li>除此以外，Helm还提供了kubernetes上的软件部署，删除，升级，回滚应用的强大功能。</li><li>Helm 社区已经维护了一个官方 Helm Hub，我们可以直接使用已经做好的 Helm Chart，部署和管理比较复杂的应用程序</li><li>早期的hub.helm.dev转移到了<a href="https://artifacthub.io/%E3%80%82">https://artifacthub.io/。</a></li></ul><h5 id="三、helm作用及核心概念"><a href="#三、helm作用及核心概念" class="headerlink" title="三、helm作用及核心概念"></a>三、helm作用及核心概念</h5><pre><code class="hljs">Helm基于go模板语言，用户只要提供规定的目录结构和模板文件。在真正部署时Helm模板引擎便可以将其渲染成真正的K8s资源配置文件，并按照正确的顺序将它们部署到节点上。</code></pre><h6 id="Helm中有三个重要概念，分别为Chart、Repository和Release。"><a href="#Helm中有三个重要概念，分别为Chart、Repository和Release。" class="headerlink" title="Helm中有三个重要概念，分别为Chart、Repository和Release。"></a><strong>Helm中有三个重要概念，分别为Chart、Repository和Release。</strong></h6><ul><li><p>Chart代表中Helm包。它包含在K8s集群内部运行应用程序，工具或服务所需的所有资源定义，为所有项目资源清单yaml文件的集合，采用TAR格式，可以类比成yum中的RPM。</p></li><li><p>Repository就是用来存放和共享Chart的地方，可以类比成YUM仓库。</p></li><li><p>Release是运行在K8s集群中的Chart的实例(<strong>部署时候起的名字)</strong>，一个Chart可以在同一个集群中安装多次。Chart就像流水线中初始化好的模板，Release就是这个“模板”所生产出来的各个产品。</p></li></ul><h5 id="三、helm架构"><a href="#三、helm架构" class="headerlink" title="三、helm架构"></a>三、helm架构</h5><pre><code class="hljs">v2版本的时候需要在k8s集群当中安装一个Tiller服务，在v3版本当中，直接使用kubeconfig与apiserver进行对话。</code></pre><p><img src="https://www.t-ao.cn/usr/uploads/2024/06/754913602.png" alt="image-20220728135524226.png"></p><p>Helm客户端使用<strong>REST+JSON</strong>的方式与K8s中的apiserver进行交互，进而管理deployment、service等资源，并且客户端本身并不需要数据库，它会把相关的信息储存在K8s集群内的Secrets中。</p><p><img src="https://www.t-ao.cn/usr/uploads/2024/06/3728478168.png" alt="image-20220728140109073.png"></p><h5 id="四、helm部署"><a href="#四、helm部署" class="headerlink" title="四、helm部署"></a>四、helm部署</h5><p><img src="https://www.t-ao.cn/usr/uploads/2024/06/1773491326.png" alt="image-20220728140501620.png"><br><img src="https://www.t-ao.cn/usr/uploads/2024/06/1791632736.png" alt="image-20220728140538044.png"><br><img src="https://www.t-ao.cn/usr/uploads/2024/06/1791632736.png" alt="image-20220728140538044.png"><br><img src="https://www.t-ao.cn/usr/uploads/2024/06/2878045302.png" alt="image-20220728141000714.png"><br><img src="https://www.t-ao.cn/usr/uploads/2024/06/579956143.png" alt="image-20220728141101419.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># wget https://get.helm.sh/helm-v3.9.2-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment">#  ls</span><br>helm<span class="hljs-literal">-v3</span>.<span class="hljs-number">9.2</span><span class="hljs-literal">-linux-amd64</span>.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># tar xf helm-v3.9.2-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># ls</span><br>linux<span class="hljs-literal">-amd64</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># cd linux-amd64/</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">linux</span>-<span class="hljs-type">amd64</span>]<span class="hljs-comment"># ls</span><br>helm  LICENSE  README.md<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">linux</span>-<span class="hljs-type">amd64</span>]<span class="hljs-comment"># mv helm /usr/bin</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">linux</span>-<span class="hljs-type">amd64</span>]<span class="hljs-comment"># helm version</span><br>version.BuildInfo&#123;Version:<span class="hljs-string">&quot;v3.9.2&quot;</span>, GitCommit:<span class="hljs-string">&quot;1addefbfe665c350f4daf868a9adc5600cc064fd&quot;</span>, GitTreeState:<span class="hljs-string">&quot;clean&quot;</span>, GoVersion:<span class="hljs-string">&quot;go1.17.12&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="五、helm基础使用"><a href="#五、helm基础使用" class="headerlink" title="五、helm基础使用"></a>五、helm基础使用</h5><h6 id="5-1-添加及删除仓库"><a href="#5-1-添加及删除仓库" class="headerlink" title="5.1 添加及删除仓库"></a>5.1 添加及删除仓库</h6><h6 id="5-1-1-查看仓库"><a href="#5-1-1-查看仓库" class="headerlink" title="5.1.1 查看仓库"></a>5.1.1 查看仓库</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">master1</span> ~]<span class="hljs-comment"># helm repo list</span><br>Error: no repositories to show<br></code></pre></td></tr></table></figure><h6 id="5-1-2-添加新的仓库地址"><a href="#5-1-2-添加新的仓库地址" class="headerlink" title="5.1.2 添加新的仓库地址"></a>5.1.2 添加新的仓库地址</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">微软源<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo add stable http://mirror.azure.cn/kubernetes/charts/</span><br><br>bitnami源  <br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><br>prometheus源<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo add prometheus-community https://prometheus-community.github.io/helm-charts</span><br></code></pre></td></tr></table></figure><h6 id="5-1-3-查看已经添加的仓库"><a href="#5-1-3-查看已经添加的仓库" class="headerlink" title="5.1.3 查看已经添加的仓库"></a>5.1.3 查看已经添加的仓库</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo list</span><br>NAME    URL<br>stable  http://mirror.azure.cn/kubernetes/charts/<br></code></pre></td></tr></table></figure><h6 id="5-1-4-更新仓库"><a href="#5-1-4-更新仓库" class="headerlink" title="5.1.4 更新仓库"></a>5.1.4 更新仓库</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo update</span><br>Hang tight <span class="hljs-keyword">while</span> we grab the latest from your chart repositories...<br>...Successfully got an update from the <span class="hljs-string">&quot;stable&quot;</span> chart repository<br>Update Complete. ⎈Happy Helming!⎈<br></code></pre></td></tr></table></figure><h6 id="5-2-查看charts"><a href="#5-2-查看charts" class="headerlink" title="5.2 查看charts"></a>5.2 查看charts</h6><p>使用<code>helm search repo 关键字</code>可以查看相关charts</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm search repo stable</span><br>NAME                                    CHART VERSION   APP VERSION             DESCRIPTION<br>stable/acs<span class="hljs-literal">-engine-autoscaler</span>            <span class="hljs-number">2.2</span>.<span class="hljs-number">2</span>           <span class="hljs-number">2.1</span>.<span class="hljs-number">1</span>                   DEPRECATED Scales worker nodes within agent pools<br>stable/aerospike                        <span class="hljs-number">0.3</span>.<span class="hljs-number">5</span>           v4.<span class="hljs-number">5.0</span>.<span class="hljs-number">5</span>                DEPRECATED A Helm chart <span class="hljs-keyword">for</span> Aerospike <span class="hljs-keyword">in</span> Kubern...<br>stable/airflow                          <span class="hljs-number">7.13</span>.<span class="hljs-number">3</span>          <span class="hljs-number">1.10</span>.<span class="hljs-number">12</span>                 DEPRECATED - please use: https://github.com/air...<br>stable/ambassador                       <span class="hljs-number">5.3</span>.<span class="hljs-number">2</span>           <span class="hljs-number">0.86</span>.<span class="hljs-number">1</span>                  DEPRECATED A Helm chart <span class="hljs-keyword">for</span> Datawire Ambassador<br>stable/anchore<span class="hljs-literal">-engine</span>                   <span class="hljs-number">1.7</span>.<span class="hljs-number">0</span>           <span class="hljs-number">0.7</span>.<span class="hljs-number">3</span>                   Anchore container analysis and policy evaluatio...<br>stable/apm<span class="hljs-literal">-server</span>                       <span class="hljs-number">2.1</span>.<span class="hljs-number">7</span>           <span class="hljs-number">7.0</span>.<span class="hljs-number">0</span>                   DEPRECATED The server receives <span class="hljs-keyword">data</span> from the El...<br>stable/ark                              <span class="hljs-number">4.2</span>.<span class="hljs-number">2</span>           <span class="hljs-number">0.10</span>.<span class="hljs-number">2</span>                  DEPRECATED A Helm chart <span class="hljs-keyword">for</span> ark<br>stable/artifactory                      <span class="hljs-number">7.3</span>.<span class="hljs-number">2</span>           <span class="hljs-number">6.1</span>.<span class="hljs-number">0</span>                   DEPRECATED Universal Repository Manager support...<br>stable/artifactory<span class="hljs-literal">-ha</span>                   <span class="hljs-number">0.4</span>.<span class="hljs-number">2</span>           <span class="hljs-number">6.2</span>.<span class="hljs-number">0</span>                   DEPRECATED Universal Repository Manager support...<br>stable/atlantis                         <span class="hljs-number">3.12</span>.<span class="hljs-number">4</span>          v0.<span class="hljs-number">14.0</span>                 DEPRECATED A Helm chart <span class="hljs-keyword">for</span> Atlantis https://ww...<br>stable/auditbeat                        <span class="hljs-number">1.1</span>.<span class="hljs-number">2</span>           <span class="hljs-number">6.7</span>.<span class="hljs-number">0</span>                   DEPRECATED A lightweight shipper to audit the a...<br>stable/aws<span class="hljs-literal">-cluster-autoscaler</span>           <span class="hljs-number">0.3</span>.<span class="hljs-number">4</span>                                   DEPRECATED Scales worker nodes within autoscali...<br>stable/aws<span class="hljs-literal">-iam-authenticator</span>            <span class="hljs-number">0.1</span>.<span class="hljs-number">5</span>           <span class="hljs-number">1.0</span>                     DEPRECATED A Helm chart <span class="hljs-keyword">for</span> aws<span class="hljs-literal">-iam-authenticator</span><br>stable/bitcoind                         <span class="hljs-number">1.0</span>.<span class="hljs-number">2</span>           <span class="hljs-number">0.17</span>.<span class="hljs-number">1</span>                  DEPRECATED Bitcoin is an innovative payment net...<br>stable/bookstack                        <span class="hljs-number">1.2</span>.<span class="hljs-number">4</span>           <span class="hljs-number">0.27</span>.<span class="hljs-number">5</span>                  DEPRECATED BookStack is a simple, self<span class="hljs-literal">-hosted</span>, ...<br>......<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm search repo nginx</span><br>NAME                            CHART VERSION   APP VERSION     DESCRIPTION<br>stable/nginx<span class="hljs-literal">-ingress</span>            <span class="hljs-number">1.41</span>.<span class="hljs-number">3</span>          v0.<span class="hljs-number">34.1</span>         DEPRECATED! An nginx Ingress controller that us...<br>stable/nginx<span class="hljs-literal">-ldapauth-proxy</span>     <span class="hljs-number">0.1</span>.<span class="hljs-number">6</span>           <span class="hljs-number">1.13</span>.<span class="hljs-number">5</span>          DEPRECATED - nginx proxy with ldapauth<br>stable/nginx<span class="hljs-literal">-lego</span>               <span class="hljs-number">0.3</span>.<span class="hljs-number">1</span>                           Chart <span class="hljs-keyword">for</span> nginx<span class="hljs-literal">-ingress-controller</span> and kube<span class="hljs-literal">-lego</span><br>stable/gcloud<span class="hljs-literal">-endpoints</span>         <span class="hljs-number">0.1</span>.<span class="hljs-number">2</span>           <span class="hljs-number">1</span>               DEPRECATED Develop, deploy, protect and monitor...<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm search repo tomcat</span><br>NAME            CHART VERSION   APP VERSION     DESCRIPTION<br>stable/tomcat   <span class="hljs-number">0.4</span>.<span class="hljs-number">3</span>           <span class="hljs-number">7.0</span>             DEPRECATED - Deploy a basic tomcat application ...<br></code></pre></td></tr></table></figure><h6 id="5-3-部署应用-MySQL"><a href="#5-3-部署应用-MySQL" class="headerlink" title="5.3 部署应用 MySQL"></a>5.3 部署应用 MySQL</h6><blockquote><p>环境说明：k8s集群中存在storageclass:nfs-client</p></blockquote><p>我们现在安装一个 <code>mysql</code> 应用：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm search repo mysql</span><br>NAME                                    CHART VERSION   APP VERSION     DESCRIPTION<br>stable/mysql                            <span class="hljs-number">1.6</span>.<span class="hljs-number">9</span>           <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          DEPRECATED - Fast, reliable, scalable, and easy...<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># --generate-name 自动生成部署的release</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm install stable/mysql --generate-name  --set persistence.storageClass=nfs-client --set mysqlRootPassword=test123</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs powershell">部署过程输出的信息：<br>NAME: mysql<span class="hljs-literal">-1658996042</span><br>LAST DEPLOYED: Thu Jul <span class="hljs-number">28</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">03</span> <span class="hljs-number">2022</span><br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: <span class="hljs-number">1</span><br>NOTES:<br>MySQL can be accessed via port <span class="hljs-number">3306</span> on the following DNS name from within your cluster:<br>mysql<span class="hljs-literal">-1658996042</span>.default.svc.cluster.local<br><br>To get your root password run:<br><br>    MYSQL_ROOT_PASSWORD=<span class="hljs-variable">$</span>(kubectl get secret <span class="hljs-literal">--namespace</span> default mysql<span class="hljs-literal">-1658996042</span> <span class="hljs-literal">-o</span> jsonpath=<span class="hljs-string">&quot;&#123;.data.mysql-root-password&#125;&quot;</span> | base64 <span class="hljs-literal">--decode</span>; <span class="hljs-built_in">echo</span>)<br><br>To connect to your database:<br><br><span class="hljs-number">1</span>. Run an Ubuntu pod that you can use as a client:<br><br>    kubectl run <span class="hljs-literal">-i</span> <span class="hljs-literal">--tty</span> ubuntu <span class="hljs-literal">--image</span>=ubuntu:<span class="hljs-number">16.04</span> <span class="hljs-literal">--restart</span>=Never <span class="hljs-literal">--</span> bash <span class="hljs-literal">-il</span><br><br><span class="hljs-number">2</span>. Install the mysql client:<br><br>    <span class="hljs-variable">$</span> apt<span class="hljs-literal">-get</span> update &amp;&amp; apt<span class="hljs-literal">-get</span> install mysql<span class="hljs-literal">-client</span> <span class="hljs-literal">-y</span><br><br><span class="hljs-number">3</span>. Connect <span class="hljs-keyword">using</span> the mysql cli, then provide your password:<br>    <span class="hljs-variable">$</span> mysql <span class="hljs-literal">-h</span> mysql<span class="hljs-literal">-1658996042</span> <span class="hljs-literal">-p</span><br><br>To connect to your database directly from outside the K8s cluster:<br>    MYSQL_HOST=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>    MYSQL_PORT=<span class="hljs-number">3306</span><br><br>    <span class="hljs-comment"># Execute the following command to route the connection:</span><br>    kubectl port<span class="hljs-literal">-forward</span> svc/mysql<span class="hljs-literal">-1658996042</span> <span class="hljs-number">3306</span><br><br>    mysql <span class="hljs-literal">-h</span> <span class="hljs-variable">$</span>&#123;MYSQL_HOST&#125; <span class="hljs-literal">-P</span><span class="hljs-variable">$</span>&#123;MYSQL_PORT&#125; <span class="hljs-literal">-u</span> root <span class="hljs-literal">-p</span><span class="hljs-variable">$</span>&#123;MYSQL_ROOT_PASSWORD&#125;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看helm已经安装的release（这个release是部署时候的应用名称）</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm list</span><br>NAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION<br><br>mysql<span class="hljs-literal">-1658996042</span>        default         <span class="hljs-number">1</span>               <span class="hljs-number">2022</span><span class="hljs-literal">-07-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">03.530489788</span> +<span class="hljs-number">0800</span> CST deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods</span><br>NAME                                     READY   STATUS    RESTARTS   AGE<br>mysql<span class="hljs-literal">-1658996042-755f5f64f6-j5s67</span>        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">82</span>s<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pvc</span><br>NAME               STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>mysql<span class="hljs-literal">-1658996042</span>   Bound    pvc<span class="hljs-literal">-7fcb894e-5b8c-4f3e-945d-21b60b9309e5</span>   <span class="hljs-number">8</span><span class="hljs-built_in">Gi</span>        RWO            nfs<span class="hljs-literal">-client</span>     <span class="hljs-number">93</span>s<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pv</span><br>NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                      STORAGECLASS   REASON   AGE<br>pvc<span class="hljs-literal">-7fcb894e-5b8c-4f3e-945d-21b60b9309e5</span>   <span class="hljs-number">8</span><span class="hljs-built_in">Gi</span>        RWO            Delete           Bound    default/mysql<span class="hljs-literal">-1658996042</span>   nfs<span class="hljs-literal">-client</span>              <span class="hljs-number">97</span>s<br></code></pre></td></tr></table></figure><p><strong>一个 chart 包是可以多次安装到同一个集群中的，每次安装都会产生一个release, 每个release都可以独立管理和升级。</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm install stable/mysql --generate-name  --set persistence.storageClass=nfs-client --set mysqlRootPassword=root</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm ls</span><br>NAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION<br>mysql<span class="hljs-literal">-1658996042</span>        default         <span class="hljs-number">1</span>               <span class="hljs-number">2022</span><span class="hljs-literal">-07-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">03.530489788</span> +<span class="hljs-number">0800</span> CST deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>mysql<span class="hljs-literal">-1658996297</span>        default         <span class="hljs-number">1</span>               <span class="hljs-number">2022</span><span class="hljs-literal">-07-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">18</span>:<span class="hljs-number">19.282074215</span> +<span class="hljs-number">0800</span> CST deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods</span><br>NAME                                     READY   STATUS    RESTARTS   AGE<br>mysql<span class="hljs-literal">-1658996042-755f5f64f6-j5s67</span>        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">45</span>m<br>mysql<span class="hljs-literal">-1658996297-75f6f86d84-5qd8r</span>        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m<br>nfs<span class="hljs-literal">-client-provisioner-9d46587b5-7n2vf</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">123</span>m<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl exec -it mysql-1658996042-755f5f64f6-j5s67 -- bash</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs powershell">root@mysql<span class="hljs-literal">-1658996042-755f5f64f6-j5s67</span>:/<span class="hljs-comment"># mysql -uroot -ptest123</span><br>mysql: [<span class="hljs-type">Warning</span>] <span class="hljs-keyword">Using</span> a password on the <span class="hljs-keyword">command</span> line interface can be insecure.<br>Welcome to the MySQL monitor.  Commands <span class="hljs-keyword">end</span> with ; or \g.<br>Your MySQL connection id is <span class="hljs-number">547</span><br>Server version: <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span> MySQL Community Server (GPL)<br><br>Copyright (c) <span class="hljs-number">2000</span>, <span class="hljs-number">2020</span>, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br><span class="hljs-built_in">Type</span> <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> help. <span class="hljs-built_in">Type</span> <span class="hljs-string">&#x27;\c&#x27;</span> to <span class="hljs-built_in">clear</span> the current input statement.<br><br>mysql&gt; show databases;<br>+<span class="hljs-literal">--------------------</span>+<br>| Database           |<br>+<span class="hljs-literal">--------------------</span>+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+<span class="hljs-literal">--------------------</span>+<br><span class="hljs-number">4</span> rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h6 id="5-4-查看chart资源"><a href="#5-4-查看chart资源" class="headerlink" title="5.4 查看chart资源"></a>5.4 查看chart资源</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get all -l release=mysql-1658996042</span><br>NAME                                    READY   STATUS    RESTARTS   AGE<br>pod/mysql<span class="hljs-literal">-1658996042-755f5f64f6-j5s67</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>m<br><br>NAME                       <span class="hljs-built_in">TYPE</span>        CLUSTER<span class="hljs-literal">-IP</span>    EXTERNAL<span class="hljs-literal">-IP</span>   PORT(S)    AGE<br>service/mysql<span class="hljs-literal">-1658996042</span>   ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">2.136</span>   &lt;none&gt;        <span class="hljs-number">3306</span>/TCP   <span class="hljs-number">72</span>m<br><br>NAME                               READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE<br>deployment.apps/mysql<span class="hljs-literal">-1658996042</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">72</span>m<br><br>NAME                                          DESIRED   CURRENT   READY   AGE<br>replicaset.apps/mysql<span class="hljs-literal">-1658996042-755f5f64f6</span>   <span class="hljs-number">1</span>         <span class="hljs-number">1</span>         <span class="hljs-number">1</span>       <span class="hljs-number">72</span>m<br></code></pre></td></tr></table></figure><p>我们也可以 <code>helm show chart</code> 命令来了解 MySQL 这个 chart 包的一些特性：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm show chart stable/mysql</span><br>apiVersion: v1<br>appVersion: <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>deprecated: true<br>description: DEPRECATED - Fast, reliable, scalable, and easy to use <span class="hljs-built_in">open-source</span> relational<br>  database system.<br>home: https://www.mysql.com/<br>icon: https://www.mysql.com/common/logos/logo<span class="hljs-literal">-mysql-170x115</span>.png<br>keywords:<br>- mysql<br>- database<br>- sql<br>name: mysql<br>sources:<br>- https://github.com/kubernetes/charts<br>- https://github.com/docker<span class="hljs-literal">-library</span>/mysql<br>version: <span class="hljs-number">1.6</span>.<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>如果想要了解更多信息，可以用 <code>helm show all</code> 命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm show all stable/mysql</span><br>......<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm show chart 是 Helm 命令行工具中的一个命令，用于展示 Chart 的详细信息。Chart 是 Helm 用来打包 Kubernetes 资源的一个概念，它包含了部署一个应用到 Kubernetes 集群所需的所有必要配置文件和依赖。当你运行 helm show chart [chart-name] 命令时，Helm 会输出指定 Chart 包含的元数据和结构信息，这对于理解和验证 Chart 的内容以及其设计方式非常有帮助。下面是该命令显示内容的一些关键部分解析：<br><br>Chart.yaml: 这是 Chart 的主要元数据文件，helm show chart 会显示这个文件的内容。它包括但不限于以下信息：<br><br>name: Chart 的名称。<br>version: Chart 的版本。<br>description: Chart 的简短描述。<br>keywords: 与 Chart 相关的关键词列表。<br>home: Chart 的项目主页 URL。<br>sources: Chart 源代码的 URL 列表。<br>maintainers: 维护者的信息列表，包括名字、电子邮件和角色。<br>dependencies: 本 Chart 依赖的其他 Chart 列表。<br>values.yaml（部分显示或引用）: 这个文件定义了 Chart 的默认配置值。虽然 helm show chart 不会直接完整显示这个文件的内容，但它可能会提到或引用某些默认值，特别是在描述如何使用或自定义 Chart 时。values.yaml 包含了所有可配置项及其默认值，用户可以通过 Helm 的值覆盖功能来修改这些值。<br><br>Templates: 虽然 helm show chart 不会直接展示模板文件的全部内容，它通常会概述模板目录的存在及其重要性。模板目录包含了一系列的 YAML 文件，这些文件使用 Go 模板语言编写，用于生成最终部署到 Kubernetes 的资源配置文件。每个模板文件对应 Kubernetes 中的一种资源类型，如 Deployment、Service、ConfigMap 等，并可以根据 values.yaml 中的值动态生成。<br><br>Chart 的目录结构: 输出可能还会简要介绍 Chart 目录的基本结构，包括但不限于 templates、charts（存放依赖 Chart 的目录）、files（用于存放静态文件）等。<br><br>说明和提示: 在某些情况下，如果 Chart 开发者在 Chart.yaml 或 README 文件中包含了额外的说明或安装提示，helm show chart 输出也可能包含这些信息，帮助用户更好地理解如何使用或配置该 Chart。<br></code></pre></td></tr></table></figure><h6 id="5-5-删除Release"><a href="#5-5-删除Release" class="headerlink" title="5.5 删除Release"></a>5.5 删除Release</h6><p>如果需要删除这个 release，也很简单，只需要使用 <code>helm uninstall</code>或<code>helm delete</code> 命令即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm uninstall mysql-1605195227</span><br>release <span class="hljs-string">&quot;mysql-1605195227&quot;</span> uninstalled<br></code></pre></td></tr></table></figure><p><code>uninstall</code> 命令会从 Kubernetes 中删除 release，也会删除与 release 相关的所有 Kubernetes 资源以及 release 历史记录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm ls</span><br>NAME              NAMESPACE     REVISION     UPDATED    STATUS        CHART           APP VERSION<br>mysql<span class="hljs-literal">-1605192239</span>     default     <span class="hljs-number">1</span>        .........     deployed      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>       <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>在删除的时候使用 <code>--keep-history</code> 参数，则会保留 release 的历史记录，该 release 的状态就是 <code>UNINSTALLED</code>，</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm uninstall mysql-1605192239 --keep-history</span><br>release <span class="hljs-string">&quot;mysql-1605192239&quot;</span> uninstalled<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm ls -a</span><br>NAME                    NAMESPACE       REVISION        UPDATED     STATUS        CHART     APP VERSION<br>mysql<span class="hljs-literal">-1605192239</span>        default         <span class="hljs-number">1</span>              ........    uninstalled     mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>状态为uninstalled<br></code></pre></td></tr></table></figure><p>审查历史时甚至可以取消删除<code>release</code>。</p><p><code>Usage:  helm rollback &lt;RELEASE&gt; [REVISION] [flags]</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm rollback mysql-1605192239 1</span><br>Rollback was a success! Happy Helming!<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm ls</span><br>NAME              NAMESPACE     REVISION     UPDATED    STATUS        CHART           APP VERSION<br>mysql<span class="hljs-literal">-1605192239</span>     default     <span class="hljs-number">2</span>        .........     deployed      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>       <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>rollback后，又回到deployed状态<br></code></pre></td></tr></table></figure><h6 id="5-6-定制参数部署应用"><a href="#5-6-定制参数部署应用" class="headerlink" title="5.6 定制参数部署应用"></a>5.6 定制参数部署应用</h6><p>上面我们都是直接使用的 <code>helm install</code> 命令安装的 chart 包，这种情况下只会使用 chart 的默认配置选项，但是更多的时候，是各种各样的需求，所以我们希望根据自己的需求来定制 chart 包的配置参数。</p><p>我们可以使用 <code>helm show values</code> 命令来查看一个 chart 包的所有可配置的参数选项：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm show values stable/mysql</span><br>......<br>......<br></code></pre></td></tr></table></figure><p>上面我们看到的所有参数都是可以用自己的数据来覆盖的，可以在安装的时候通过 YAML 格式的文件来传递这些参数</p><p>1，准备参数文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># vim mysql-config.yml</span><br>mysqlDatabase: helm<br>persistence:<br>  enabled: true  <span class="hljs-comment"># 没有存储卷情况下，改为false</span><br>  storageClass: nfs<span class="hljs-literal">-client</span><br></code></pre></td></tr></table></figure><p>2, 使用<code>-f mysql-config.yml</code>安装应用并覆盖参数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm install mysql -f mysql-config.yml stable/mysql</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs powershell">输出内容：<br><br>NAME: mysql<br>LAST DEPLOYED: Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">07</span>:<span class="hljs-number">17</span> <span class="hljs-number">2022</span><br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: <span class="hljs-number">1</span><br>NOTES:<br>MySQL can be accessed via port <span class="hljs-number">3306</span> on the following DNS name from within your cluster:<br>mysql.default.svc.cluster.local<br><br>To get your root password run:<br><br>    MYSQL_ROOT_PASSWORD=<span class="hljs-variable">$</span>(kubectl get secret <span class="hljs-literal">--namespace</span> default mysql <span class="hljs-literal">-o</span> jsonpath=<span class="hljs-string">&quot;&#123;.data.mysql-root-password&#125;&quot;</span> | base64 <span class="hljs-literal">--decode</span>; <span class="hljs-built_in">echo</span>)<br><br>To connect to your database:<br><br><span class="hljs-number">1</span>. Run an Ubuntu pod that you can use as a client:<br><br>    kubectl run <span class="hljs-literal">-i</span> <span class="hljs-literal">--tty</span> ubuntu <span class="hljs-literal">--image</span>=ubuntu:<span class="hljs-number">16.04</span> <span class="hljs-literal">--restart</span>=Never <span class="hljs-literal">--</span> bash <span class="hljs-literal">-il</span><br><br><span class="hljs-number">2</span>. Install the mysql client:<br><br>    <span class="hljs-variable">$</span> apt<span class="hljs-literal">-get</span> update &amp;&amp; apt<span class="hljs-literal">-get</span> install mysql<span class="hljs-literal">-client</span> <span class="hljs-literal">-y</span><br><br><span class="hljs-number">3</span>. Connect <span class="hljs-keyword">using</span> the mysql cli, then provide your password:<br>    <span class="hljs-variable">$</span> mysql <span class="hljs-literal">-h</span> mysql <span class="hljs-literal">-p</span><br><br>To connect to your database directly from outside the K8s cluster:<br>    MYSQL_HOST=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>    MYSQL_PORT=<span class="hljs-number">3306</span><br><br>    <span class="hljs-comment"># Execute the following command to route the connection:</span><br>    kubectl port<span class="hljs-literal">-forward</span> svc/mysql <span class="hljs-number">3306</span><br><br>    mysql <span class="hljs-literal">-h</span> <span class="hljs-variable">$</span>&#123;MYSQL_HOST&#125; <span class="hljs-literal">-P</span><span class="hljs-variable">$</span>&#123;MYSQL_PORT&#125; <span class="hljs-literal">-u</span> root <span class="hljs-literal">-p</span><span class="hljs-variable">$</span>&#123;MYSQL_ROOT_PASSWORD&#125;<br></code></pre></td></tr></table></figure><p>3, 查看覆盖的参数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 这是查看除了默认的配置之外自己配置的，但是部署mysql的时候是--set指定的，如果是直接部署，没有任何的指定，获取values的值为空</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">master</span> ~]<span class="hljs-comment"># helm get values mysql</span><br>USER<span class="hljs-literal">-SUPPLIED</span> VALUES:<br>mysqlDatabase: helm<br>persistence:<br>  enabled: true<br>  storageClass: nfs<span class="hljs-literal">-client</span><br></code></pre></td></tr></table></figure><p>4, 查看部署的相关资源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get all -l release=mysql</span><br>NAME                         READY   STATUS    RESTARTS   AGE<br>pod/mysql<span class="hljs-literal">-855976764d-npvgm</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">40</span>m<br><br>NAME            <span class="hljs-built_in">TYPE</span>        CLUSTER<span class="hljs-literal">-IP</span>   EXTERNAL<span class="hljs-literal">-IP</span>   PORT(S)    AGE<br>service/mysql   ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">0.84</span>   &lt;none&gt;        <span class="hljs-number">3306</span>/TCP   <span class="hljs-number">40</span>m<br><br>NAME                    READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE<br>deployment.apps/mysql   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">40</span>m<br><br>NAME                               DESIRED   CURRENT   READY   AGE<br>replicaset.apps/mysql<span class="hljs-literal">-855976764d</span>   <span class="hljs-number">1</span>         <span class="hljs-number">1</span>         <span class="hljs-number">1</span>       <span class="hljs-number">40</span>m<br></code></pre></td></tr></table></figure><p>5, 查看pod的IP</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get pods -o wide -l release=mysql</span><br>NAME                     READY   STATUS    RESTARTS   AGE   IP              NODE           NOMINATED NODE   READINESS GATES<br>mysql<span class="hljs-literal">-855976764d-npvgm</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m   <span class="hljs-number">100.119</span>.<span class="hljs-number">84.71</span>   k8s<span class="hljs-literal">-worker01</span>   &lt;none&gt;           &lt;none&gt;<br><br>得到pod的IP为<span class="hljs-number">100.119</span>.<span class="hljs-number">84.71</span><br></code></pre></td></tr></table></figure><p>6, 安装mysql客户端并连接测试</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># yum install mariadb -y</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 获取helm部署的mysql的root密码</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get secret --namespace default mysql -o jsonpath=&quot;&#123;.data.mysql-root-password&#125;&quot; | base64 --decode; echo</span><br>wL2SD0RCsT<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get svc</span><br>NAME         <span class="hljs-built_in">TYPE</span>        CLUSTER<span class="hljs-literal">-IP</span>   EXTERNAL<span class="hljs-literal">-IP</span>   PORT(S)    AGE<br>kubernetes   ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">0.1</span>    &lt;none&gt;        <span class="hljs-number">443</span>/TCP    <span class="hljs-number">27</span><span class="hljs-built_in">h</span><br>mysql        ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">0.84</span>   &lt;none&gt;        <span class="hljs-number">3306</span>/TCP   <span class="hljs-number">5</span>m21s<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># mysql -h 10.96.0.84 -uroot -pwL2SD0RCsT -e &quot;show databases;&quot;</span><br>+<span class="hljs-literal">--------------------</span>+<br>| Database           |<br>+<span class="hljs-literal">--------------------</span>+<br>| information_schema |<br>| helm               |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+<span class="hljs-literal">--------------------</span>+<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods -o wide -l release=mysql</span><br>NAME                     READY   STATUS    RESTARTS   AGE   IP              NODE           NOMINATED NODE   READINESS GATES<br>mysql<span class="hljs-literal">-855976764d-npvgm</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m   <span class="hljs-number">100.119</span>.<span class="hljs-number">84.71</span>   k8s<span class="hljs-literal">-worker01</span>   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># mysql -h 100.119.84.71 -uroot -pwL2SD0RCsT -e &quot;show databases;&quot;</span><br>+<span class="hljs-literal">--------------------</span>+<br>| Database           |<br>+<span class="hljs-literal">--------------------</span>+<br>| information_schema |<br>| helm               |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+<span class="hljs-literal">--------------------</span>+<br></code></pre></td></tr></table></figure><h6 id="5-7-升级和回滚"><a href="#5-7-升级和回滚" class="headerlink" title="5.7 升级和回滚"></a>5.7 升级和回滚</h6><p>当新版本的 chart 包发布的时候，或者当你要更改 release 的配置的时候，你可以使用 <code>helm upgrade</code> 命令来操作。升级需要一个现有的 release，并根据提供的信息对其进行升级。因为 Kubernetes charts 可能很大而且很复杂，Helm 会尝试以最小的侵入性进行升级，它只会更新自上一版本以来发生的变化：</p><p>1, 升级前查看版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># mysql -h 10.96.0.84 -uroot -pwL2SD0RCsT -e &quot;select version()&quot;</span><br>+<span class="hljs-literal">-----------</span>+<br>| version() |<br>+<span class="hljs-literal">-----------</span>+<br>| <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>    |     版本为<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>+<span class="hljs-literal">-----------</span>+<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment">#  kubectl get deployment mysql -o wide</span><br>NAME    READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR<br>mysql   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">54</span>m   mysql        mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>   app=mysql,release=mysql<br>images版本为<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>2，修改配置并升级</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># vim mysql-config.yml</span><br>mysqlDatabase: kubemsb<br>persistence:<br>  enabled: true<br>  storageClass: nfs<span class="hljs-literal">-client</span><br></code></pre></td></tr></table></figure><p>升级并且加一个<code>--set imageTag=5.7.31</code>参数设置为5.7.31版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm upgrade mysql -f mysql-config.yml --set imageTag=5.7.31 stable/mysql</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs powershell">升级过程中的输出：<br><br>WARNING: This chart is deprecated<br>Release <span class="hljs-string">&quot;mysql&quot;</span> has been upgraded. Happy Helming!<br>NAME: mysql<br>LAST DEPLOYED: Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">04</span>:<span class="hljs-number">20</span> <span class="hljs-number">2022</span><br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: <span class="hljs-number">2</span><br>NOTES:<br>MySQL can be accessed via port <span class="hljs-number">3306</span> on the following DNS name from within your cluster:<br>mysql.default.svc.cluster.local<br><br>To get your root password run:<br><br>    MYSQL_ROOT_PASSWORD=<span class="hljs-variable">$</span>(kubectl get secret <span class="hljs-literal">--namespace</span> default mysql <span class="hljs-literal">-o</span> jsonpath=<span class="hljs-string">&quot;&#123;.data.mysql-root-password&#125;&quot;</span> | base64 <span class="hljs-literal">--decode</span>; <span class="hljs-built_in">echo</span>)<br><br>To connect to your database:<br><br><span class="hljs-number">1</span>. Run an Ubuntu pod that you can use as a client:<br><br>    kubectl run <span class="hljs-literal">-i</span> <span class="hljs-literal">--tty</span> ubuntu <span class="hljs-literal">--image</span>=ubuntu:<span class="hljs-number">16.04</span> <span class="hljs-literal">--restart</span>=Never <span class="hljs-literal">--</span> bash <span class="hljs-literal">-il</span><br><br><span class="hljs-number">2</span>. Install the mysql client:<br><br>    <span class="hljs-variable">$</span> apt<span class="hljs-literal">-get</span> update &amp;&amp; apt<span class="hljs-literal">-get</span> install mysql<span class="hljs-literal">-client</span> <span class="hljs-literal">-y</span><br><br><span class="hljs-number">3</span>. Connect <span class="hljs-keyword">using</span> the mysql cli, then provide your password:<br>    <span class="hljs-variable">$</span> mysql <span class="hljs-literal">-h</span> mysql <span class="hljs-literal">-p</span><br><br>To connect to your database directly from outside the K8s cluster:<br>    MYSQL_HOST=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>    MYSQL_PORT=<span class="hljs-number">3306</span><br><br>    <span class="hljs-comment"># Execute the following command to route the connection:</span><br>    kubectl port<span class="hljs-literal">-forward</span> svc/mysql <span class="hljs-number">3306</span><br><br>    mysql <span class="hljs-literal">-h</span> <span class="hljs-variable">$</span>&#123;MYSQL_HOST&#125; <span class="hljs-literal">-P</span><span class="hljs-variable">$</span>&#123;MYSQL_PORT&#125; <span class="hljs-literal">-u</span> root <span class="hljs-literal">-p</span><span class="hljs-variable">$</span>&#123;MYSQL_ROOT_PASSWORD&#125;<br>    <br> 注意：更新过程中，密码会被更新，但是实际使用中，密码并未更新。<br></code></pre></td></tr></table></figure><p>3, 升级后确认版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get deployment mysql -o wide</span><br>NAME    READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR<br>mysql   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">58</span>m   mysql        mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">31</span>   app=mysql,release=mysql<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get pods -o wide</span><br>NAME                                     READY   STATUS    RESTARTS       AGE     IP              NODE           NOMINATED NODE   READINESS GATES<br>mysql<span class="hljs-literal">-6f57f64c9d-sc72v</span>                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>              <span class="hljs-number">2</span>m20s   <span class="hljs-number">100.119</span>.<span class="hljs-number">84.72</span>   k8s<span class="hljs-literal">-worker01</span>   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># mysql -h 100.119.84.72 -uroot -pwL2SD0RCsT -e &quot;select version()&quot;</span><br>+<span class="hljs-literal">-----------</span>+<br>| version() |<br>+<span class="hljs-literal">-----------</span>+<br>| <span class="hljs-number">5.7</span>.<span class="hljs-number">31</span>    |   版本升级为<span class="hljs-number">5.7</span>.<span class="hljs-number">31</span><br>+<span class="hljs-literal">-----------</span>+<br></code></pre></td></tr></table></figure><p>4, 回滚</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm history mysql</span><br>REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION<br><span class="hljs-number">1</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">07</span>:<span class="hljs-number">17</span> <span class="hljs-number">2022</span>        superseded      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Install complete<br><span class="hljs-number">2</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">04</span>:<span class="hljs-number">20</span> <span class="hljs-number">2022</span>        deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Upgrade complete<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm rollback mysql 1</span><br>Rollback was a success! Happy Helming!<br></code></pre></td></tr></table></figure><p>5, 验证</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get deployment mysql -o wide</span><br>NAME    READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR<br>mysql   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">65</span>m   mysql        mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>   app=mysql,release=mysql<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm history mysql</span><br>REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION<br><span class="hljs-number">1</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">07</span>:<span class="hljs-number">17</span> <span class="hljs-number">2022</span>        superseded      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Install complete<br><span class="hljs-number">2</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">04</span>:<span class="hljs-number">20</span> <span class="hljs-number">2022</span>        superseded      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Upgrade complete<br><span class="hljs-number">3</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">12</span>:<span class="hljs-number">24</span> <span class="hljs-number">2022</span>        deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Rollback to <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h6 id="5-8-更多安装方式"><a href="#5-8-更多安装方式" class="headerlink" title="5.8 更多安装方式"></a>5.8 更多安装方式</h6><p>和yum命令类似</p><ul><li>chart 仓库</li><li>本地 chart 压缩包</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">persistence.storageClass<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm pull stable/mysql</span><br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># ls mysql-1.6.9.tgz</span><br>mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>.tgz<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm install mysql2 mysql-1.6.9.tgz</span><br></code></pre></td></tr></table></figure><ul><li>在线的 URL（helm install fool <a href="https://example.com/charts/foo-1.2.3.tgz%EF%BC%89">https://example.com/charts/foo-1.2.3.tgz）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes-helm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>containerd配置文件备份</title>
    <link href="/2025/03/19/containerd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/"/>
    <url>/2025/03/19/containerd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim /etc/containerd/config.toml</span><br><br><span class="hljs-comment"># cat /etc/containerd/config.toml</span><br>root = <span class="hljs-string">&quot;/var/lib/containerd&quot;</span><br>state = <span class="hljs-string">&quot;/run/containerd&quot;</span><br>oom_score = <span class="hljs-literal">-999</span><br><br>[<span class="hljs-type">grpc</span>]<br>  address = <span class="hljs-string">&quot;/run/containerd/containerd.sock&quot;</span><br>  uid = <span class="hljs-number">0</span><br>  gid = <span class="hljs-number">0</span><br>  max_recv_message_size = <span class="hljs-number">16777216</span><br>  max_send_message_size = <span class="hljs-number">16777216</span><br><br>[<span class="hljs-type">debug</span>]<br>  address = <span class="hljs-string">&quot;&quot;</span><br>  uid = <span class="hljs-number">0</span><br>  gid = <span class="hljs-number">0</span><br>  level = <span class="hljs-string">&quot;&quot;</span><br><br>[<span class="hljs-type">metrics</span>]<br>  address = <span class="hljs-string">&quot;&quot;</span><br>  grpc_histogram = false<br><br>[<span class="hljs-type">cgroup</span>]<br>  path = <span class="hljs-string">&quot;&quot;</span><br><br>[<span class="hljs-type">plugins</span>]<br>  [<span class="hljs-type">plugins.cgroups</span>]<br>    no_prometheus = false<br>  [<span class="hljs-type">plugins.cri</span>]<br>    stream_server_address = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>    stream_server_port = <span class="hljs-string">&quot;0&quot;</span><br>    enable_selinux = false<br>    <span class="hljs-comment"># sandbox_image = &quot;easzlab/pause-amd64:3.2&quot;</span><br>    sandbox_image = <span class="hljs-string">&quot;registry.aliyuncs.com/google_containers/pause:3.6&quot;</span><br>    stats_collect_period = <span class="hljs-number">10</span><br>    systemd_cgroup = true<br>    enable_tls_streaming = false<br>    max_container_log_line_size = <span class="hljs-number">16384</span><br>    [<span class="hljs-type">plugins.cri.containerd</span>]<br>      snapshotter = <span class="hljs-string">&quot;overlayfs&quot;</span><br>      no_pivot = false<br>      [<span class="hljs-type">plugins.cri.containerd.default_runtime</span>]<br>        runtime_type = <span class="hljs-string">&quot;io.containerd.runtime.v1.linux&quot;</span><br>        runtime_engine = <span class="hljs-string">&quot;&quot;</span><br>        runtime_root = <span class="hljs-string">&quot;&quot;</span><br>      [<span class="hljs-type">plugins.cri.containerd.untrusted_workload_runtime</span>]<br>        runtime_type = <span class="hljs-string">&quot;&quot;</span><br>        runtime_engine = <span class="hljs-string">&quot;&quot;</span><br>        runtime_root = <span class="hljs-string">&quot;&quot;</span><br>    [<span class="hljs-type">plugins.cri.cni</span>]<br>      bin_dir = <span class="hljs-string">&quot;/opt/kube/bin&quot;</span><br>      conf_dir = <span class="hljs-string">&quot;/etc/cni/net.d&quot;</span><br>      conf_template = <span class="hljs-string">&quot;/etc/cni/net.d/10-default.conf&quot;</span><br>    [<span class="hljs-type">plugins.cri.registry</span>]<br>      [<span class="hljs-type">plugins.cri.registry.mirrors</span>]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;docker.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>            <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;gcr.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://gcr.mirrors.ustc.edu.cn&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;k8s.gcr.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://gcr.mirrors.ustc.edu.cn/google-containers/&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;quay.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://quay.mirrors.ustc.edu.cn&quot;</span><br>          ]<br><span class="hljs-comment"># Harbor做为本地容器镜像仓库。</span><br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;harbor.localcluster.com&quot;</span>] <br>          endpoint = [<br>            <span class="hljs-string">&quot;http://harbor.localcluster.com&quot;</span><br>          ]<br>    [<span class="hljs-type">plugins.cri.x509_key_pair_streaming</span>]<br>      tls_cert_file = <span class="hljs-string">&quot;&quot;</span><br>      tls_key_file = <span class="hljs-string">&quot;&quot;</span><br>  [<span class="hljs-type">plugins.diff</span>-<span class="hljs-type">service</span>]<br>    default = [<span class="hljs-string">&quot;walking&quot;</span>]<br>  [<span class="hljs-type">plugins.linux</span>]<br>    shim = <span class="hljs-string">&quot;containerd-shim&quot;</span><br>    runtime = <span class="hljs-string">&quot;runc&quot;</span><br>    runtime_root = <span class="hljs-string">&quot;&quot;</span><br>    no_shim = false<br>    shim_debug = false<br>  [<span class="hljs-type">plugins.opt</span>]<br>    path = <span class="hljs-string">&quot;/opt/containerd&quot;</span><br>  [<span class="hljs-type">plugins.restart</span>]<br>    interval = <span class="hljs-string">&quot;10s&quot;</span><br>  [<span class="hljs-type">plugins.scheduler</span>]<br>    pause_threshold = <span class="hljs-number">0.02</span><br>    deletion_threshold = <span class="hljs-number">0</span><br>    mutation_threshold = <span class="hljs-number">100</span><br>    schedule_delay = <span class="hljs-string">&quot;0s&quot;</span><br>    startup_delay = <span class="hljs-string">&quot;100ms&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>containerd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Etcd概念及安装</title>
    <link href="/2025/03/19/Etcd%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <url>/2025/03/19/Etcd%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1-etcd概念"><a href="#1-etcd概念" class="headerlink" title="1. etcd概念"></a>1. etcd概念</h1><h2 id="1-1-etcd介绍"><a href="#1-1-etcd介绍" class="headerlink" title="1.1. etcd介绍"></a>1.1. etcd介绍</h2><p>etcd的名字来源于<code>/etc</code>和<code>distibuted</code>，即Unix下配置文件目录和分布式两个关键词。Etcd是一个分布式、可靠的k-v分布式数据库，同时还能提供配置共享、服务发现等功能，常常用在go语言的项目中。etcd主要有以下几个方面的特点：</p><ul><li>部署简单：只有一个二进制文件，可以开箱即用</li><li>使用简单：etcd有着丰富的client SDK</li><li>安全性高：支持SSL证书认证，数据加密，节点之间相互验证身份</li><li>强一致性：通过raft算法实现数据的强一致性，少于二分之一节点宕机仍然能提供服务，通常部署3个或者5个节点</li><li>数据落地：etcd的数据会通过wal格式的数据持久化到磁盘，并且支持snapshot快照</li></ul><p>etcd的架构主要由以下四个部分：</p><ul><li>HTTP Server：请求的入口，用来处理各种API请求</li><li>Store：用于处理etcd支持的各类功能的事务，包括数据索引、节点状态变更、监控与反馈、事件处理与执行等等，是etcd对用户提供的大多数API功能的具体实现</li><li>Raft状态机：实现多节点的etcd集群中数据一致性和节点选主</li><li>WAL：Write Ahead Log（预写式日志），是etcd的数据存储方式。除了在内存中存有所有数据的状态以及节点的索引以外，etcd就通过WAL进行持久化存储。WAL中，所有的数据提交前都会事先记录日志。Snapshot是为了防止数据过多而进行的状态快照；Entry表示存储的具体日志内容。</li></ul><h2 id="1-2-Raft"><a href="#1-2-Raft" class="headerlink" title="1.2. Raft"></a>1.2. Raft</h2><p>Raft 是etcd保障分布式节点中数据一致性的关键，该算法本身有一定的复杂度。网上有很多etcd的raft算法的博客，详细介绍了节点直接如何选主、如何同步数据、如何补偿数据的。</p><ul><li><a href="https://www.jianshu.com/p/5aed73b288f7">ETCD背后的Raft一致性算法原理</a></li><li>[分布式一致性算法 Raft 和 Etcd 原理解析](<a href="http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF%EF%BC%88%E5%AE%8C%EF%BC%89/09">http://learn.lianglianglee.com/专栏/分布式中间件实践之路（完）/09</a> 分布式一致性算法 Raft 和 Etcd 原理解析.md)</li><li><a href="https://www.cnblogs.com/xybaby/p/10124083.html">一文搞懂Raft算法</a></li></ul><hr><h1 id="2-etcd部署"><a href="#2-etcd部署" class="headerlink" title="2. etcd部署"></a>2. etcd部署</h1><h2 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1. 准备工作"></a>2.1. 准备工作</h2><h3 id="2-1-1-硬件需求"><a href="#2-1-1-硬件需求" class="headerlink" title="2.1.1. 硬件需求"></a>2.1.1. 硬件需求</h3><p>这里简单介绍下ectd对硬件的要求，详情需要参考<a href="https://etcd.io/docs/v3.5/op-guide/hardware/">官方文档</a>。</p><ol><li>CPU</li></ol><p>etcd对CPU的消耗不是很大，通常需要2-4个核心即可。在高负载集群下，如同时给上千个客户端提供服务，或者每秒有上万个请求的场景，需要8-16核心。一般规模，可以先使用2-4核心的CPU，后续如果CPU使用率较高，可以逐个节点升级配置。</p><ol><li>Memory</li></ol><p>etcd对内存的需求不是很大，但是也会积极的缓存k-v数据到内存，并用剩余的内存跟踪watcher。一般而言，8G内存也足够了。</p><ol><li>Disk</li></ol><p>磁盘的写入速度是影响etcd性能的关键，etcd的raft共识协议依赖于将元数据写入到日志中，每个etcd节点都要将每个请求写入磁盘。并且，etcd还需要将增量的checkpoint写入磁盘，用来截断日志。如果写入时间过长，可能因为超过心跳时间造成集群重新选举，从而破坏集群的稳定性。在检查磁盘性能的时候，可以使用 fio 进行测试，具体可以参考<a href="https://www.ibm.com/cloud/blog/using-fio-to-tell-whether-your-storage-is-fast-enough-for-etcd">IBM的这篇文章</a>。</p><p>磁盘的性能要从两个方面去评估，第一个是IOPS能力：一般而言，需要50顺序IOPS的速度(比如7200RPM的机械盘)，高负载集群需要500顺序IOPS速度(通常是固态)。第二个是磁盘带宽，这个决定了新节点或者失败节点同步数据的时间，典型的10MB&#x2F;s的磁盘通常在15秒内能恢复100MB数据，100MB&#x2F;s可以在15秒内恢复1GB的数据。</p><p>etcd的数据会相互同步，不要担心节点坏盘问题，因此没必要做RAID5这种RAID10，如果需要做RAID提升磁盘性能，请考虑使用RAID0。</p><ol><li>Network</li></ol><p>etcd集群需要快速网络，并且保障网络的稳定性，通常1GbE的内部网络可以满足大部分场景的需求，通常建议将etcd节点部署到一个网络域内，减少跨网络的延迟。</p><p>etcd官方文档还提供了，不同规模下的kubernetes的对etcd集群配置的要求，需要注意的是，这些集群中etcd是单独部署的，并不是和master节点共用。</p><ol><li>小集群</li></ol><p>请求客户端少于100个，每秒请求少于200个，并且存储数据少于100MB。如50个node的kuberentes集群：</p><table><thead><tr><th>Provider</th><th>Type</th><th>vCPUs</th><th>Memory (GB)</th><th>Max concurrent IOPS</th><th>Disk bandwidth (MB&#x2F;s)</th></tr></thead><tbody><tr><td>AWS</td><td>m4.large</td><td>2</td><td>8</td><td>3600</td><td>56.25</td></tr><tr><td>GCE</td><td>n1-standard-2 + 50GB PD SSD</td><td>2</td><td>7.5</td><td>1500</td><td>25</td></tr></tbody></table><ol><li>中等规模集群</li></ol><p>请求客户端少于500个，每秒请求少于1000个，并且存储数据少于500MB。如250个node的kuberentes集群：</p><table><thead><tr><th>Provider</th><th>Type</th><th>vCPUs</th><th>Memory (GB)</th><th>Max concurrent IOPS</th><th>Disk bandwidth (MB&#x2F;s)</th></tr></thead><tbody><tr><td>AWS</td><td>m4.xlarge</td><td>4</td><td>16</td><td>6000</td><td>93.75</td></tr><tr><td>GCE</td><td>n1-standard-4 + 150GB PD SSD</td><td>4</td><td>15</td><td>4500</td><td>75</td></tr></tbody></table><ol><li>大规模集群</li></ol><p>请求客户端少于1500个，每秒请求少于10000个，并且存储数据少于1000MB。如1000个node的kuberentes集群</p><table><thead><tr><th>Provider</th><th>Type</th><th>vCPUs</th><th>Memory (GB)</th><th>Max concurrent IOPS</th><th>Disk bandwidth (MB&#x2F;s)</th></tr></thead><tbody><tr><td>AWS</td><td>m4.2xlarge</td><td>8</td><td>32</td><td>8000</td><td>125</td></tr><tr><td>GCE</td><td>n1-standard-8 + 250GB PD SSD</td><td>8</td><td>30</td><td>7500</td><td>125</td></tr></tbody></table><ol><li>超大规模集群</li></ol><p>请求客户端超过1500个，每秒请求超过10000个，并且存储数据大于1000MB。如3000个node的kuberentes集群</p><table><thead><tr><th>Provider</th><th>Type</th><th>vCPUs</th><th>Memory (GB)</th><th>Max concurrent IOPS</th><th>Disk bandwidth (MB&#x2F;s)</th></tr></thead><tbody><tr><td>AWS</td><td>m4.4xlarge</td><td>16</td><td>64</td><td>16,000</td><td>250</td></tr><tr><td>GCE</td><td>n1-standard-16 + 500GB PD SSD</td><td>16</td><td>60</td><td>15,000</td><td>250</td></tr></tbody></table><h3 id="2-1-2-机器规划"><a href="#2-1-2-机器规划" class="headerlink" title="2.1.2. 机器规划"></a>2.1.2. 机器规划</h3><p>规划小规模测试集群，集群中节均关闭swap分区，安装chronyd时间同步服务。</p><p>磁盘写入性能由 fio 测试得出，具体可以参考<a href="https://www.ibm.com/cloud/blog/using-fio-to-tell-whether-your-storage-is-fast-enough-for-etcd">IBM的这篇文章</a>。</p><table><thead><tr><th>节点</th><th>IP</th><th>系统</th><th>CPU&#x2F;Memory</th><th>Disk</th><th>write IOPS avg</th><th>write bandwidth avg(MB&#x2F;s)</th></tr></thead><tbody><tr><td>etcd-1</td><td>10.4.7.121</td><td>ubuntu 18.04.5</td><td>2C 4G</td><td>20G SSD</td><td>min&#x3D; 2706, max&#x3D; 2758, avg&#x3D;2727.14</td><td>min&#x3D; 6077, max&#x3D; 6194,avg&#x3D;6124.86</td></tr><tr><td>etcd-2</td><td>10.4.7.122</td><td>ubuntu 18.04.5</td><td>2C 4G</td><td>20G SSD</td><td></td><td></td></tr><tr><td>etcd-3</td><td>10.4.7.123</td><td>ubuntu 18.04.5</td><td>2C 4G</td><td>20G SSD</td><td></td><td></td></tr></tbody></table><h2 id="2-2-etcd集群部署"><a href="#2-2-etcd集群部署" class="headerlink" title="2.2. etcd集群部署"></a>2.2. etcd集群部署</h2><p>ectd 版本下载页面：<a href="https://github.com/etcd-io/etcd/releases%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BB%A5">https://github.com/etcd-io/etcd/releases，这里以</a> 3.5.1 版本为例，进行安装和学习。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# wget https://github.com/etcd-io/etcd/releases/download/v3.5.1/etcd-v3.5.1-linux-amd64.tar.gz<br>[root@duduniao etcd]# tar -xf etcd-v3.5.1-linux-amd64.tar.gz<br>[root@duduniao etcd]# ls etcd-v3.5.1-linux-amd64/etcd* -l<br>-rwxr-xr-x 1 114762 114762 23568384 Oct 15 22:22 etcd-v3.5.1-linux-amd64/etcd<br>-rwxr-xr-x 1 114762 114762 17981440 Oct 15 22:22 etcd-v3.5.1-linux-amd64/etcdctl<br>-rwxr-xr-x 1 114762 114762 16056320 Oct 15 22:22 etcd-v3.5.1-linux-amd64/etcdutl<br><br># 下发etcd软件到各个服务器上<br>[root@duduniao etcd]# scan_host.sh push -h 10.4.7.121 10.4.7.122 10.4.7.123 etcd-v3.5.1-linux-amd64/etcd* /usr/local/bin/<br>10.4.7.123        etcd-v3.5.1-linux-amd64/etcd etcd-v3.5.1-linux-amd64/etcdctl etcd-v3.5.1-linux-amd64/etcdutl --&gt; /usr/local/bin/ Y<br>10.4.7.121        etcd-v3.5.1-linux-amd64/etcd etcd-v3.5.1-linux-amd64/etcdctl etcd-v3.5.1-linux-amd64/etcdutl --&gt; /usr/local/bin/ Y<br>10.4.7.122        etcd-v3.5.1-linux-amd64/etcd etcd-v3.5.1-linux-amd64/etcdctl etcd-v3.5.1-linux-amd64/etcdutl --&gt; /usr/local/bin/ Y<br><br># 配置启动的etcd.service文件<br>[root@duduniao etcd]# scp etcd-1.service 10.4.7.121:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-2.service 10.4.7.122:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-3.service 10.4.7.123:/lib/systemd/system/etcd.service<br><br># 启动etcd<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;mkdir /data/etcd ; systemctl daemon-reload&quot;<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl start etcd &amp;&amp; systemctl enable etcd&quot;<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl is-enabled etcd &amp;&amp; systemctl is-active etcd&quot;<br><br># 检查集群状态<br>[root@duduniao etcd]# ./etcd-v3.5.1-linux-amd64/etcdctl --endpoints=10.4.7.121:2379 member list --write-out=table<br>+------------------+---------+--------+------------------------+------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS       |      CLIENT ADDRS      | IS LEARNER |<br>+------------------+---------+--------+------------------------+------------------------+------------+<br>| 4c45db44e1021917 | started | etcd-1 | http://10.4.7.121:2380 | http://10.4.7.121:2379 |      false |<br>| 721eef2714f1477a | started | etcd-2 | http://10.4.7.122:2380 | http://10.4.7.122:2379 |      false |<br>| f6d5f5c8eef4f092 | started | etcd-3 | http://10.4.7.123:2380 | http://10.4.7.123:2379 |      false |<br>+------------------+---------+--------+------------------------+------------------------+------------+<br><br># 测试读写<br>[root@duduniao etcd]# ./etcd-v3.5.1-linux-amd64/etcdctl --endpoints=10.4.7.121:2379 put k1 test-value-1<br>[root@duduniao etcd]# ./etcd-v3.5.1-linux-amd64/etcdctl --endpoints=10.4.7.123:2379 get k1<br>k1<br>test-value-1<br># etcd-1.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-1 \<br>  --initial-advertise-peer-urls http://10.4.7.121:2380 \<br>  --listen-peer-urls http://10.4.7.121:2380 \<br>  --listen-client-urls http://10.4.7.121:2379,http://127.0.0.1:2379 \<br>  --advertise-client-urls http://10.4.7.121:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=http://10.4.7.121:2380,etcd-2=http://10.4.7.122:2380,etcd-3=http://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --data-dir /data/etcd \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br># etcd-2.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-2 \<br>  --initial-advertise-peer-urls http://10.4.7.122:2380 \<br>  --listen-peer-urls http://10.4.7.122:2380 \<br>  --listen-client-urls http://10.4.7.122:2379,http://127.0.0.1:2379 \<br>  --advertise-client-urls http://10.4.7.122:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=http://10.4.7.121:2380,etcd-2=http://10.4.7.122:2380,etcd-3=http://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --data-dir /data/etcd \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br># etcd-3.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-3 \<br>  --initial-advertise-peer-urls http://10.4.7.123:2380 \<br>  --listen-peer-urls http://10.4.7.123:2380 \<br>  --listen-client-urls http://10.4.7.123:2379,http://127.0.0.1:2379 \<br>  --advertise-client-urls http://10.4.7.123:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=http://10.4.7.121:2380,etcd-2=http://10.4.7.122:2380,etcd-3=http://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --data-dir /data/etcd \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="2-3-TLS加密通信的etcd集群部署"><a href="#2-3-TLS加密通信的etcd集群部署" class="headerlink" title="2.3. TLS加密通信的etcd集群部署"></a>2.3. TLS加密通信的etcd集群部署</h2><p>etcd有两个对外暴露的端口：2379 和 2380。其中2379是的用来接收客户端请求的，2380用来和集群内部其它节点通信和数据同步的。这两种通信都可以进行TLS加密，并且可以使用CA证书进行验证对方是否合法。etcd默认是没用启动RBAC认证的，所有连接上的客户端都是可以操作所有的key。在k8s集群中，ectd服务端是通过客户端证书验证是否合法的，只有客户端拿etcd认可的CA签发的证书才能通过认证。核心参数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"># client和server直接通信<br>--trusted-ca-file=&lt;path&gt;受信任的CA证书<br>--cert-file=&lt;path&gt;etcd 服务端证书<br>--key-file=&lt;path&gt;etcd 服务端证书私钥<br>--client-cert-auth指定该参数后，服务端要求客户端证书也是trusted-ca-file签发的证书<br><br># etcd节点之间通信(peer)<br>--peer-trusted-ca-file=&lt;path&gt;受信任的CA证书<br>--peer-cert-file=&lt;path&gt;etcd 服务端证书<br>--peer-key-file=&lt;path&gt;etcd 服务端证书私钥<br>--peer-client-cert-auth指定该参数后，要求对端证书也是peer-trusted-ca-file签发的证书<br></code></pre></td></tr></table></figure><h3 id="2-3-1-签发证书"><a href="#2-3-1-签发证书" class="headerlink" title="2.3.1. 签发证书"></a>2.3.1. 签发证书</h3><p>通常我们会同时加密 client-server 以及 peer 节点证书，为了简化，client-server 和 peer 的ca证书通常是相同的，甚至peer证书和server证书都可以相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 下载证书签发工具<br>[root@duduniao etcd]# wget -O /usr/local/bin/cfssl  https://pkg.cfssl.org/R1.2/cfssl_linux-amd64<br>[root@duduniao etcd]# wget -O /usr/local/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64<br>[root@duduniao etcd]# chmod +x /usr/local/bin/cfssljson  /usr/local/bin/cfssl<br># 签发ca证书，这里有个很大的坑：<br>#     etcd节点会不断以客户端身份访问自身的2379端口，并且使用的是server证书，因此ca的server配置必须添加line:19 &quot;client auth&quot;。否则会报以下错误:<br>#     WARNING: 2021/10/17 09:55:56 [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1:2379 &lt;nil&gt; 0 &lt;nil&gt;&#125;. <br>#     Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: bad certificate&quot;. Reconnecting...<br>[root@duduniao etcd]# mkdir ssl/ &amp;&amp; cd ssl<br>[root@duduniao ssl]# cat ca-config.json<br>&#123;<br>    &quot;signing&quot;: &#123;<br>        &quot;default&quot;: &#123;<br>            &quot;expiry&quot;: &quot;43800h&quot;<br>        &#125;,<br>        &quot;profiles&quot;: &#123;<br>            &quot;server&quot;: &#123;<br>                &quot;expiry&quot;: &quot;43800h&quot;,<br>                &quot;usages&quot;: [<br>                    &quot;signing&quot;,<br>                    &quot;key encipherment&quot;,<br>                    &quot;server auth&quot;,<br>                    &quot;client auth&quot;<br>                ]<br>            &#125;,<br>            &quot;client&quot;: &#123;<br>                &quot;expiry&quot;: &quot;43800h&quot;,<br>                &quot;usages&quot;: [<br>                    &quot;signing&quot;,<br>                    &quot;key encipherment&quot;,<br>                    &quot;client auth&quot;<br>                ]<br>            &#125;,<br>            &quot;peer&quot;: &#123;<br>                &quot;expiry&quot;: &quot;43800h&quot;,<br>                &quot;usages&quot;: [<br>                    &quot;signing&quot;,<br>                    &quot;key encipherment&quot;,<br>                    &quot;server auth&quot;,<br>                    &quot;client auth&quot;<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>[root@duduniao ssl]# cat ca-csr.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd-ca&quot;,<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;rsa&quot;,<br>        &quot;size&quot;: 2048<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;O&quot;: &quot;duduniao&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;,<br>            &quot;OU&quot;: &quot;devops&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# cfssl gencert -initca ca-csr.json | cfssljson -bare ca -<br>[root@duduniao ssl]# ll<br>total 20<br>-rw-r--r-- 1 root root  832 2021-10-17 15:23:33 ca-config.json<br>-rw-r--r-- 1 root root  274 2021-10-17 15:26:46 ca-csr.json<br>-rw------- 1 root root 1679 2021-10-17 15:27:08 ca-key.pem<br>-rw-r--r-- 1 root root 1013 2021-10-17 15:27:08 ca.csr<br>-rw-r--r-- 1 root root 1387 2021-10-17 15:27:08 ca.pem<br># 签发server证书， client验证server使用，同时server自检也需要<br>[root@duduniao ssl]# cat server.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd.duduniao.com&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;10.4.7.121&quot;,<br>        &quot;10.4.7.122&quot;,<br>        &quot;10.4.7.123&quot;,<br>        &quot;127.0.0.1&quot;,<br>        &quot;etcd-1&quot;,<br>        &quot;etcd-2&quot;,<br>        &quot;etcd-3&quot;,<br>        &quot;localhost&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;ecdsa&quot;,<br>        &quot;size&quot;: 256<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server server.json | cfssljson -bare server<br>[root@duduniao ssl]# ll server*<br>-rw------- 1 root root  227 2021-10-17 15:32:56 server-key.pem<br>-rw-r--r-- 1 root root  558 2021-10-17 15:32:56 server.csr<br>-rw-r--r-- 1 root root  391 2021-10-17 15:32:24 server.json<br>-rw-r--r-- 1 root root 1184 2021-10-17 15:32:56 server.pem<br># 签发peer证书，推荐每个节点一个, 以etcd-1为例，其它节点修改IP、域名和主机名<br>[root@duduniao ssl]# cat etcd-1.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd-1.duduniao.com&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;10.4.7.121&quot;,<br>        &quot;etcd-1&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;ecdsa&quot;,<br>        &quot;size&quot;: 256<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-1.json | cfssljson -bare etcd-1<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-2.json | cfssljson -bare etcd-2<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-3.json | cfssljson -bare etcd-3<br></code></pre></td></tr></table></figure><h3 id="2-3-2-部署etcd集群"><a href="#2-3-2-部署etcd集群" class="headerlink" title="2.3.2. 部署etcd集群"></a>2.3.2. 部署etcd集群</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 停止掉非加密的etcd集群，清理etcd数据<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl stop etcd&quot; <br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;rm -fr /data/etcd&quot;<br># 下发证书<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;mkdir -p /data/etcd/data /data/etcd/ssl&quot;<br>[root@duduniao etcd]# scan_host.sh push -h 10.4.7.121 10.4.7.122 10.4.7.123 ssl/ca.pem ssl/server.pem ssl/server-key.pem  /data/etcd/ssl/<br>[root@duduniao etcd]# scp ssl/etcd-1-key.pem ssl/etcd-1.pem 10.4.7.121:/data/etcd/ssl/<br>[root@duduniao etcd]# scp ssl/etcd-2-key.pem ssl/etcd-2.pem 10.4.7.122:/data/etcd/ssl/<br>[root@duduniao etcd]# scp ssl/etcd-3-key.pem ssl/etcd-3.pem 10.4.7.123:/data/etcd/ssl/<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;ls -l /data/etcd/ssl&quot;<br>10.4.7.122<br>total 20<br>-rw-r--r-- 1 root root 1387 Oct 17 07:53 ca.pem<br>-rw------- 1 root root  227 Oct 17 07:54 etcd-2-key.pem<br>-rw-r--r-- 1 root root 1147 Oct 17 07:54 etcd-2.pem<br>-rw------- 1 root root  227 Oct 17 07:53 server-key.pem<br>-rw-r--r-- 1 root root 1184 Oct 17 07:53 server.pem<br>10.4.7.121<br>total 20<br>-rw-r--r-- 1 root root 1387 Oct 17 07:53 ca.pem<br>-rw------- 1 root root  227 Oct 17 07:54 etcd-1-key.pem<br>-rw-r--r-- 1 root root 1147 Oct 17 07:54 etcd-1.pem<br>-rw------- 1 root root  227 Oct 17 07:53 server-key.pem<br>-rw-r--r-- 1 root root 1184 Oct 17 07:53 server.pem<br>10.4.7.123<br>total 20<br>-rw-r--r-- 1 root root 1387 Oct 17 07:53 ca.pem<br>-rw------- 1 root root  227 Oct 17 07:55 etcd-3-key.pem<br>-rw-r--r-- 1 root root 1147 Oct 17 07:55 etcd-3.pem<br>-rw------- 1 root root  227 Oct 17 07:53 server-key.pem<br>-rw-r--r-- 1 root root 1184 Oct 17 07:53 server.pem<br># 修改servcie文件<br># etcd-1.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-1 \<br>  --initial-advertise-peer-urls https://10.4.7.121:2380 \<br>  --listen-peer-urls https://10.4.7.121:2380 \<br>  --listen-client-urls https://10.4.7.121:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.121:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-1.pem \<br>  --peer-key-file ssl/etcd-1-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br># etcd-2.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-2 \<br>  --initial-advertise-peer-urls https://10.4.7.122:2380 \<br>  --listen-peer-urls https://10.4.7.122:2380 \<br>  --listen-client-urls https://10.4.7.122:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.122:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-2.pem \<br>  --peer-key-file ssl/etcd-2-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br># etcd-3.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-3 \<br>  --initial-advertise-peer-urls https://10.4.7.123:2380 \<br>  --listen-peer-urls https://10.4.7.123:2380 \<br>  --listen-client-urls https://10.4.7.123:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.123:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-3.pem \<br>  --peer-key-file ssl/etcd-3-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br># 启动集群<br>[root@duduniao etcd]# scp etcd-1.service 10.4.7.121:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-2.service 10.4.7.122:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-3.service 10.4.7.123:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl daemon-reload&quot;<br>10.4.7.122<br>10.4.7.123<br>10.4.7.121<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl restart etcd &amp;&amp; systemctl enable etcd&quot;<br></code></pre></td></tr></table></figure><h3 id="2-3-3-客户端验证"><a href="#2-3-3-客户端验证" class="headerlink" title="2.3.3. 客户端验证"></a>2.3.3. 客户端验证</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 不加证书<br>root@ubuntu-1804-122:~# etcdctl --endpoints=10.4.7.121:2379 member list --write-out=table<br>&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-17T10:26:16.722Z&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc000318380/10.4.7.121:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = latest balancer error: last connection error: connection closed&quot;&#125;<br>Error: context deadline exceeded<br><br># 加上证书<br>root@ubuntu-1804-122:~# cd /data/etcd/ssl/ &amp;&amp; etcdctl --cacert ca.pem --cert server.pem --key server-key.pem --endpoints https://10.4.7.121:2379 member list<br>4fe2b98ed7b794f7, started, etcd-3, https://10.4.7.123:2380, https://10.4.7.123:2379, false<br>bbd6739258f69625, started, etcd-1, https://10.4.7.121:2380, https://10.4.7.121:2379, false<br>c5542f3740ec56cd, started, etcd-2, https://10.4.7.122:2380, https://10.4.7.122:2379, false<br></code></pre></td></tr></table></figure><h2 id="2-4-etcd命令行"><a href="#2-4-etcd命令行" class="headerlink" title="2.4. etcd命令行"></a>2.4. etcd命令行</h2><h3 id="2-4-1-etcd"><a href="#2-4-1-etcd" class="headerlink" title="2.4.1. etcd"></a>2.4.1. etcd</h3><p>ectd 启动参数非常多，核心的启动参数有以下部分，其它请参考<a href="https://etcd.io/docs/v3.5/op-guide/configuration/">官方文档</a>。</p><ul><li>member flgas</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">-name 节点名称,用于组建集群，默认 default<br>-data-dir 数据存储目录，默认工作目录下 $&#123;name&#125;.etcd<br>-wal-dirwal日志目录，默认为data-dir<br>-snapshot-count触发snapshot的事务提交次数，默认值 100000<br>-listen-peer-urls集群节点中间对等网络监听URL，可以是http也可以是https, 0.0.0.0表示所有地址。默认 http://localhost:2380<br>-listen-peer-urls 用于暴露给客户端的URL地址，可以是http也可以是https, 0.0.0.0表示所有地址。默认 http://localhost:2379<br><br>–max-request-bytes客户端最大请求的字节数，默认1572864<br>-quota-backend-bytes后端配额大小，默认为2G.最大为8G，超过会导致数据无法写入<br></code></pre></td></tr></table></figure><ul><li>cluster flags</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">–initial-cluster引导并初始化一个新集群。仅在启动新的集群成员时生效，后续运行中会忽略该参数<br>–initial-advertise-peer-urls对外发布peer节点通信地址。仅在启动新的集群成员时生效，后续运行中会忽略该参数<br>-initial-cluster-state集群状态。new:表示所有节点都是第一次启动并组建集群;existing表示加入一个已存在的集群。仅在启动新的集群成员时生效，后续运行中会忽略该参数<br>-initial-cluster-token集群的token，所有节点启动时需要指定。默认为 etcd-cluster。仅在启动新的集群成员时生效，后续运行中会忽略该参数<br>-advertise-client-urls发布给其它成员，告知他们当前节点暴露给客户端的地址。默认为 http://localhost:2379<br></code></pre></td></tr></table></figure><ul><li>secirity flags</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">-trusted-ca-file# 服务端信任的CA证书，用来验证客户端是否合法<br>-cert-file# 服务端证书，由信任的CA签发，加密与客户端的通信，并且被客户端验证<br>-key-file# 服务端证书私钥<br>-client-cert-auth# 启用该参数表示服务端验证客户端证书是否为受信任的CA签发<br><br>–peer-trusted-ca-file# peer节点通信信任的CA证书，用来验证其它节点是否合法<br>-peer-cert-file# peer节点证书，由信任的CA签发，加密与客户端的通信，并且被其它节点验证<br>-peer-key-file# peer节点证书私钥<br>-peer-client-cert-auth# 启用该参数表示验证对端证书是否为受信任的CA签发<br></code></pre></td></tr></table></figure><ul><li>logging flags</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">-log-level指定日志级别，默认info.可选: debug, info, warn, error, panic, fatal<br></code></pre></td></tr></table></figure><h3 id="2-4-2-etcdctl"><a href="#2-4-2-etcdctl" class="headerlink" title="2.4.2. etcdctl"></a>2.4.2. etcdctl</h3><h4 id="2-4-2-1-常用参数"><a href="#2-4-2-1-常用参数" class="headerlink" title="2.4.2.1. 常用参数"></a>2.4.2.1. 常用参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">--endpoints指定服务端GRPC接口，默认 127.0.0.1:2379<br><br>--cacert指定ca证书，用来验证服务端是否合法<br>--cert指定客户端证书<br>--key指定客户端证书的私钥<br></code></pre></td></tr></table></figure><p>对于需要通过证书访问的场景，可以配置命令的别名，以下的案例均使用别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">alias etc=&#x27;etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379&#x27;<br></code></pre></td></tr></table></figure><h4 id="2-4-2-2-常用指令"><a href="#2-4-2-2-常用指令" class="headerlink" title="2.4.2.2. 常用指令"></a>2.4.2.2. 常用指令</h4><p>etcdctl 是etcd的客户端工具，通常用来查询集群和节点状态，偶尔用来查询指定key的值。</p><ol><li>指定API版本</li></ol><p>etcd的API有v2和v3，etcdctl 命令在3.4之前默认为v2，之后为v3。v2和v3版本的API数据不兼容，在查询的时候需要通过环境变量指定版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">export ETCDCTL_API=3  # 指定v3版本<br>export ETCDCTL_API=2# 指定v2版本<br></code></pre></td></tr></table></figure><ol><li>写入key</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc put key-1 value-1<br>[root@duduniao etcd]# etc put key-2 value-2<br>[root@duduniao etcd]# etc put key-3 value-3<br></code></pre></td></tr></table></figure><ol><li>查询key</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 精确查询<br>[root@duduniao etcd]# etc get key-1<br># 根据前缀查询<br>[root@duduniao etcd]# etc get --prefix key<br># 只显示value<br>[root@duduniao etcd]# etc get --prefix key --print-value-only<br># 现在查询结果的数量<br>[root@duduniao etcd]# etc get --prefix key --limit 2<br></code></pre></td></tr></table></figure><ol><li>watch key</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc watch key-1<br></code></pre></td></tr></table></figure><ol><li>删除key</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc del key-watch<br></code></pre></td></tr></table></figure><ol><li>查看集群状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc member list --write-out=table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>查看节点状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc endpoint status --write-out=table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.121:2379 | bbd6739258f69625 |   3.5.1 |   20 kB |      true |      false |         2 |         23 |                 23 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etc endpoint health --write-out=table<br>+-------------------------+--------+----------+-------+<br>|        ENDPOINT         | HEALTH |   TOOK   | ERROR |<br>+-------------------------+--------+----------+-------+<br>| https://10.4.7.121:2379 |   true | 6.6739ms |       |<br>+-------------------------+--------+----------+-------+<br></code></pre></td></tr></table></figure><h3>原文来自：运维渡渡鸟</h3>-----------------]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Etcd集群维护</title>
    <link href="/2025/03/19/Etcd%E9%9B%86%E7%BE%A4%E7%BB%B4%E6%8A%A4/"/>
    <url>/2025/03/19/Etcd%E9%9B%86%E7%BE%A4%E7%BB%B4%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="1-集群维护"><a href="#1-集群维护" class="headerlink" title="1. 集群维护"></a>1. 集群维护</h1><p>etcd启动参数中<code>--initial-advertise-peer-urls</code> <code>--initial-cluster</code> <code>--initial-cluster-state</code> <code>--initial-cluster-token</code>仅在创建新的member节点中使用，对于已经添加到集群中的节点而言是不生效的，因此在大部分情况，不需要修改现有etcd启动命令中的这几个参数的，同理这个参数也不能代表集群中节点的真实状态。集群的维护操作主要有以下几种：</p><ul><li>增加集群节点：比如从3个节点增加到5个节点，提升客户端读取性能</li><li>移除集群节点：比如从5个节点减少到3个节点，提升客户端写入性能</li><li>节点迁移维护：节点磁盘故障、节点配置升级、系统升级需要停服维护</li><li>集群灾难恢复：多数节点不可用，需要用旧数据重新建立集群</li><li>etcd版本升级：需要参考官方文档，确认各个版本区别，然后逐个升级</li><li>etcd证书替换：证书到期后更换证书</li></ul><h2 id="1-1-增加集群节点"><a href="#1-1-增加集群节点" class="headerlink" title="1.1. 增加集群节点"></a>1.1. 增加集群节点</h2><p>向当前集群添加 <code>etcd-4: https://10.4.7.123:2380</code>和 <code>etcd-5: https://10.4.7.125:2380</code>，操作步骤如下：</p><ol><li>确认当前集群成员信息，确保当前集群能正常对外提供服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc member list --write-out=table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>签发新节点的证书</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 重新签发server证书，因为原来的server证书不包含etcd-4和etcd-5。<br># 从v3.2.0开始，每次客户端连接会自动加载server证书和peer证书，可以动态替换旧证书。<br>[root@duduniao ssl]# cat server.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd.duduniao.com&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;10.4.7.121&quot;,<br>        &quot;10.4.7.122&quot;,<br>        &quot;10.4.7.123&quot;,<br>        &quot;10.4.7.124&quot;,<br>        &quot;10.4.7.125&quot;,<br>        &quot;127.0.0.1&quot;,<br>        &quot;etcd-1&quot;,<br>        &quot;etcd-2&quot;,<br>        &quot;etcd-3&quot;,<br>        &quot;etcd-4&quot;,<br>        &quot;etcd-5&quot;,<br>        &quot;localhost&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;ecdsa&quot;,<br>        &quot;size&quot;: 256<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# rm -f server.csr server*.pem<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server server.json | cfssljson -bare server<br><br># 以 etcd-4为例，签发 peer 证书<br>[root@duduniao ssl]# cat etcd-4.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd-4.duduniao.com&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;10.4.7.124&quot;,<br>        &quot;etcd-4&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;ecdsa&quot;,<br>        &quot;size&quot;: 256<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-4.json | cfssljson -bare etcd-4<br>[root@duduniao ssl]# ll etcd-4*.pem etcd-5*.pem<br>-rw------- 1 root root  227 2021-10-19 23:06:14 etcd-4-key.pem<br>-rw-r--r-- 1 root root 1147 2021-10-19 23:06:14 etcd-4.pem<br>-rw------- 1 root root  227 2021-10-19 23:06:26 etcd-5-key.pem<br>-rw-r--r-- 1 root root 1147 2021-10-19 23:06:26 etcd-5.pem<br><br># 下发etcd证书<br>[root@duduniao ssl]# ssh 10.4.7.124 &quot;mkdir -pv /data/etcd/&#123;ssl,data&#125;&quot;<br>mkdir: created directory &#x27;/data/etcd&#x27;<br>mkdir: created directory &#x27;/data/etcd/ssl&#x27;<br>mkdir: created directory &#x27;/data/etcd/data&#x27;<br>[root@duduniao ssl]# scp ca.pem etcd-4.pem etcd-4-key.pem 10.4.7.124:/data/etcd/ssl/<br># 同步所有节点的server证书，这里只是为了方便管理，旧节点可以不用替换。<br>[root@duduniao ssl]# for i in 10.4.7.12&#123;1..5&#125;;do echo $i ; scp server.pem server-key.pem $i:/data/etcd/ssl/ ;done<br></code></pre></td></tr></table></figure><ol><li>添加新节点</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member add etcd-4 --peer-urls https://10.4.7.124:2380<br>Member 79b3746506cf2fc1 added to cluster 23ce29301256c4ff<br><br>ETCD_NAME=&quot;etcd-4&quot;<br>ETCD_INITIAL_CLUSTER=&quot;etcd-3=https://10.4.7.123:2380,etcd-4=https://10.4.7.124:2380,etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380&quot;<br>ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.4.7.124:2380&quot;<br>ETCD_INITIAL_CLUSTER_STATE=&quot;existing&quot;<br><br>[root@duduniao etcd]# etc member list --write-out=table  # 当前状态是未启动<br>+------------------+-----------+--------+-------------------------+-------------------------+------------+<br>|        ID        |  STATUS   |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+-----------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 |   started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| 79b3746506cf2fc1 | unstarted |        | https://10.4.7.124:2380 |                         |      false |<br>| bbd6739258f69625 |   started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd |   started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+-----------+--------+-------------------------+-------------------------+------------+<br><br># 查看任意一台节点的etcd日志：<br>Oct 19 15:17:05 ubuntu-1804-121 etcd[23741]: &#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-19T15:17:05.569Z&quot;,&quot;caller&quot;:&quot;rafthttp/probing_status.go:68&quot;,&quot;msg&quot;:&quot;prober detected unhealthy status&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_RAFT_MESSAGE&quot;,&quot;remote-peer-id&quot;:&quot;79b3746506cf2fc1&quot;,&quot;rtt&quot;:&quot;0s&quot;,&quot;error&quot;:&quot;dial tcp 10.4.7.124:2380: connect: connection refused&quot;&#125;<br>Oct 19 15:17:05 ubuntu-1804-121 etcd[23741]: &#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-19T15:17:05.569Z&quot;,&quot;caller&quot;:&quot;rafthttp/probing_status.go:68&quot;,&quot;msg&quot;:&quot;prober detected unhealthy status&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_SNAPSHOT&quot;,&quot;remote-peer-id&quot;:&quot;79b3746506cf2fc1&quot;,&quot;rtt&quot;:&quot;0s&quot;,&quot;error&quot;:&quot;dial tcp 10.4.7.124:2380: connect: connection refused&quot;&#125;<br></code></pre></td></tr></table></figure><ol><li>启动新节点(etcd-4)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# cat etcd-4.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>Environment=ETCD_NAME=&quot;etcd-4&quot;<br>Environment=ETCD_INITIAL_CLUSTER=&quot;etcd-3=https://10.4.7.123:2380,etcd-4=https://10.4.7.124:2380,etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380&quot;<br>Environment=ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.4.7.124:2380&quot;<br>Environment=ETCD_INITIAL_CLUSTER_STATE=&quot;existing&quot;<br><br>ExecStart=/usr/local/bin/etcd \<br>  --listen-peer-urls https://10.4.7.124:2380 \<br>  --listen-client-urls https://10.4.7.124:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.124:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-4.pem \<br>  --peer-key-file ssl/etcd-4-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br>[root@duduniao etcd]# scp etcd-4.service 10.4.7.124:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-v3.5.1-linux-amd64/etcd* 10.4.7.124:/usr/local/bin/<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl start etcd&quot;<br><br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.124:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.124:2379 | 79b3746506cf2fc1 |   3.5.1 |   20 kB |     false |      false |         2 |         76 |                 76 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.124:2379 member list  --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| 79b3746506cf2fc1 | started | etcd-4 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>添加etcd-5</li></ol><p>重复操作步骤3和步骤4即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.125:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.125:2379 | d0756e0778ff59b4 |   3.5.1 |   20 kB |     false |      false |         2 |         78 |                 78 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.124:2379 member list  --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| 79b3746506cf2fc1 | started | etcd-4 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>| d0756e0778ff59b4 | started | etcd-5 | https://10.4.7.125:2380 | https://10.4.7.125:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><h2 id="1-2-移除集群节点"><a href="#1-2-移除集群节点" class="headerlink" title="1.2. 移除集群节点"></a>1.2. 移除集群节点</h2><p>当集群中，需要缩减集群规模，需要移除现有的节点。如从5节点缩减至3节点，操作方式如下：</p><ol><li>检查集群状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list  --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| 79b3746506cf2fc1 | started | etcd-4 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>| d0756e0778ff59b4 | started | etcd-5 | https://10.4.7.125:2380 | https://10.4.7.125:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>移除节点</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 移除etcd-5<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member remove d0756e0778ff59b4<br>Member d0756e0778ff59b4 removed from cluster 23ce29301256c4ff<br># 移除etcd-4<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member remove 79b3746506cf2fc1<br>Member 79b3746506cf2fc1 removed from cluster 23ce29301256c4ff<br><br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list  --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>停止移除节点上的etcd服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl stop etcd &amp;&amp; systemctl disable etcd&quot;<br>[root@duduniao etcd]# ssh 10.4.7.125 &quot;systemctl stop etcd &amp;&amp; systemctl disable etcd&quot;<br></code></pre></td></tr></table></figure><h2 id="1-3-节点迁移维护"><a href="#1-3-节点迁移维护" class="headerlink" title="1.3. 节点迁移维护"></a>1.3. 节点迁移维护</h2><p>如果只是当前节点升级配置、服务器重启等操作，直接停服后操作即可，无需特殊处理。针对节点数据磁盘故障、或者当前节点数据迁移到新的节点上的两种场景，有两种解决方案：</p><ul><li>按照1.2 方式移旧节点，再按照 1.1 方式新增节点，如果新旧节点IP不变，则不需要签发新的证书</li><li>如果数据较大(大于50MB)且旧节点数据未损坏，可用迁移节点方式</li></ul><p>这里针对需要进行数据迁移的场景进行演示，迁移etcd-3节点到 10.4.7.124：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>模拟etcd-3故障</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">root@ubuntu-1804-123:~# systemctl stop etcd<br></code></pre></td></tr></table></figure><ol><li>迁移 10.4.7.123 上的etcd数据到 10.4.7.124</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.123 &quot;cd /data/etcd &amp;&amp; tar -zcf etcd-3.tar.gz data&quot;<br>[root@duduniao etcd]# scp 10.4.7.123 /data/etcd/etcd-3.tar.gz ./<br><br>[root@duduniao etcd]# scp etcd-3.tar.gz 10.4.7.124:/tmp/ <br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;rm -fr /data/etcd/data ; mkdir -pv /data/etcd/ssl ; tar -xf /tmp/etcd-3.tar.gz -C /data/etcd &amp;&amp; rm -f /tmp/etcd-3.tar.gz &amp;&amp; ls -l /data/etcd&quot;<br></code></pre></td></tr></table></figure><ol><li>生成 10.4.7.124 上的etcd server证书和peer证书</li></ol><p>参考 1.1 添加新节点中证书签发步骤，最终结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.124 &quot;ls -l /data/etcd/ssl&quot;<br>total 20<br>-rw-r--r-- 1 root root 1387 Oct 19 15:31 ca.pem<br>-rw------- 1 root root  227 Oct 19 15:31 etcd-3-key.pem<br>-rw-r--r-- 1 root root 1147 Oct 19 15:31 etcd-3.pem<br>-rw------- 1 root root  227 Oct 19 15:37 server-key.pem<br>-rw-r--r-- 1 root root 1245 Oct 19 15:37 server.pem<br></code></pre></td></tr></table></figure><ol><li>更新集群中的member成员信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member update 4fe2b98ed7b794f7 --peer-urls=&quot;https://10.4.7.124:2379&quot;<br>Member 4fe2b98ed7b794f7 updated in cluster 23ce29301256c4ff<br><br># client URL需要启动后etcd进程后才能更新<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>启动新节点的 etcd 服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs plain"># /lib/systemd/system/etcd.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>Environment=ETCD_NAME=&quot;etcd-3&quot;<br><br>ExecStart=/usr/local/bin/etcd \<br>  --listen-peer-urls https://10.4.7.124:2380 \<br>  --listen-client-urls https://10.4.7.124:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.124:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-3.pem \<br>  --peer-key-file ssl/etcd-3-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl start etcd &amp;&amp; systemctl enable etcd&quot;<br><br># 此时集群中的etcd节点 client URL已经发生了变化<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br><br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.124:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.124:2379 | 4fe2b98ed7b794f7 |   3.5.1 |   20 kB |     false |      false |         2 |        135 |                135 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br></code></pre></td></tr></table></figure><h2 id="1-4-集群灾难恢复"><a href="#1-4-集群灾难恢复" class="headerlink" title="1.4. 集群灾难恢复"></a>1.4. 集群灾难恢复</h2><p>etcd集群选择leader时，是少数服从多数，因此不会出现脑裂问题。当集群中的大部分节点不可用时，集群无法对外提供正常的服务，此时需要尽快启动不可用节点，只要节点数据超过半数，集群状态会自动恢复：</p><ol><li>当少数节点不可用时</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br><br># 停止etcd-3模拟集群中少数节点故障<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl stop etcd&quot;<br># 节点状态正常<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 endpoint health --write-out table<br>+-------------------------+--------+----------+-------+<br>|        ENDPOINT         | HEALTH |   TOOK   | ERROR |<br>+-------------------------+--------+----------+-------+<br>| https://10.4.7.121:2379 |   true | 6.6047ms |       |<br>+-------------------------+--------+----------+-------+<br><br># 集群读写正常<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 put k1 v1<br>OK<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 get k1<br>k1<br>v1<br></code></pre></td></tr></table></figure><ol><li>模拟多数节点宕机</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.122 &quot;systemctl stop etcd&quot;<br><br># 节点状态异常，集群状态异常<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 endpoint health --write-out table<br>&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:1634910316.3861823,&quot;logger&quot;:&quot;client&quot;,&quot;caller&quot;:&quot;v3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc0004308c0/10.4.7.121:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = context deadline exceeded&quot;&#125;<br>+-------------------------+--------+-----------+---------------------------+<br>|        ENDPOINT         | HEALTH |   TOOK    |           ERROR           |<br>+-------------------------+--------+-----------+---------------------------+<br>| https://10.4.7.121:2379 |  false | 5.001016s | context deadline exceeded |<br>+-------------------------+--------+-----------+---------------------------+<br>Error: unhealthy cluster<br><br># 节点读写报错<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 put k1 v1<br>&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-22T21:46:29.288+0800&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc000622540/10.4.7.121:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = context deadline exceeded&quot;&#125;<br>Error: context deadline exceeded<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 get k1<br>&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-22T21:46:13.352+0800&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc0004348c0/10.4.7.121:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = context deadline exceeded&quot;&#125;<br>Error: context deadline exceeded<br></code></pre></td></tr></table></figure><ol><li>模拟多数节点顺利启动</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl start etcd&quot;<br><br># 集群状态和节点状态正常<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 endpoint health --write-out table<br>+-------------------------+--------+----------+-------+<br>|        ENDPOINT         | HEALTH |   TOOK   | ERROR |<br>+-------------------------+--------+----------+-------+<br>| https://10.4.7.121:2379 |   true | 6.8057ms |       |<br>+-------------------------+--------+----------+-------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 put k1 v1<br>OK<br></code></pre></td></tr></table></figure><p>考虑到一种极端情况，当大部分节点无法启动etcd，需要从快照或者历史备份中恢复数据，并组建一个新的集群：</p><ol><li>停止大部分节点，使得集群无法对外提供服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.122 &quot;systemctl stop etcd&quot;<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl stop etcd&quot;<br></code></pre></td></tr></table></figure><ol><li>从可用节点生成V3的快照，如果全部节点不可用则从etcd的数据目录下找到<code>member/snap/db</code>进行恢复，或者从历史备份恢复</li></ol><p>v2版本的恢复方式和v3不太一样，可参考<a href="https://etcd.io/docs/v2.3/admin_guide#disaster-recovery">官方文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ETCDCTL_API=3 etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 snapshot save snapshot.db<br>[root@duduniao etcd]# ll -h snapshot.db<br>-rw------- 1 root root 21K 2021-10-22 22:08:43 snapshot.d<br></code></pre></td></tr></table></figure><ol><li>停止节点上etcd进程，清理历史数据目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.121 &quot;systemctl stop etcd ; mv /data/etcd/data /data/etcd/data.20211022.bak&quot;<br>[root@duduniao etcd]# ssh 10.4.7.122 &quot;systemctl stop etcd ; mv /data/etcd/data /data/etcd/data.20211022.bak&quot;<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl stop etcd ; mv /data/etcd/data /data/etcd/data.20211022.bak&quot;<br><br>[root@duduniao etcd]# scp snapshot.db 10.4.7.121:/tmp/<br>[root@duduniao etcd]# scp snapshot.db 10.4.7.122:/tmp/<br>[root@duduniao etcd]# scp snapshot.db 10.4.7.124:/tmp/<br></code></pre></td></tr></table></figure><ol><li>重建集群</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">root@ubuntu-1804-121:~# ETCDCTL_API=3 etcdctl snapshot restore /tmp/snapshot.db --data-dir /data/etcd/data --initial-advertise-peer-urls https://10.4.7.121:2380 --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.124:2380 --initial-cluster-token etcd-cluster-1 --name etcd-1<br>root@ubuntu-1804-122:~# ETCDCTL_API=3 etcdctl snapshot restore /tmp/snapshot.db --data-dir /data/etcd/data --initial-advertise-peer-urls https://10.4.7.122:2380 --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.124:2380 --initial-cluster-token etcd-cluster-1 --name etcd-2<br>root@ubuntu-1804-124:~# ETCDCTL_API=3 etcdctl snapshot restore /tmp/snapshot.db --data-dir /data/etcd/data --initial-advertise-peer-urls https://10.4.7.124:2380 --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.124:2380 --initial-cluster-token etcd-cluster-1 --name etcd-3<br><br>root@ubuntu-1804-121:~# systemctl start etcd<br>root@ubuntu-1804-122:~# systemctl start etcd<br>root@ubuntu-1804-124:~# systemctl start etcd<br># 验证集群<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 8bb2a873a59fd89b | started | etcd-3 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 get k1<br>k1<br>v1<br></code></pre></td></tr></table></figure><h2 id="1-5-etcd版本升级"><a href="#1-5-etcd版本升级" class="headerlink" title="1.5. etcd版本升级"></a>1.5. etcd版本升级</h2><p>后续推出新版本升级了再补充</p><h2 id="1-6-etcd证书替换"><a href="#1-6-etcd证书替换" class="headerlink" title="1.6. etcd证书替换"></a>1.6. etcd证书替换</h2><p>etcd的证书替换分为四种类型：</p><ol><li>server 证书更换：从v3.2.0开始，每个请求会重载证书，因此证书替换会变得非常方便</li><li>peer 证书更换：从v3.2.0开始，每个请求会重载证书，因此证书替换会变得非常方便</li><li>ca 证书更换: ca证书的替换会变得比较麻烦，需要停服维护，做好前期准备工作，停服时间在1分钟以内</li></ol><p>上述的第一和第二种情况很容易处理，签发证书直接下发即可，老版本的etcd可用逐个重启服务。以下针对第三种情况进行操作：</p><ol><li><p>生成新的证书</p></li><li><p>下发证书，并重启etcd</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;cp -r /data/etcd/ssl /data/etcd/ssl-20211021.bak&quot;<br>[root@duduniao ssl-new]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;mkdir /data/etcd/ssl-new&quot;<br>[root@duduniao ssl-new]# scp ca.pem server.pem server-key.pem etcd-1.pem etcd-1-key.pem 10.4.7.121:/data/etcd/ssl-new/<br>[root@duduniao ssl-new]# scp ca.pem server.pem server-key.pem etcd-2.pem etcd-2-key.pem 10.4.7.122:/data/etcd/ssl-new/<br>[root@duduniao ssl-new]# scp ca.pem server.pem server-key.pem etcd-3.pem etcd-3-key.pem 10.4.7.124:/data/etcd/ssl-new/<br><br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;systemctl stop etcd &quot;<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;rm -fr /data/etcd/ssl ; mv /data/etcd/ssl-new /data/etcd/ssl&quot;<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;systemctl start etcd &quot;<br>[root@duduniao etcd]# etcdctl --cacert ssl-new/ca.pem --cert ssl-new/client.pem --key ssl-new/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 8bb2a873a59fd89b | started | etcd-3 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>[root@duduniao etcd]# etcdctl --cacert ssl-new/ca.pem --cert ssl-new/client.pem --key ssl-new/client-key.pem --endpoints https://10.4.7.121:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.121:2379 | bbd6739258f69625 |   3.5.1 |   20 kB |     false |      false |         7 |         37 |                 37 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etcdctl --cacert ssl-new/ca.pem --cert ssl-new/client.pem --key ssl-new/client-key.pem --endpoints https://10.4.7.122:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.122:2379 | c5542f3740ec56cd |   3.5.1 |   20 kB |     false |      false |         7 |         37 |                 37 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etcdctl --cacert ssl-new/ca.pem --cert ssl-new/client.pem --key ssl-new/client-key.pem --endpoints https://10.4.7.124:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.124:2379 | 8bb2a873a59fd89b |   3.5.1 |   20 kB |      true |      false |         7 |         37 |                 37 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br></code></pre></td></tr></table></figure><hr><h1 id="2-备份和恢复"><a href="#2-备份和恢复" class="headerlink" title="2. 备份和恢复"></a>2. 备份和恢复</h1><p>大部分etcd集群的数据都是很小的，可以考虑每个小时备份一次，只需要从一个节点进行备份即可，不需要每个节点都进行备份。数据恢复是指通过现有的快照数据，重新建立集群，备份和恢复的方式可以参考 1.4. 集群灾难恢复。</p><h3>原文来自：运维渡渡鸟</h3>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins基于k8s容器化构建Pipline</title>
    <link href="/2025/03/19/Jenkins%E5%9F%BA%E4%BA%8Ek8s%E5%AE%B9%E5%99%A8%E5%8C%96%E6%9E%84%E5%BB%BAPipline/"/>
    <url>/2025/03/19/Jenkins%E5%9F%BA%E4%BA%8Ek8s%E5%AE%B9%E5%99%A8%E5%8C%96%E6%9E%84%E5%BB%BAPipline/</url>
    
    <content type="html"><![CDATA[<p>jenkins使用kubernetes插件可以实现，动态创建流水线相关的任务Pod在流水线执行结束后会删除相应的任务Pod以达到资源的释放。</p><p><strong>具体kubernetes的agent使用详解</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span> <br>      cloud &#x27;kubernetes&#x27;  <span class="hljs-comment">//这里需要指定相关jenkins中创建的kubernetes对接信息的名称</span><br>      slaveConnectTimeout <span class="hljs-number">1200</span>  <span class="hljs-comment">//超时配置</span><br>      workspaceVolume emptyDirWorkspaceVolume()  <span class="hljs-comment">//jenkins的工作目录，必须设置起到一个Pod中不同container的目录共享jenkins工作目录</span><br>      yaml &#x27;&#x27;&#x27;  <span class="hljs-comment">//这里以下都是Pod定义信息</span><br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span> <br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp        <span class="hljs-comment">//jnlp容器是必须的他负责连接jenkins，这里保持默认使用即可</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br><span class="hljs-comment">//以下容器为具体的工作容器，所有流水线中的任何阶段的任务都在容器中执行，可以定义多个在流水线中指定任务使用那个容器进行执行</span><br>  - command<span class="hljs-punctuation">:</span>   <span class="hljs-comment">//所有容器推荐使用cat命令保证容器在启动后保持运行不退出   </span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//保持tty，起到容器不退出</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/bash/alpine:latest&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo&quot;</span>  <span class="hljs-comment">//container的名称</span><br>  restartPolicy<span class="hljs-punctuation">:</span> Never<br><span class="hljs-comment">// 在k8s上的节点上打上label，这里的nodeselector就是选择打了对应标签的node</span><br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//这里为流水线定义</span><br>    stage(&#x27;echo&#x27;) <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">//stage名称</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;echo&#x27;) <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">//这里定义这个步骤使用那个container进行执行，指定container的名称</span><br>          sh <span class="hljs-string">&quot;echo hello word&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="1-1-相关镜像准备"><a href="#1-1-相关镜像准备" class="headerlink" title="1.1 相关镜像准备"></a>1.1 相关镜像准备</h2><p>有些镜像需自己准备，如docker镜像用于构建docker镜像，kubectl镜像用于连接k8s进行服务更新。其余镜像使用官方镜像即可，但是前提是必须要有一个jnlp的镜像，用于连接jenkins的master。</p><h3 id="1-docker镜像"><a href="#1-docker镜像" class="headerlink" title="1.docker镜像"></a>1.docker镜像</h3><p><strong>镜像构建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#直接使用alpine镜像拷贝docker二进制执行文件到容器即可</span><br>[17:38:58 root@nexus docker]#<span class="hljs-built_in">cat</span> Dockerfile <br>FROM 192.168.10.254:5000/bash/alpine:latest<br>COPY docker /usr/bin/<br><span class="hljs-comment">#构建</span><br>docker build -t 192.168.10.254:5000/kubernetes/docker:alpine .<br></code></pre></td></tr></table></figure><p><strong>jenkins中验证</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span> <br>      cloud &#x27;kubernetes&#x27;  <br>      slaveConnectTimeout <span class="hljs-number">1200</span> <br>      workspaceVolume emptyDirWorkspaceVolume()   <span class="hljs-comment">//  相当于k8s卷当中的emptdir()</span><br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span> <br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp  <br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.15/kubernetes/docker:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-comment">// 将本地的docker.sock映射到容器当中，容器当中就能使用docker相关的命令，相当于是操作宿主机本地的docker，构建好的镜像也是本地的。</span><br>    volumeMounts<span class="hljs-punctuation">:</span><br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>      name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>      readOnly<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  volumes<span class="hljs-punctuation">:</span>   <br>  #注意docker容器必须被调度到存在docker的k8s节点，并且挂载主机的docker.sock文件到容器<br>  - hostPath<span class="hljs-punctuation">:</span><br>      path<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>  restartPolicy<span class="hljs-punctuation">:</span> Never <br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    stage(&#x27;docker info&#x27;) <span class="hljs-punctuation">&#123;</span>   <br>      steps <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 使用k8s 当中的docker 镜像容器进行操作</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;docker&#x27;) <span class="hljs-punctuation">&#123;</span>  <br>          sh <span class="hljs-string">&quot;docker info&quot;</span>    <span class="hljs-comment">//执行docker info有正常输出即可</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-kubectl镜像"><a href="#2-kubectl镜像" class="headerlink" title="2.kubectl镜像"></a>2.kubectl镜像</h3><p><strong>镜像构建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[17:46:21 root@nexus kubectl]#<span class="hljs-built_in">cat</span> Dockerfile <br>FROM 192.168.10.254:5000/bash/alpine:latest<br><span class="hljs-comment"># 这里复制的是一个kubelet的二进制文件，配合kubeconfig进行使用</span><br>COPY kubectl /usr/bin/<br><span class="hljs-comment">#构建</span><br>[17:46:01 root@nexus kubectl]#docker build -t 192.168.10.254:5000/kubernetes/kubectl:alpine .<br></code></pre></td></tr></table></figure><p><strong>使用验证</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span> <br>      cloud &#x27;kubernetes&#x27;  <span class="hljs-comment">//这里需要指定相关jenkins中创建的kubernetes对接信息的名称</span><br>      slaveConnectTimeout <span class="hljs-number">1200</span>  <span class="hljs-comment">//超时配置</span><br>      workspaceVolume emptyDirWorkspaceVolume()  <span class="hljs-comment">//jenkins的工作目录，必须设置起到一个Pod中不同container的目录共享jenkins工作目录</span><br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span> <br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp  <br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  restartPolicy<span class="hljs-punctuation">:</span> Never <br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//这里为流水线定义</span><br>    stage(&#x27;kubectl get&#x27;) <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">//stage名称</span><br>      <span class="hljs-comment">// 使用credentials加载kubeconfig配置文件</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;) <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">//这里定义这个步骤使用那个container进行执行，指定container的名称</span><br>          sh <span class="hljs-string">&quot;kubectl get pod -A --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="二、自动化构建-Java-应用"><a href="#二、自动化构建-Java-应用" class="headerlink" title="二、自动化构建 Java 应用"></a>二、自动化构建 Java 应用</h1><h2 id="1-流水线结构"><a href="#1-流水线结构" class="headerlink" title="1.流水线结构"></a>1.流水线结构</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/460127944.png" alt="48616-wxdhj40oko.png"><br>注意这里的Jenkinsfile与Dockerfile文件都存放在git仓库中。java应用会使用mvn进行打包，mvn会下载一系列依赖的包，默认会下载到mvn容器的**&#x2F;root&#x2F;.m2**目录最好使用volume进行持久化。</p><h2 id="2-需要克隆开源代码到自己gitlab仓库"><a href="#2-需要克隆开源代码到自己gitlab仓库" class="headerlink" title="2.需要克隆开源代码到自己gitlab仓库"></a>2.需要克隆开源代码到自己gitlab仓库</h2><p>仓库地址：<a href="https://github.com/AdlerED/bolo-solo">https://github.com/AdlerED/bolo-solo</a><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3433033418.png" alt="68302-21ztfgmuost.png"></p><h2 id="3-Jenkinsfile文件"><a href="#3-Jenkinsfile文件" class="headerlink" title="3.Jenkinsfile文件"></a>3.Jenkinsfile文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//顶层环境变量设置</span><br>  environment <span class="hljs-punctuation">&#123;</span><br>    namespace = <span class="hljs-string">&quot;bolo&quot;</span>                     <span class="hljs-comment">//服务部署在那个namespace中</span><br>    registries = <span class="hljs-string">&quot;192.168.10.15/bolo&quot;</span>      <span class="hljs-comment">//生成镜像存放镜像的仓库地址</span><br>    GIT = <span class="hljs-string">&quot;git@192.168.10.14:kubernetes/bolo-solo.git&quot;</span>  <span class="hljs-comment">//代码仓库地址</span><br>    TAG = <span class="hljs-string">&quot;&quot;</span>                               <span class="hljs-comment">//镜像tag,会在下面生成,这里只是定义全局变量</span><br>    NANE = <span class="hljs-string">&quot;&quot;</span>                              <span class="hljs-comment">//jenkins项目名称,会在下面生成,这里只是定义全局变量</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//全局配置</span><br>  options <span class="hljs-punctuation">&#123;</span><br>    timestamps()                     <span class="hljs-comment">//所有输出每行都会打印时间戳</span><br>    buildDiscarder(logRotator(numToKeepStr<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">5</span>&#x27;))  <span class="hljs-comment">//保留5个历史构建版本</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//手动构建时选择分支参数</span><br>  parameters <span class="hljs-punctuation">&#123;</span> <br>    gitParameter(branch<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> branchFilter<span class="hljs-punctuation">:</span> &#x27;origin/(.*)&#x27;<span class="hljs-punctuation">,</span> defaultValue<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> description<span class="hljs-punctuation">:</span> &#x27;Branch for build and deploy&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;BRANCH&#x27;<span class="hljs-punctuation">,</span> quickFilterEnabled<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> selectedValue<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span> sortMode<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span>  tagFilter<span class="hljs-punctuation">:</span> &#x27;*&#x27;<span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> &#x27;PT_BRANCH&#x27;)<br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//agent配置</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span><br>      cloud &#x27;kubernetes&#x27;<br>      slaveConnectTimeout <span class="hljs-number">1200</span><br>      workspaceVolume emptyDirWorkspaceVolume()   <span class="hljs-comment">//这里使用临时目录共享jenkins的工作目录默认路径为/home/jenkins/agent</span><br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span><br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.254</span><span class="hljs-punctuation">:</span><span class="hljs-number">5000</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp    #这个容器必须有，保持默认即可<br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/maven:3.8.5-openjdk-8-slim&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maven&quot;</span>  #maven打包镜像<br>    volumeMounts<span class="hljs-punctuation">:</span>  #持久化依赖包，重复构建不会进行重复下载 <br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/root/.m2&quot;</span>  <br>      name<span class="hljs-punctuation">:</span> mvn-data<br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/docker:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span>  #docker容器需要挂载docker.sock文件，需要调度到有docker的node节点<br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    volumeMounts<span class="hljs-punctuation">:</span><br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>      name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>      readOnly<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:apline&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span>  #kubectl镜像<br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  volumes<span class="hljs-punctuation">:</span>          <br>  - name<span class="hljs-punctuation">:</span> mvn-data<br>    # 绑定已有的pvc用于加速maven的文件下载，相当于是maven的缓存<br>    persistentVolumeClaim<span class="hljs-punctuation">:</span>  <br>      claimName<span class="hljs-punctuation">:</span> mvn <br>  - hostPath<span class="hljs-punctuation">:</span><br>      path<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span>  <br>  restartPolicy<span class="hljs-punctuation">:</span> Never<br>  nodeSelector<span class="hljs-punctuation">:</span>   #这里需要给有docker的node节点打标签调度Pod到这个节点<br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//克隆代码</span><br>    stage(&#x27;git clone&#x27;) <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">//并行执行</span><br>      failFast <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//并行执行的分支只要有一个失败立即结束流水线</span><br>      parallel <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//手动执行jenkins流水线</span><br>        stage(&#x27;git clone by Jenkins&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>             <span class="hljs-comment">// when表达式，当中环境变量当中的gitbranch为null的时候执行下面的steps</span><br>              env.gitlabBranch == <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-comment">// 在parameters 当中指定了对应的branch，使用gitlab-key的拉取凭证。</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;BRANCH&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// returnStdout 返回标准输出，也就是执行结果 echo -n 表示不换行</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;BRANCH&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//gitlab触发构建</span><br>        stage(&#x27;git clone trigger&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-comment">// 如果在构建的时候给定了branch的构建参数</span><br>              env.gitlabBranch != <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;env.gitlabBranch&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.gitlabBranch&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//初始化项目名称，项目名称用于docker镜像名称,不能有大写字母,转义</span><br>        stage(&#x27;init env&#x27;) <span class="hljs-punctuation">&#123;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// 对编译的job名称进行小写</span><br>              NAME = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.JOB_NAME&#125;&quot;</span>).toLowerCase()<br>            <span class="hljs-punctuation">&#125;</span><br>            sh <span class="hljs-string">&quot;echo $&#123;NAME&#125;&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-comment">//打包java程序</span><br>    stage(&#x27;mvn build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;maven&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;mvn package -DskipTests -Pci&quot;</span><br>          sh <span class="hljs-string">&quot;ls -l&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-comment">//构建镜像并且推送镜像仓库</span><br>    stage(&#x27;docker build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        HARBOR_USER = credentials(&#x27;harbor-account&#x27;)  <span class="hljs-comment">//获取镜像仓库认证信息</span><br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 本步是使用了上面agent当中初始化好的docker镜像</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;docker&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;docker login -u $&#123;HARBOR_USER_USR&#125; -p $&#123;HARBOR_USER_PSW&#125; $&#123;registries&#125;&quot;</span><br>            <span class="hljs-comment">// 这里的build 要基于下面的dockerfile进行构建</span><br>          sh <span class="hljs-string">&quot;docker build -t $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; .&quot;</span><br>          sh <span class="hljs-string">&quot;docker push $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-comment">//更新k8s相关应用</span><br>    stage(&#x27;update deploy&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 加载kubeconfig到环境变量当中</span><br>        MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;) <span class="hljs-punctuation">&#123;</span><br>           <span class="hljs-comment">// 这里的部署是使用deploy先部署好的，然后进行镜像更新，实现自动构建部署，deploy 文件内容在下面</span><br>          sh <span class="hljs-string">&quot;kubectl get deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          <span class="hljs-comment">// 指定使用新的镜像进行更新</span><br>          sh <span class="hljs-string">&quot;kubectl set image deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; $&#123;NAME&#125;=$&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>           <span class="hljs-comment">// 重新启动deployment，让deploy控制器控制的pod加载新打包的镜像。</span><br>          sh <span class="hljs-string">&quot;kubectl rollout status deployment -n $&#123;namespace&#125; $&#123;NAME&#125; --timeout=60s --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-Dockerfile文件"><a href="#4-Dockerfile文件" class="headerlink" title="4.Dockerfile文件"></a>4.Dockerfile文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM 192.168.10.254:5000/kubernetes/openjdk:8-alpine<br>WORKDIR /opt/bolo/<br>COPY target/bolo /opt/bolo<br>COPY src/main/resources/docker /opt/bolo/WEB-INF/classes/<br>ENV TZ=Asia/Shanghai<br>EXPOSE 8080<br>ENTRYPOINT [ <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-cp&quot;</span>, <span class="hljs-string">&quot;WEB-INF/lib/*:WEB-INF/classes&quot;</span>, <span class="hljs-string">&quot;org.b3log.solo.Starter&quot;</span> ]<br></code></pre></td></tr></table></figure><h2 id="5-创建流水线"><a href="#5-创建流水线" class="headerlink" title="5.创建流水线"></a>5.创建流水线</h2><p><strong>创建流水线</strong><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3840925103.png" alt="35816-khesyz80aa.png"><br>进行配置<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/1296180031.png" alt="05790-0xcztgh1phkq.png"><br><strong>第一次需进行构建读取jenkinsfile文件，会报错</strong></p><h2 id="6-部署应用进行测试"><a href="#6-部署应用进行测试" class="headerlink" title="6.部署应用进行测试"></a>6.部署应用进行测试</h2><p><strong>部署相关应用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: apps/v1 <br>kind: Deployment    <br>metadata:           <br>  name: bolo      <br>  namespace: bolo<br>  labels:<br>    image: bolo   <span class="hljs-comment">#jenkinsfile中更新我使用lable进行筛选，这里必须设置</span><br>spec:              <br>  replicas: 1  <br>  selector:<br>    matchLabels:     <br>      app: bolo   <br>  template:          <br>    metadata:<br>      creationTimestamp: null<br>      labels:<br>        app: bolo<br>    spec:<br>      containers:<br>      - name: bolo<br>        image: 192.168.10.15/bolo/bolo:jenkins-bolo-23 <br>        args:<br>        - --listen_port=8080 <br>        - --server_scheme=http <br>        - --server_host=192.168.10.13<br>        ports:  <br>        - name: http    <br>          containerPort: 8080    <br>          protocol: TCP <br>        <span class="hljs-built_in">env</span>:    <span class="hljs-comment">#这里如果要正常使用需部署mysql数据库</span><br>        - name: RUNTIME_DB     <br>          value: <span class="hljs-string">&quot;MYSQL&quot;</span><br>        - name: JDBC_DRIVER<br>          value: <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><br>        - name: JDBC_URL<br>          value: <span class="hljs-string">&quot;jdbc:mysql://mysql:3306/bolo?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true&quot;</span><br>        - name: JDBC_USERNAME<br>          value: <span class="hljs-string">&quot;bolo&quot;</span><br>        - name: JDBC_PASSWORD<br>          value: <span class="hljs-string">&quot;123456&quot;</span><br>---<br>apiVersion: v1     <br>kind: Service      <br>metadata:          <br>  name: bolo    <br>  namespace: bolo  <br>spec:              <br>  ports:           <br>  - name: mysql   <br>    port: 8080      <br>    protocol: TCP  <br>    targetPort: http <br>  selector:        <br>    app: bolo   <br>  <span class="hljs-built_in">type</span>: ClusterIP<br></code></pre></td></tr></table></figure><p><strong>测试手动执行流水线</strong><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3212630026.png" alt="05602-zftwmqilwed.png"></p><h1 id="三、自动化构建-Vue-H5-前端应用"><a href="#三、自动化构建-Vue-H5-前端应用" class="headerlink" title="三、自动化构建 Vue&#x2F;H5 前端应用"></a>三、自动化构建 Vue&#x2F;H5 前端应用</h1><h2 id="1-流水线结构-1"><a href="#1-流水线结构-1" class="headerlink" title="1.流水线结构"></a>1.流水线结构</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/2097081703.png" alt="42342-e9ltpyddna5.png"><br>注意这里的Jenkinsfile与Dockerfile文件都存放在git仓库中。Vue应用会使用npm进行打包，npm会下载一系列依赖的包，默认会下载到npm容器的运行npm的目录<strong>node_modules</strong>中所以为了重复构建不进行重复下载需要持久化，这里推荐直接持久化jenkins工作目录即可。</p><h2 id="2-需要克隆开源代码到自己gitlab仓库-1"><a href="#2-需要克隆开源代码到自己gitlab仓库-1" class="headerlink" title="2.需要克隆开源代码到自己gitlab仓库"></a>2.需要克隆开源代码到自己gitlab仓库</h2><p>源码仓库：<a href="https://github.com/SD-Gaming/Vue3-Todo-List-AddName">https://github.com/SD-Gaming/Vue3-Todo-List-AddName</a></p><h2 id="3-Jenkinsfile文件-1"><a href="#3-Jenkinsfile文件-1" class="headerlink" title="3.Jenkinsfile文件"></a>3.Jenkinsfile文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//顶层环境变量设置</span><br>  environment <span class="hljs-punctuation">&#123;</span><br>    namespace = <span class="hljs-string">&quot;bolo&quot;</span>                      <span class="hljs-comment">//服务部署在那个namespace中</span><br>    registries = <span class="hljs-string">&quot;192.168.10.15/vue&quot;</span>        <span class="hljs-comment">//镜像仓库地址</span><br>    GIT = <span class="hljs-string">&quot;git@192.168.10.14:root/Vue3-Todo-List-AddName.git&quot;</span>  <span class="hljs-comment">//代码仓库地址</span><br>    TAG = <span class="hljs-string">&quot;&quot;</span>                               <span class="hljs-comment">//镜像tag,会在下面生成,这里只是定义全局变量</span><br>    NANE = <span class="hljs-string">&quot;&quot;</span>                              <span class="hljs-comment">//jenkins项目名称,会在下面生成,这里只是定义全局变量</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//全局配置</span><br>  options <span class="hljs-punctuation">&#123;</span><br>    timestamps()                     <span class="hljs-comment">//所有输出每行都会打印时间戳</span><br>    buildDiscarder(logRotator(numToKeepStr<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">5</span>&#x27;))  <span class="hljs-comment">//保留5个历史构建版本</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//手动构建时选择分支参数</span><br>  parameters <span class="hljs-punctuation">&#123;</span> <br>    gitParameter(branch<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> branchFilter<span class="hljs-punctuation">:</span> &#x27;origin/(.*)&#x27;<span class="hljs-punctuation">,</span> defaultValue<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> description<span class="hljs-punctuation">:</span> &#x27;Branch for build and deploy&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;BRANCH&#x27;<span class="hljs-punctuation">,</span> quickFilterEnabled<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> selectedValue<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span> sortMode<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span>  tagFilter<span class="hljs-punctuation">:</span> &#x27;*&#x27;<span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> &#x27;PT_BRANCH&#x27;)<br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//agent配置</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span><br>      cloud &#x27;kubernetes&#x27;<br>      slaveConnectTimeout <span class="hljs-number">1200</span><br>      workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm-data&quot;</span><span class="hljs-punctuation">,</span> mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><span class="hljs-punctuation">,</span> readOnly<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span>)<br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span><br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.254</span><span class="hljs-punctuation">:</span><span class="hljs-number">5000</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp<br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/node:latest&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodejs&quot;</span> <br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/docker:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    volumeMounts<span class="hljs-punctuation">:</span><br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>      name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>      readOnly<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:apline&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  volumes<span class="hljs-punctuation">:</span>          <br>  - hostPath<span class="hljs-punctuation">:</span><br>      path<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span>  <br>  restartPolicy<span class="hljs-punctuation">:</span> Never<br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//克隆代码</span><br>    stage(&#x27;git clone&#x27;) <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">//并行执行</span><br>      failFast <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//并行执行的分支只要有一个失败立即结束流水线</span><br>      parallel <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//手动执行jenkins流水线</span><br>        stage(&#x27;git clone by Jenkins&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">//  手动构建的时候，在环境变量当中，branch为空，所以就走手动构建的部分</span><br>              env.gitlabBranch == <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;BRANCH&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-comment">// 标准输出构建tag信息</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;BRANCH&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//gitlab触发构建</span><br>        stage(&#x27;git clone trigger&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>              env.gitlabBranch != <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;env.gitlabBranch&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.gitlabBranch&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//初始化项目名称，项目名称用于docker镜像名称,不能有大写字母,转义</span><br>        stage(&#x27;init env&#x27;) <span class="hljs-punctuation">&#123;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              NAME = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.JOB_NAME&#125;&quot;</span>).toLowerCase()<br>            <span class="hljs-punctuation">&#125;</span><br>            sh <span class="hljs-string">&quot;echo $&#123;NAME&#125;&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;npm build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 在nodejs 容器内</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;nodejs&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;npm install --registry=https://registry.npm.taobao.org&quot;</span><br>          sh <span class="hljs-string">&quot;npm run build&quot;</span><br>          sh <span class="hljs-string">&quot;ls -l&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;docker build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        HARBOR_USER = credentials(&#x27;harbor-account&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;docker&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;docker login -u $&#123;HARBOR_USER_USR&#125; -p $&#123;HARBOR_USER_PSW&#125; $&#123;registries&#125;&quot;</span><br>          sh <span class="hljs-string">&quot;docker build -t $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; .&quot;</span><br>          sh <span class="hljs-string">&quot;docker push $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;update deploy&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh  <span class="hljs-string">&quot;kubectl get deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          sh  <span class="hljs-string">&quot;kubectl set image deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; $&#123;NAME&#125;=$&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          sh  <span class="hljs-string">&quot;kubectl rollout status deployment -n $&#123;namespace&#125; $&#123;NAME&#125; --timeout=60s --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-Dockerfile文件-1"><a href="#4-Dockerfile文件-1" class="headerlink" title="4.Dockerfile文件"></a>4.Dockerfile文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM 192.168.10.254:5000/bash/nginx:latest<br>WORKDIR /usr/share/nginx/html/<br>COPY dist/ /usr/share/nginx/html/<br>ENV TZ=Asia/Shanghai<br>EXPOSE 80<br></code></pre></td></tr></table></figure><h2 id="5-创建流水线-1"><a href="#5-创建流水线-1" class="headerlink" title="5.创建流水线"></a>5.创建流水线</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/1051577822.png" alt="57168-zkvjh6cmzl.png"></p><h2 id="6-部署应用进行测试-1"><a href="#6-部署应用进行测试-1" class="headerlink" title="6.部署应用进行测试"></a>6.部署应用进行测试</h2><p><strong>部署应用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>    <br><span class="hljs-attr">metadata:</span>           <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">vue</span>      <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bolo</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">vue</span>  <span class="hljs-comment">#这里必须定义为镜像名称</span><br><span class="hljs-attr">spec:</span>              <br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>        <br>  <span class="hljs-attr">selector:</span>         <br>    <span class="hljs-attr">matchLabels:</span>    <br>      <span class="hljs-attr">app:</span> <span class="hljs-string">vue</span> <br>  <span class="hljs-attr">template:</span>          <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">vue</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vue</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span><span class="hljs-string">/vue/vuevue3-addname:main-6</span><br>        <span class="hljs-attr">ports:</span>  <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span>    <br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span>    <br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>     <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span>     <br><span class="hljs-attr">metadata:</span>         <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">vue</span>   <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bolo</span>  <br><span class="hljs-attr">spec:</span>              <br>  <span class="hljs-attr">ports:</span>          <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vue</span>    <br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>       <br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span>  <br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span>     <br>    <span class="hljs-attr">app:</span> <span class="hljs-string">vue</span>   <br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><p><strong>测试流水线</strong><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3834379080.png" alt="61641-b97abzj01ir.png"></p><h1 id="四、自动化构建-Golang-项目"><a href="#四、自动化构建-Golang-项目" class="headerlink" title="四、自动化构建 Golang 项目"></a>四、自动化构建 Golang 项目</h1><h2 id="1-流水线结构-2"><a href="#1-流水线结构-2" class="headerlink" title="1.流水线结构"></a>1.流水线结构</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/949935775.png" alt="48032-5u3ropw0if.png"><br>注意这里的Jenkinsfile与Dockerfile文件都存放在git仓库中。go应用会使用<code>go build</code>进行编译，会下载一系列依赖的包，默认会下载到容器的**&#x2F;opt&#x2F;pkg**目录中所以为了重复构建不进行重复下载需要持久化。</p><h2 id="2-需要克隆开源代码到自己gitlab仓库-2"><a href="#2-需要克隆开源代码到自己gitlab仓库-2" class="headerlink" title="2.需要克隆开源代码到自己gitlab仓库"></a>2.需要克隆开源代码到自己gitlab仓库</h2><p>源码仓库：<a href="https://gitee.com/dukuan/go-project.git">https://gitee.com/dukuan/go-project.git</a></p><h2 id="3-Jenkinsfile文件-2"><a href="#3-Jenkinsfile文件-2" class="headerlink" title="3.Jenkinsfile文件"></a>3.Jenkinsfile文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//顶层环境变量设置</span><br>  environment <span class="hljs-punctuation">&#123;</span><br>    namespace = <span class="hljs-string">&quot;bolo&quot;</span>                      <span class="hljs-comment">//服务部署在那个namespace中</span><br>    registries = <span class="hljs-string">&quot;192.168.10.15/go&quot;</span>         <span class="hljs-comment">//镜像仓库地址</span><br>    GIT = <span class="hljs-string">&quot;git@192.168.10.14:root/go-project.git&quot;</span>  <span class="hljs-comment">//代码仓库地址</span><br>    TAG = <span class="hljs-string">&quot;&quot;</span>                               <span class="hljs-comment">//镜像tag,会在下面生成,这里只是定义全局变量</span><br>    NANE = <span class="hljs-string">&quot;&quot;</span>                              <span class="hljs-comment">//jenkins项目名称,会在下面生成,这里只是定义全局变量</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//全局配置</span><br>  options <span class="hljs-punctuation">&#123;</span><br>    timestamps()                     <span class="hljs-comment">//所有输出每行都会打印时间戳</span><br>    buildDiscarder(logRotator(numToKeepStr<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">5</span>&#x27;))  <span class="hljs-comment">//保留5个历史构建版本</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//手动构建时选择分支参数</span><br>  parameters <span class="hljs-punctuation">&#123;</span> <br>    gitParameter(branch<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> branchFilter<span class="hljs-punctuation">:</span> &#x27;origin/(.*)&#x27;<span class="hljs-punctuation">,</span> defaultValue<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> description<span class="hljs-punctuation">:</span> &#x27;Branch for build and deploy&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;BRANCH&#x27;<span class="hljs-punctuation">,</span> quickFilterEnabled<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> selectedValue<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span> sortMode<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span>  tagFilter<span class="hljs-punctuation">:</span> &#x27;*&#x27;<span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> &#x27;PT_BRANCH&#x27;)<br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//agent配置</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span><br>      cloud &#x27;kubernetes&#x27;<br>      slaveConnectTimeout <span class="hljs-number">1200</span><br>      workspaceVolume emptyDirWorkspaceVolume()<br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span><br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.254</span><span class="hljs-punctuation">:</span><span class="hljs-number">5000</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp<br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/golang:1.18.3&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go&quot;</span><br>    # 对应go的依赖<br>    volumeMounts<span class="hljs-punctuation">:</span> <br>     # go 容器内的路径<br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/go/pkg&quot;</span><br>      name<span class="hljs-punctuation">:</span> go-pkg-data<br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/docker:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    volumeMounts<span class="hljs-punctuation">:</span><br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>      name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>      readOnly<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:apline&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  volumes<span class="hljs-punctuation">:</span>          <br>  - name<span class="hljs-punctuation">:</span> go-pkg-data    <br>    persistentVolumeClaim<span class="hljs-punctuation">:</span>  <br>      claimName<span class="hljs-punctuation">:</span> go <br>  - hostPath<span class="hljs-punctuation">:</span><br>      path<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span>  <br>  restartPolicy<span class="hljs-punctuation">:</span> Never<br> # 把创建的容器调度到有标签build<span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span>的节点上<br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//克隆代码</span><br>    stage(&#x27;git clone&#x27;) <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">//并行执行</span><br>      failFast <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//并行执行的分支只要有一个失败立即结束流水线</span><br>      parallel <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//手动执行jenkins流水线</span><br>        stage(&#x27;git clone by Jenkins&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>              env.gitlabBranch == <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;BRANCH&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;BRANCH&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//gitlab触发构建</span><br>        stage(&#x27;git clone trigger&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>              env.gitlabBranch != <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;env.gitlabBranch&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.gitlabBranch&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//初始化项目名称，项目名称用于docker镜像名称,不能有大写字母,转义</span><br>        stage(&#x27;init env&#x27;) <span class="hljs-punctuation">&#123;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              NAME = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.JOB_NAME&#125;&quot;</span>).toLowerCase()<br>            <span class="hljs-punctuation">&#125;</span><br>            sh <span class="hljs-string">&quot;echo $&#123;NAME&#125;&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;go&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;export GO111MODULE=on&quot;</span><br>          sh <span class="hljs-string">&quot;go env -w GOPROXY=https://goproxy.cn,direct&quot;</span><br>          sh <span class="hljs-string">&quot;go mod tidy&quot;</span><br>          sh <span class="hljs-string">&quot;go build&quot;</span><br>          sh <span class="hljs-string">&quot;ls -l&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;docker build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        HARBOR_USER = credentials(&#x27;harbor-account&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;docker&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;docker login -u $&#123;HARBOR_USER_USR&#125; -p $&#123;HARBOR_USER_PSW&#125; $&#123;registries&#125;&quot;</span><br>          sh <span class="hljs-string">&quot;docker build -t $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; .&quot;</span><br>          sh <span class="hljs-string">&quot;docker push $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;update deploy&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh  <span class="hljs-string">&quot;kubectl get deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          sh  <span class="hljs-string">&quot;kubectl set image deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; $&#123;NAME&#125;=$&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          sh  <span class="hljs-string">&quot;kubectl rollout status deployment -n $&#123;namespace&#125; $&#123;NAME&#125; --timeout=60s --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-Dockerfile文件-2"><a href="#4-Dockerfile文件-2" class="headerlink" title="4.Dockerfile文件"></a>4.Dockerfile文件</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">10.254</span>:<span class="hljs-number">5000</span>/bash/alpine-glibc:glibc-<span class="hljs-number">2.35</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/workdir/</span><br><span class="hljs-comment"># go-project是jenkins的workspace的名称</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go-project /opt/workdir/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> conf/ /opt/workdir/conf/</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;./go-project&quot;</span>]</span><br></code></pre></td></tr></table></figure><h2 id="5-创建流水线-2"><a href="#5-创建流水线-2" class="headerlink" title="5.创建流水线"></a>5.创建流水线</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/137688574.png" alt="30345-r0khvp1vc9s.png"></p><h2 id="6-部署应用测试"><a href="#6-部署应用测试" class="headerlink" title="6.部署应用测试"></a>6.部署应用测试</h2><p><strong>部署应用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>    <br><span class="hljs-attr">metadata:</span>           <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">go-project</span>      <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bolo</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">go-project</span>  <span class="hljs-comment">#这里使用lable匹配更新，必须设置这个，因为在jenkinsfile当中写了过去指定标签的pod</span><br><span class="hljs-attr">spec:</span>              <br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>        <br>  <span class="hljs-attr">selector:</span>          <br>    <span class="hljs-attr">matchLabels:</span>     <br>      <span class="hljs-attr">app:</span> <span class="hljs-string">go-project</span>   <br>  <span class="hljs-attr">template:</span>         <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">go-project</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">go-project</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span><span class="hljs-string">/vue/vuevue3-addname:main-6</span><br>        <span class="hljs-attr">ports:</span>  <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span>    <br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span>     <br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>    <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span>    <br><span class="hljs-attr">metadata:</span>         <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">go-project</span>   <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bolo</span> <br><span class="hljs-attr">spec:</span>              <br>  <span class="hljs-attr">ports:</span>           <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">go-project</span>    <br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span>     <br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span> <br>  <span class="hljs-attr">selector:</span>       <br>    <span class="hljs-attr">app:</span> <span class="hljs-string">go-project</span>  <br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><p><strong>测试流水线</strong><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/2773957435.png" alt="81806-cokov9c86p.png"></p><h1 id="五、配置自动触发构建"><a href="#五、配置自动触发构建" class="headerlink" title="五、配置自动触发构建"></a>五、配置自动触发构建</h1><p>之前的构建都是采用手动选择分支进行构建的，实际使用时，项目可能有很多，如果都是手动触发可能比较消耗人力。所以推荐可以按需配置自动触发，即提交代码后自动触发Jenkins进行构建任务。</p><h2 id="5-1-配置jenkins"><a href="#5-1-配置jenkins" class="headerlink" title="5.1 配置jenkins"></a>5.1 配置jenkins</h2><p>本次用 Java 项目进行演示。首先找到 Java 项目的 Job，点击 Configure</p><p>之后选择 Build Triggers，勾选 Build when a change…，记录 webhook URL（新版本[Version 2.452.2]的jenkins汉化后的选项是[<strong>触发远程构建 (例如,使用脚本)</strong>]）</p><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/2041871866.png" alt="32956-sahjntuh73j.png"><br>选择 Allow all branches，如果不想任何分支都可以触发该流水线，可以选择 Filter 进行条件匹配。之后点击 Generate 生成 Secret token， 最后点击 Save 即可。<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3812530265.png" alt="64313-z8clhrevg1k.png"></p><h2 id="5-2-配置gitlab"><a href="#5-2-配置gitlab" class="headerlink" title="5.2 配置gitlab"></a>5.2 配置gitlab</h2><p>接下来配置 GitLab，首先点击 Menu→Admin(这个设置是在总体设置里面，不是在单独的项目内)<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3476341503.png" alt="81636-mc5o7vwrnpp.png"><br>保存后，找到 <strong>Java 项目（在项目内进行设置）</strong>，点击 Settings→WebHooks（JENKINS_URL<code>/job/docker-pipline/build?token=</code>TOKEN_NAME粘贴在url内，下面的secret token就不用填写）<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/988653632.png" alt="70363-0mlvz2an5q2c.png"><br>确认无误后，点击 Add webhook</p><p>保存后没有问题可以进行测试</p><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/2849705660.png" alt="38054-vf8gly9k2el.png"><br>验证流水线是否触发执行<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/832594147.png" alt="36937-t4zeinnzjup.png"></p><h1 id="六、一次构建多次部署"><a href="#六、一次构建多次部署" class="headerlink" title="六、一次构建多次部署"></a>六、一次构建多次部署</h1><p>创建一个新的 Job，名字为 go-project-uat，类型 Pipeline</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  environment <span class="hljs-punctuation">&#123;</span><br>    HARBOR_ADDRESS = <span class="hljs-string">&quot;192.168.10.15&quot;</span>  <span class="hljs-comment">//镜像仓库地址</span><br>    NAMESPACE = <span class="hljs-string">&quot;bolo&quot;</span>                <span class="hljs-comment">//部署应用的命名空间</span><br>    IMAGE_NAME = <span class="hljs-string">&quot;go-project&quot;</span>         <span class="hljs-comment">//镜像名称</span><br>  <span class="hljs-punctuation">&#125;</span><br>  parameters <span class="hljs-punctuation">&#123;</span> <br>    imageTag(name<span class="hljs-punctuation">:</span> &#x27;DOCKER_IMAGE&#x27;<span class="hljs-punctuation">,</span> description<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> image<span class="hljs-punctuation">:</span> &#x27;go/go-project&#x27;<span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">:</span> &#x27;.*&#x27;<span class="hljs-punctuation">,</span> defaultTag<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> registry<span class="hljs-punctuation">:</span> &#x27;http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.10.15&#x27;, credentialId: &#x27;harbor-account&#x27;, tagOrder: &#x27;NATURAL&#x27;)   //获取镜像名称与tag，相关参数根据实际情况填写</span><br>  <span class="hljs-punctuation">&#125;</span>  <br>  <span class="hljs-comment">//全局配置</span><br>  options <span class="hljs-punctuation">&#123;</span><br>    timestamps()                     <span class="hljs-comment">//所有输出每行都会打印时间戳</span><br>    buildDiscarder(logRotator(numToKeepStr<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">5</span>&#x27;))  <span class="hljs-comment">//保留5个历史构建版本</span><br>  <span class="hljs-punctuation">&#125;</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span><br>      cloud &#x27;kubernetes&#x27;<br>      slaveConnectTimeout <span class="hljs-number">1200</span><br>      workspaceVolume emptyDirWorkspaceVolume()<br>      yaml &#x27;&#x27;&#x27;<br>apiVersion<span class="hljs-punctuation">:</span> v1<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span><br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.254</span><span class="hljs-punctuation">:</span><span class="hljs-number">5000</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp<br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:apline&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br> stages <span class="hljs-punctuation">&#123;</span><br>   stage(&#x27;Deploy&#x27;) <span class="hljs-punctuation">&#123;</span><br>     environment <span class="hljs-punctuation">&#123;</span><br>       MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>     <span class="hljs-punctuation">&#125;</span><br>     steps <span class="hljs-punctuation">&#123;</span><br>       container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;)<span class="hljs-punctuation">&#123;</span><br>         sh <span class="hljs-string">&quot;echo $&#123;DOCKER_IMAGE&#125;&quot;</span><br>         sh  <span class="hljs-string">&quot;kubectl get deploy -n $&#123;NAMESPACE&#125; -l image=$&#123;IMAGE_NAME&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>         sh  <span class="hljs-string">&quot;kubectl set image deploy -n $&#123;NAMESPACE&#125; -l image=$&#123;IMAGE_NAME&#125; $&#123;IMAGE_NAME&#125;=$&#123;HARBOR_ADDRESS&#125;/$&#123;DOCKER_IMAGE&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>         sh  <span class="hljs-string">&quot;kubectl rollout status deployment -n $&#123;NAMESPACE&#125; $&#123;IMAGE_NAME&#125; --timeout=60s --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>执行流水线<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3494418146.png" alt="33052-cgm561oyaqf.png"></p><p><strong>原文来自：<a href="https://zhangzhuo.ltd/articles/2022/06/05/1654424805227.html">zhangzhuo</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes1.24/1.25集群使用docker作为容器</title>
    <link href="/2025/03/19/Kubernetes1-24_1-25%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8docker%E4%BD%9C%E4%B8%BA%E5%AE%B9%E5%99%A8/"/>
    <url>/2025/03/19/Kubernetes1-24_1-25%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8docker%E4%BD%9C%E4%B8%BA%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在新版本Kubernetes环境（1.24以及以上版本）下官方不在支持docker作为容器运行时了，若要继续使用docker 需要对docker进行配置一番。需要安装cri-docker作为Kubernetes容器</p><h3 id="查看当前容器运行时"><a href="#查看当前容器运行时" class="headerlink" title="查看当前容器运行时"></a>查看当前容器运行时</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看指定节点容器运行时</span><br>kubectl  describe node k8s-node05  | grep Container<br>  Container Runtime Version:  containerd://1.6.8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有节点容器运行时</span><br>kubectl  describe node  | grep Container<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br></code></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">更新源信息</span><br>yum update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装必要软件</span><br>yum install -y yum-utils   device-mapper-persistent-data   lvm2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">写入docker源信息</span><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新源信息并进行安装</span><br>yum update<br>yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置加速器</span><br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://hub-mirror.c.163.com&quot;],<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="安装cri-docker"><a href="#安装cri-docker" class="headerlink" title="安装cri-docker"></a>安装cri-docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">由于1.24以及更高版本不支持docker所以安装cri-docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载cri-docker</span> <br>wget  https://mirrors.chenby.cn/https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.5/cri-dockerd-0.2.5.amd64.tgz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压cri-docker</span><br>tar xvf cri-dockerd-0.2.5.amd64.tgz <br>cp cri-dockerd/cri-dockerd  /usr/bin/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">写入启动配置文件</span><br>cat &gt;  /usr/lib/systemd/system/cri-docker.service &lt;&lt;EOF<br>[Unit]<br>Description=CRI Interface for Docker Application Container Engine<br>Documentation=https://docs.mirantis.com<br>After=network-online.target firewalld.service docker.service<br>Wants=network-online.target<br>Requires=cri-docker.socket<br><br>[Service]<br>Type=notify<br>ExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.7<br>ExecReload=/bin/kill -s HUP $MAINPID<br>TimeoutSec=0<br>RestartSec=2<br>Restart=always<br><br>StartLimitBurst=3<br><br>StartLimitInterval=60s<br><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br><br>TasksMax=infinity<br>Delegate=yes<br>KillMode=process<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">写入socket配置文件</span><br>cat &gt; /usr/lib/systemd/system/cri-docker.socket &lt;&lt;EOF<br>[Unit]<br>Description=CRI Docker Socket for the API<br>PartOf=cri-docker.service<br><br>[Socket]<br>ListenStream=%t/cri-dockerd.sock<br>SocketMode=0660<br>SocketUser=root<br>SocketGroup=docker<br><br>[Install]<br>WantedBy=sockets.target<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行启动cri-docker</span><br>systemctl daemon-reload ; systemctl enable cri-docker --now<br></code></pre></td></tr></table></figure><h3 id="为kubelet配置容器运行时"><a href="#为kubelet配置容器运行时" class="headerlink" title="为kubelet配置容器运行时"></a>为kubelet配置容器运行时</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.25 版本下 所有k8s节点配置kubelet service</span><br>cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF<br><br>[Unit]<br>Description=Kubernetes Kubelet<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=containerd.service<br>Requires=containerd.service<br><br>[Service]<br>ExecStart=/usr/local/bin/kubelet \\<br>    --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig  \\<br>    --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \\<br>    --config=/etc/kubernetes/kubelet-conf.yml \\<br>    --container-runtime-endpoint=unix:///run/cri-dockerd.sock  \\<br>    --node-labels=node.kubernetes.io/node=<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1.24 版本下 所有k8s节点配置kubelet service</span><br>cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF<br><br>[Unit]<br>Description=Kubernetes Kubelet<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=containerd.service<br>Requires=containerd.service<br><br>[Service]<br>ExecStart=/usr/local/bin/kubelet \\<br>    --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig  \\<br>    --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \\<br>    --config=/etc/kubernetes/kubelet-conf.yml \\<br>    --container-runtime=remote  \\<br>    --runtime-request-timeout=15m  \\<br>    --container-runtime-endpoint=unix:///run/cri-dockerd.sock  \\<br>    --cgroup-driver=systemd \\<br>    --node-labels=node.kubernetes.io/node= \\<br>    --feature-gates=IPv6DualStack=true<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启</span><br>systemctl daemon-reload<br>systemctl restart kubelet<br>systemctl enable --now kubelet<br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看指定节点容器运行时</span><br>kubectl  describe node k8s-node05  | grep Container<br>  Container Runtime Version:  docker://20.10.17<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有节点容器运行时</span><br>kubectl  describe node  | grep Container<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  docker://20.10.17<br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://www.oiox.cn/">https://www.oiox.cn/</a></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenELB部署及应用(分配LoadBalancer地址请求)</title>
    <link href="/2025/03/19/OpenELB%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%BA%94%E7%94%A8-%E5%88%86%E9%85%8DLoadBalancer%E5%9C%B0%E5%9D%80%E8%AF%B7%E6%B1%82/"/>
    <url>/2025/03/19/OpenELB%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%BA%94%E7%94%A8-%E5%88%86%E9%85%8DLoadBalancer%E5%9C%B0%E5%9D%80%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="一、OpenELB介绍"><a href="#一、OpenELB介绍" class="headerlink" title="一、OpenELB介绍"></a>一、OpenELB介绍</h2><blockquote><p>网址： openelb.io</p></blockquote><p>OpenELB 是一个开源的<a href="https://so.csdn.net/so/search?q=%E4%BA%91%E5%8E%9F%E7%94%9F&spm=1001.2101.3001.7020">云原生</a>负载均衡器实现，可以在基于裸金属服务器、边缘以及虚拟化的 Kubernetes 环境中使用 LoadBalancer 类型的 Service 对外暴露服务。OpenELB 项目最初由 KubeSphere 社区发起，目前已作为 CNCF 沙箱项目加入 CNCF 基金会，由 OpenELB 开源社区维护与支持。</p><p>与 MetalLB 类似，OpenELB 也拥有两种主要工作模式：Layer2 模式和 BGP 模式。OpenELB 的 BGP 模式目前暂不支持 IPv6。<br>无论是 Layer2 模式还是 BGP 模式，核心思路都是通过某种方式将特定 VIP 的流量引到 k8s 集群中，然后再通过 kube-proxy 将流量转发到后面的特定服务。</p><h3 id="1-1-Layer2-模式"><a href="#1-1-Layer2-模式" class="headerlink" title="1.1 Layer2 模式"></a>1.1 Layer2 模式</h3><blockquote><p>Layer2 模式需要我们的 k8s 集群基础环境支持发送 anonymous ARP&#x2F;NDP packets。因为 OpenELB 是针对裸金属服务器设计的，因此如果是在云环境中部署，需要注意是否满足条件。</p></blockquote><h3 id="1-2-BGP-模式"><a href="#1-2-BGP-模式" class="headerlink" title="1.2 BGP 模式"></a>1.2 BGP 模式</h3><p>OpenELB 的 BGP 模式使用的是gobgp实现的 BGP 协议，通过使用 BGP 协议和路由器建立 BGP 连接并实现 ECMP 负载均衡，从而实现高可用的 LoadBalancer。</p><h3 id="1-3-注意事项"><a href="#1-3-注意事项" class="headerlink" title="1.3 注意事项"></a>1.3 注意事项</h3><blockquote><p>配置 ARP 参数</p></blockquote><p>部署 Layer2 模式需要把 k8s 集群中的 ipvs 配置打开strictARP，<strong>开启之后 k8s 集群中的 <code>kube-proxy</code> 会停止响应 <code>kube-ipvs0</code> 网卡之外的其他网卡的 arp 请求，而由 OpenELB 接手处理（OpenELB和MetalLB处理方法类似）。</strong></p><p><code>strict ARP</code> 开启之后相当于把 将 <code>arp_ignore</code> 设置为 1 并将 <code>arp_announce</code> 设置为 2 启用严格的 ARP，这个原理和 LVS 中的 DR 模式对 RS 的配置一样。</p><h2 id="二、OpenELB安装及配置"><a href="#二、OpenELB安装及配置" class="headerlink" title="二、OpenELB安装及配置"></a>二、OpenELB安装及配置</h2><h3 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h3><ul><li><p>You need to prepare a Kubernetes cluster, and ensure that the Kubernetes version is 1.15 or later. OpenELB requires CustomResourceDefinition (CRD) v1, which is only supported by Kubernetes 1.15 or later. You can use the following methods to deploy a Kubernetes cluster（1.15之后的k8s集群）:</p></li><li><p>Use <a href="https://kubesphere.io/docs/installing-on-linux/">KubeKey</a> (recommended). You can use KubeKey to deploy a Kubernetes cluster with or without <a href="https://so.csdn.net/so/search?q=KubeSphere&spm=1001.2101.3001.7020">KubeSphere</a>（kubesphere部署的集群）.</p></li><li><p>Follow <a href="https://kubernetes.io/docs/home/">official Kubernetes guides</a>.</p></li></ul><p>OpenELB is designed to be used in bare-metal Kubernetes environments. However, you can also use a cloud-based Kubernetes cluster for learning and testing（除了裸金属服务器之外还可以是云服务器搭建的k8s节点）.</p><h3 id="2-2-Install-OpenELB-Using-kubectl"><a href="#2-2-Install-OpenELB-Using-kubectl" class="headerlink" title="2.2 Install OpenELB Using kubectl"></a>2.2 Install OpenELB Using kubectl</h3><p>可参照官网的安装方式来进行安装（选择不同的集群）：<a href="https://openelb.io/docs/getting-started/installation/">https://openelb.io/docs/getting-started/installation/</a></p><p>1.Log in to the Kubernetes cluster over SSH and run the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">旧版本</span><br>kubectl apply -f https://raw.githubusercontent.com/openelb/openelb/master/deploy/openelb.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新版本2024-08-27</span><br>wget https://raw.githubusercontent.com/openelb/openelb/release-0.6/deploy/openelb.yaml<br>kubectl apply -f openelb.yaml<br></code></pre></td></tr></table></figure><p>2.Run the following command to check whether the status of <code>openelb-manager</code> is <strong>READY</strong>: <strong>1&#x2F;1</strong> and <strong>STATUS</strong>: <strong>Running</strong>. If yes, OpenELB has been installed successfully.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 打开https://raw.githubusercontent.com/openelb/openelb/release-0.6/deploy/openelb.yaml 可以看到创建的资源都在openelb-system名称空间内，所以通过下面的语句查看创建的资源</span><br><span class="hljs-comment"># kubectl get pods -n openelb-system</span><br></code></pre></td></tr></table></figure><h3 id="2-2-OpenELB配置"><a href="#2-2-OpenELB配置" class="headerlink" title="2.2 OpenELB配置"></a>2.2 OpenELB配置</h3><blockquote><p>Use OpenELB in Layer 2 Mode（二层模式的使用）</p></blockquote><h4 id="2-2-1-需求"><a href="#2-2-1-需求" class="headerlink" title="2.2.1 需求"></a>2.2.1 需求</h4><ul><li>You need to <a href="https://openelb.io/docs/getting-started/installation/">prepare a Kubernetes cluster where OpenELB has been installed</a>. All Kubernetes cluster nodes must be on the same Layer 2 network (under the same router).</li><li>You need to prepare a client machine, which is used to verify whether OpenELB functions properly in Layer 2 mode. The client machine needs to be on the same network as the Kubernetes cluster nodes.</li><li>The Layer 2 mode requires your infrastructure environment to allow anonymous ARP&#x2F;NDP packets. If OpenELB is installed in a cloud-based Kubernetes cluster for testing, you need to confirm with your cloud vendor whether anonymous ARP&#x2F;NDP packets are allowed. If not, the Layer 2 mode cannot be used.</li></ul><h4 id="2-2-2-配置步骤"><a href="#2-2-2-配置步骤" class="headerlink" title="2.2.2 配置步骤"></a>2.2.2 配置步骤</h4><p><strong>Step 1: Enable strictARP for kube-proxy</strong></p><p>In Layer 2 mode, you need to enable strictARP for kube-proxy so that all NICs in the Kubernetes cluster stop answering ARP requests from other NICs and OpenELB handles ARP requests instead.</p><p>1.Log in to the Kubernetes cluster and run the following command to edit the kube-proxy ConfigMap:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl edit configmap kube-proxy -n kube-system</span><br></code></pre></td></tr></table></figure><p>2.In the kube-proxy ConfigMap YAML configuration, set <code>data.config.conf.ipvs.strictARP</code> to <code>true</code>.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ipvs:<br>  strictARP: true<br></code></pre></td></tr></table></figure><p>3.Run the following command to restart kube-proxy（重启kube-system名称空间当中的daemonset资源，让配置严格arp模式生效）:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl rollout restart daemonset kube-proxy -n kube-system</span><br></code></pre></td></tr></table></figure><p><strong>Step 2: Specify the NIC Used for OpenELB（如果是多网卡，那么可以指定出口）</strong></p><p>If the node where OpenELB is installed has multiple NICs, you need to specify the NIC used for OpenELB in Layer 2 mode. You can skip this step if the node has only one NIC.</p><p>In this example, the master1 node where OpenELB is installed has two NICs (eth0 192.168.0.2 and eth1 192.168.1.2), and eth0 192.168.0.2 will be used for OpenELB.</p><p>Run the following command to annotate master1 to specify the NIC:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl annotate nodes k8s-master01 layer2.openelb.kubesphere.io/v1alpha1=&quot;192.168.10.141&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Step 3: Create an Eip Object（创建EIP地址池，用于分配LoadBalancer请求时分配IP地址）</strong></p><p>The Eip object functions as an IP address pool for OpenELB.</p><p>1.Run the following command to create a YAML file for the Eip object:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim layer2-eip.yaml</span><br></code></pre></td></tr></table></figure><p>2.Add the following information to the YAML file:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 旧版本</span><br>apiVersion: network.kubesphere.io/v1alpha2<br>kind: Eip<br>metadata:<br>  name: layer2<span class="hljs-literal">-eip</span><br>spec:<br>  address: <span class="hljs-number">192.168</span>.<span class="hljs-number">10.70</span><span class="hljs-literal">-192</span>.<span class="hljs-number">168.10</span>.<span class="hljs-number">99</span><br>  interface: ens33<br>  protocol: layer2<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2024-08-27 基于官网最新的地址池配置，简要版本的往下拉一点就是</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">官方配置地址： https://openelb.io/docs/getting-started/configuration/configure-ip-address-pools-using-eip/</span><br>apiVersion: network.kubesphere.io/v1alpha2<br>kind: Eip<br>metadata:<br>    name: eip-sample-pool<br>    annotations:<br>      eip.openelb.kubesphere.io/is-default-eip: &quot;true&quot;<br>spec:<br>    address: 192.168.0.91-192.168.0.100<br>    # 地址池的优先级<br>    priority: 100<br>    # namespace 也可以看需求指定，这个地址池在什么名称空间当中使用<br>    namespaces:<br>      - test<br>      - default<br>    namespaceSelector:<br>      kubesphere.io/workspace: workspace<br>    disable: false<br>    protocol: layer2<br>    interface: eth0<br>    # interface: can_reach:192.168.0.1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下面这个不要，因为status是在创建资源后查看是否达到你要求的资源，所以在配置的时候可以不要</span><br>status:<br>    occupied: false<br>    usage: 1<br>    poolSize: 10<br>    used: <br>      &quot;192.168.0.91&quot;: &quot;default/test-svc&quot;<br>    firstIP: 192.168.0.91<br>    lastIP: 192.168.0.100<br>    ready: true<br>    v4: true<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2024-08-27 简要版</span><br>apiVersion: network.kubesphere.io/v1alpha2<br>kind: Eip<br>metadata:<br>  name: layer2-eip<br>spec:<br>  address: 172.31.73.130-172.31.73.132<br>  namespaces: <br>  - project<br>  interface: eth0<br>  protocol: layer2<br><br></code></pre></td></tr></table></figure><blockquote><ul><li>The IP addresses specified in <code>spec:address</code> must be on the same network segment as the Kubernetes cluster nodes.</li><li>For details about the fields in the Eip YAML configuration, see <a href="https://openelb.io/docs/getting-started/configuration/configure-ip-address-pools-using-eip/">Configure IP Address Pools Using Eip</a>.</li></ul></blockquote><p>3.Run the following command to create the Eip object:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl apply -f layer2-eip.yaml</span><br></code></pre></td></tr></table></figure><h2 id="三、OpenELB使用"><a href="#三、OpenELB使用" class="headerlink" title="三、OpenELB使用"></a>三、OpenELB使用</h2><h3 id="3-1-在k8s命令行中使用"><a href="#3-1-在k8s命令行中使用" class="headerlink" title="3.1 在k8s命令行中使用"></a>3.1 在k8s命令行中使用</h3><h4 id="3-1-1-Create-a-Deployment"><a href="#3-1-1-Create-a-Deployment" class="headerlink" title="3.1.1 Create a Deployment"></a>3.1.1 Create a Deployment</h4><p>The following creates a Deployment of two Pods using the luksa&#x2F;kubia image. Each Pod returns its own Pod name to external requests.</p><p>1.Run the following command to create a YAML file for the Deployment:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim layer2-openelb.yaml</span><br></code></pre></td></tr></table></figure><p>2.Add the following information to the YAML file:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建普通的dp资源，需要注意你上面创建的EIP在哪个名称空间当中。</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: layer2<span class="hljs-literal">-openelb</span><br>spec:<br>  replicas: <span class="hljs-number">2</span><br>  selector:<br>    matchLabels:<br>      app: layer2<span class="hljs-literal">-openelb</span><br>  template:<br>    metadata:<br>      labels:<br>        app: layer2<span class="hljs-literal">-openelb</span><br>    spec:<br>      containers:<br>        - image: luksa/kubia<br>          name: kubia<br>          ports:<br>            - containerPort: <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>3.Run the following command to create the Deployment:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl apply -f layer2-openelb.yaml</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-Create-a-Service"><a href="#3-1-2-Create-a-Service" class="headerlink" title="3.1.2 Create a Service"></a>3.1.2 Create a Service</h4><p>1.Run the following command to create a YAML file for the Service:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim layer2-svc.yaml</span><br></code></pre></td></tr></table></figure><p>2.Add the following information to the YAML file:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kind: Service<br>apiVersion: v1<br>metadata:<br>  name: layer2<span class="hljs-literal">-svc</span><br>  annotations:<br>    lb.kubesphere.io/v1alpha1: openelb<br>    protocol.openelb.kubesphere.io/v1alpha1: layer2<br>    eip.openelb.kubesphere.io/v1alpha2: layer2<span class="hljs-literal">-eip</span><br>spec:<br>  selector:<br>    app: layer2<span class="hljs-literal">-openelb</span><br>  <span class="hljs-built_in">type</span>: LoadBalancer<br>  ports:<br>    - name: http<br>      port: <span class="hljs-number">80</span><br>      targetPort: <span class="hljs-number">8080</span><br>  externalTrafficPolicy: Cluster<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2024-08-27  包含EIP地址池的使用方法</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里使用的是简要版的EIP地址池</span><br><br>kind: Service<br>apiVersion: v1<br>metadata:<br>  name: nginx<br>  namespace: project-test<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">EIP的使用主要是根据注解，如果是在其他的云平台上使用，也可以通过添加注解来达到使用openELB分配的IP地址</span><br>  annotations:<br>    lb.kubesphere.io/v1alpha1: openelb<br>    eip.openelb.kubesphere.io/v1alpha2: layer2-eip<br>spec:<br>  selector:<br>    app: nginx<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">选择分配LoadBalancer</span><br>  type: LoadBalancer<br>  ports:<br>    - name: http<br>      port: 80<br>      targetPort: 80<br>  externalTrafficPolicy: Cluster<br></code></pre></td></tr></table></figure><blockquote><ul><li>You must set <code>spec:type</code> to <code>LoadBalancer</code>.</li><li>The <code>lb.kubesphere.io/v1alpha1: openelb</code> annotation specifies that the Service uses OpenELB.</li><li>The <code>protocol.openelb.kubesphere.io/v1alpha1: layer2</code> annotation specifies that OpenELB is used in Layer 2 mode.</li><li>The <code>eip.openelb.kubesphere.io/v1alpha2: layer2-eip</code> annotation specifies the Eip object used by OpenELB. If this annotation is not configured, OpenELB automatically uses the first available Eip object that matches the protocol. You can also delete this annotation and add the <code>spec:loadBalancerIP</code> field (for example, <code>spec:loadBalancerIP: 192.168.0.91</code>) to assign a specific IP address to the Service.</li><li>If <code>spec:externalTrafficPolicy</code> is set to <code>Cluster</code> (default value), OpenELB randomly selects a node from all Kubernetes cluster nodes to handle Service requests. Pods on other nodes can also be reached over kube-proxy.</li><li>If <code>spec:externalTrafficPolicy</code> is set to <code>Local</code>, OpenELB randomly selects a node that contains a Pod in the Kubernetes cluster to handle Service requests. Only Pods on the selected node can be reached.</li></ul></blockquote><p>3.Run the following command to create the Service:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl apply <span class="hljs-operator">-f</span> layer2<span class="hljs-literal">-svc</span>.yaml<br></code></pre></td></tr></table></figure><h4 id="3-1-3-Verify-OpenELB-in-Layer-2-Mode"><a href="#3-1-3-Verify-OpenELB-in-Layer-2-Mode" class="headerlink" title="3.1.3 Verify OpenELB in Layer 2 Mode"></a>3.1.3 Verify OpenELB in Layer 2 Mode</h4><p>In the Kubernetes cluster, run the following command to obtain the external IP address of the Service:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生OpenELB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus基于集群模式Consul自动发现（consul_sd_configs）</title>
    <link href="/2025/03/19/Prometheus%E5%9F%BA%E4%BA%8E%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8FConsul%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0%EF%BC%88consul-sd-configs%EF%BC%89/"/>
    <url>/2025/03/19/Prometheus%E5%9F%BA%E4%BA%8E%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8FConsul%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0%EF%BC%88consul-sd-configs%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装配置-Consul-集群模式"><a href="#1-安装配置-Consul-集群模式" class="headerlink" title="1. 安装配置 Consul 集群模式"></a>1. 安装配置 Consul 集群模式</h2><p>Consul 集群模式支持高可用性，多个节点协同工作。以下是安装和配置步骤：</p><h3 id="1-1-安装-Consul集群"><a href="#1-1-安装-Consul集群" class="headerlink" title="1.1 安装 Consul集群"></a>1.1 安装 Consul集群</h3><ol><li><p>下载并解压 Consul 二进制文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://releases.hashicorp.com/consul/1.15.2/consul_1.15.2_linux_amd64.zip<br>unzip consul_1.15.2_linux_amd64.zip<br>sudo mv consul /usr/local/bin/<br></code></pre></td></tr></table></figure></li><li><p>创建 Consul 数据目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /opt/consul/data<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-2-配置-Consul-服务器节点"><a href="#1-2-配置-Consul-服务器节点" class="headerlink" title="1.2 配置 Consul 服务器节点"></a>1.2 配置 Consul 服务器节点</h3><p>在每个服务器节点上创建 Consul 配置文件（如 <code>/etc/consul.d/consul.json</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 每个服务器节点的配置相似，唯一不同的是 node_name 和 bind_addr 的 IP 地址，还有retry_join的ip地址需要根据bind_addr去指定。</span><br>&#123;<br>  <span class="hljs-attr">&quot;datacenter&quot;:</span> <span class="hljs-string">&quot;dc1&quot;</span>,<br>  <span class="hljs-attr">&quot;node_name&quot;:</span> <span class="hljs-string">&quot;consul-server-1&quot;</span>,<br>  <span class="hljs-attr">&quot;server&quot;:</span> <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;bootstrap_expect&quot;:</span> <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">&quot;bind_addr&quot;:</span> <span class="hljs-string">&quot;192.168.1.101&quot;</span>,<br>  <span class="hljs-attr">&quot;client_addr&quot;:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;retry_join&quot;:</span> [<span class="hljs-string">&quot;192.168.1.102&quot;</span>, <span class="hljs-string">&quot;192.168.1.103&quot;</span>],<br>  <span class="hljs-attr">&quot;data_dir&quot;:</span> <span class="hljs-string">&quot;/opt/consul/data&quot;</span>,<br>  <span class="hljs-attr">&quot;log_level&quot;:</span> <span class="hljs-string">&quot;INFO&quot;</span>,<br>  <span class="hljs-attr">&quot;ui&quot;:</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置说明："><a href="#配置说明：" class="headerlink" title="配置说明："></a>配置说明：</h4><ul><li><strong>bootstrap_expect</strong>：期望的 Consul 服务器节点数量（如上面配置当中的3，表示会有3个节点）。</li><li><strong>retry_join</strong>：加入集群的其他节点 IP。</li><li><strong>bind_addr</strong>：当前节点的 IP 地址。</li></ul><p>启动 Consul 服务器节点(集群模式需要在不同的服务器节点上进行启动)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">consul agent -server -config-file=/etc/consul.d/consul.json<br></code></pre></td></tr></table></figure><h3 id="1-3-配置-Consul-客户端节点"><a href="#1-3-配置-Consul-客户端节点" class="headerlink" title="1.3 配置 Consul 客户端节点"></a>1.3 配置 Consul 客户端节点</h3><p>客户端节点配置文件示例（位于 <code>/etc/consul.d/consul.json</code>）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"># 客户端地址也有一个bind_addr监听客户端地址<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;datacenter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dc1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;node_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;consul-client-1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bind_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.1.104&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;client_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;retry_join&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;192.168.1.101&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;192.168.1.102&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;192.168.1.103&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data_dir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/opt/consul/data&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log_level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;INFO&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ui&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动客户端节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">consul agent -config-file=/etc/consul.d/consul.json<br></code></pre></td></tr></table></figure><h3 id="1-4-验证-Consul-集群"><a href="#1-4-验证-Consul-集群" class="headerlink" title="1.4 验证 Consul 集群"></a>1.4 验证 Consul 集群</h3><p>通过 Web UI 验证集群状态，访问 <code>http://&lt;任意服务器IP&gt;:8500/ui</code>。</p><hr><h2 id="2-将应用注册到-Consul-集群"><a href="#2-将应用注册到-Consul-集群" class="headerlink" title="2. 将应用注册到 Consul 集群"></a>2. 将应用注册到 Consul 集群</h2><p>Consul 支持 <strong>手动服务注册</strong> 和 <strong>自动服务注册</strong>。</p><h3 id="2-1-手动注册服务"><a href="#2-1-手动注册服务" class="headerlink" title="2.1 手动注册服务"></a>2.1 手动注册服务</h3><p>可以创建服务定义文件，如 <code>/etc/consul.d/my-web-app.json</code>，注册服务：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;service&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-web-app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;web&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;v1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8080</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;check&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-web-app-health&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HTTP Health Check&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;http&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8080/health&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1s&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后通过以下命令重新加载 Consul 配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">consul reload<br></code></pre></td></tr></table></figure><h3 id="2-2-自动注册服务"><a href="#2-2-自动注册服务" class="headerlink" title="2.2 自动注册服务"></a>2.2 自动注册服务</h3><p>服务可以通过调用 Consul API 自动注册。例如，使用 <code>curl</code> 命令进行注册：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --request PUT --data \<br>&#x27;&#123;<br>  &quot;ID&quot;: &quot;my-web-app&quot;,<br>  &quot;Name&quot;: &quot;my-web-app&quot;,<br>  &quot;Tags&quot;: [&quot;web&quot;, &quot;v1&quot;],<br>  &quot;Address&quot;: &quot;localhost&quot;,<br>  &quot;Port&quot;: 8080,<br>  &quot;Check&quot;: &#123;<br>    &quot;HTTP&quot;: &quot;http://localhost:8080/health&quot;,<br>    &quot;Interval&quot;: &quot;10s&quot;<br>  &#125;<br>&#125;&#x27; http://localhost:8500/v1/agent/service/register<br></code></pre></td></tr></table></figure><hr><h2 id="3-配置-Prometheus-动态发现-Consul-注册的服务"><a href="#3-配置-Prometheus-动态发现-Consul-注册的服务" class="headerlink" title="3. 配置 Prometheus 动态发现 Consul 注册的服务"></a>3. 配置 Prometheus 动态发现 Consul 注册的服务</h2><h3 id="3-1-修改-Prometheus-配置文件"><a href="#3-1-修改-Prometheus-配置文件" class="headerlink" title="3.1 修改 Prometheus 配置文件"></a>3.1 修改 Prometheus 配置文件</h3><p>在 Prometheus 配置文件 <code>prometheus.yml</code> 中添加 <strong>Consul 服务发现配置</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;consul-services&#x27;</span><br>    <span class="hljs-attr">consul_sd_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">server:</span> <span class="hljs-string">&#x27;localhost:8500&#x27;</span><br>        <span class="hljs-attr">services:</span> <br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;my-web-app&#x27;</span><br>    <span class="hljs-attr">relabel_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_consul_service</span>]<br>        <span class="hljs-attr">regex:</span> <span class="hljs-string">&#x27;my-web-app&#x27;</span><br>        <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br></code></pre></td></tr></table></figure><h3 id="3-2-重新启动-Prometheus"><a href="#3-2-重新启动-Prometheus" class="headerlink" title="3.2 重新启动 Prometheus"></a>3.2 重新启动 Prometheus</h3><p>更新配置后，重新启动 Prometheus：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./prometheus --config.file=prometheus.yml<br></code></pre></td></tr></table></figure><h3 id="3-3-验证服务发现"><a href="#3-3-验证服务发现" class="headerlink" title="3.3 验证服务发现"></a>3.3 验证服务发现</h3><p>访问 Prometheus Web UI (<code>http://localhost:9090</code>)，进入 <strong>Targets</strong> 页面，检查 <code>my-web-app</code> 是否已被动态发现并抓取。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>Consul 集群模式</strong> 提供高可用服务发现。</li><li>应用可以通过手动或自动方式注册到 Consul。</li><li><strong>Prometheus</strong> 可以通过 <strong>Consul 服务发现</strong> 动态抓取已注册的服务指标。</li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus基于文件的服务发现配置（file_sd_configs）</title>
    <link href="/2025/03/19/Prometheus%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E9%85%8D%E7%BD%AE%EF%BC%88file-sd-configs%EF%BC%89/"/>
    <url>/2025/03/19/Prometheus%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E9%85%8D%E7%BD%AE%EF%BC%88file-sd-configs%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h1><ul><li>之前手动配置了很多个traget<ul><li>redis</li><li>mysql</li><li>blackbox</li><li>pushgateway</li></ul></li><li>手动配置维护成本高，还容易出错</li></ul><h1 id="基于文件的服务发现配置"><a href="#基于文件的服务发现配置" class="headerlink" title="基于文件的服务发现配置"></a>基于文件的服务发现配置</h1><ul><li><a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#file_sd_config">文档地址</a></li><li>将配置写在yaml&#x2F;json的文件当中，通过Prometheus的主配置文件引入，实现在Prometheus主配置文件之外的文件当中动态的添加或删除对应的监控项</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>基于文件的服务发现提供了一种<strong>配置静态目标</strong>的更通用的方法</li><li>并充当了插入自定义服务发现机制的接口。</li><li>摆脱对特定服务发现源的依赖</li><li>只要能正确给出 json&#x2F;yaml文件即可</li><li>和服务树的最好匹配方案</li></ul><h2 id="yaml文件类型"><a href="#yaml文件类型" class="headerlink" title="yaml文件类型"></a>yaml文件类型</h2><ul><li>yaml</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">YAML yaml - targets: [ - &#x27;&lt;host&gt;&#x27; ] labels: [ &lt;labelname&gt;: &lt;labelvalue&gt; ... ]<br><br></code></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.101</span><span class="hljs-number">.222</span><span class="hljs-string">:9100</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.101</span><span class="hljs-number">.223</span><span class="hljs-string">:9100</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">account:</span> <span class="hljs-string">&quot;aliyun-01&quot;</span>   <br>    <span class="hljs-attr">region:</span> <span class="hljs-string">&quot;ap-south-1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="json文件类型"><a href="#json文件类型" class="headerlink" title="json文件类型"></a>json文件类型</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">json [ &#123; &quot;targets&quot;: [ &quot;&lt;host&gt;&quot;, ... ], &quot;labels&quot;: &#123; &quot;&lt;labelname&gt;&quot;: &quot;&lt;labelvalue&gt;&quot;, ... &#125; &#125;, ... ]<br></code></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;targets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;192.168.101.222:9100&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;account&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aliyun-01&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;region&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ap-south-1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prod&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inf&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;project&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;monitor&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;stree_gpa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inf.monitor.prometheus&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;targets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;192.168.101.223:9100&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;account&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aliyun-02&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;region&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ap-south-2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prod&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inf&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;project&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;middleware&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;stree_gpa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inf.middleware.kafka&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h3 id="下面来解读一下"><a href="#下面来解读一下" class="headerlink" title="下面来解读一下"></a>下面来解读一下</h3><ul><li><strong>targets 是一组实例地址的列表</strong></li><li><strong>labels 是这组实例的标签，应用到列表中所有实例</strong></li><li>如果想每个实例不同的标签，可以将targets列表保留一个实例即可</li><li>标签可以自定义，下面举几个例子<ul><li>account 代表公有云账户，多账户情况</li><li>region 代表区域</li><li>env 代表所属环境 prod代表生产，pre代表预发，test代表测试</li><li>group代表业务大组</li><li>project 代表项目</li><li>stree_gpa 代表服务树三级标签</li></ul></li><li>那么prometheus在采集对应target时就会将对应标签打入其metrics中</li><li>为后续我们按照标签过滤提供方便</li></ul><h2 id="配置举例"><a href="#配置举例" class="headerlink" title="配置举例"></a>配置举例</h2><ul><li>files 代表 文件路径 支持通配符</li><li>refresh_interval 代表 文件刷新间隔</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;node_exporter&#x27;</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">30s</span><br>  <span class="hljs-attr">scrape_timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/metrics</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">honor_timestamps:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 配置文件发现配置</span><br>  <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/app/prometheus/sd/node_exporter.json</span><br>    <span class="hljs-comment"># 刷新的频率</span><br>    <span class="hljs-attr">refresh_interval:</span> <span class="hljs-string">5m</span><br></code></pre></td></tr></table></figure><h2 id="改造为服务发现类型"><a href="#改造为服务发现类型" class="headerlink" title="改造为服务发现类型"></a>改造为服务发现类型</h2><ul><li>将 blackbox-http 和 node_exporter 改为文件发现</li><li>prometheus 配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;blackbox-http&#x27;</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/probe</span><br>  <span class="hljs-comment"># 传入的参数</span><br>  <span class="hljs-attr">params:</span><br>    <span class="hljs-attr">module:</span> [<span class="hljs-string">http_2xx</span>]  <span class="hljs-comment"># Look for a HTTP 200 response. 查看http_2xx的响应</span><br>  <span class="hljs-comment"># 抓取间隔</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">15s</span><br>  <span class="hljs-comment"># 抓取超时</span><br>  <span class="hljs-attr">scrape_timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">http</span><br>  <span class="hljs-comment"># 是否采用数据源提供的时间戳作为时间戳</span><br>  <span class="hljs-attr">honor_timestamps:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 原来是static_config,改为文件发现</span><br>  <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/app/prometheus/sd/blackbox_http.json</span><br>    <span class="hljs-attr">refresh_interval:</span> <span class="hljs-string">2m</span><br>  <span class="hljs-attr">relabel_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>]<br>      <span class="hljs-attr">target_label:</span> <span class="hljs-string">__param_target</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__param_target</span>]<br>      <span class="hljs-attr">target_label:</span> <span class="hljs-string">instance</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>      <span class="hljs-attr">replacement:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.101</span><span class="hljs-number">.222</span><span class="hljs-string">:9115</span> <br><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;node_exporter&#x27;</span><br>  <span class="hljs-comment"># metrics的path（metrics_path配置项） 注意不都是/metrics</span><br>  <span class="hljs-comment"># 传入的参数</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">30s</span><br>  <span class="hljs-attr">scrape_timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">honor_timestamps:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/app/prometheus/sd/node_exporter.json</span><br>    <span class="hljs-attr">refresh_interval:</span> <span class="hljs-string">2m</span><br><br></code></pre></td></tr></table></figure><ul><li>创建sd目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -pv /opt/app/prometheus/sd/<br></code></pre></td></tr></table></figure><ul><li>写入json文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /opt/app/prometheus/sd/node_exporter.json<br>[<br>  &#123;<br>    &quot;targets&quot;: [<br>      &quot;192.168.101.222:9100&quot;<br>    ],<br>    &quot;labels&quot;: &#123;<br>      &quot;name&quot;: &quot;prome-master01&quot;,<br>      &quot;account&quot;: &quot;aliyun-01&quot;,<br>      &quot;region&quot;: &quot;ap-south-1&quot;,<br>      &quot;env&quot;: &quot;prod&quot;,<br>      &quot;group&quot;: &quot;inf&quot;,<br>      &quot;project&quot;: &quot;monitor&quot;,<br>      &quot;stree_gpa&quot;: &quot;inf.monitor.prometheus&quot;<br>    &#125;<br>  &#125;,<br>  &#123;<br>    &quot;targets&quot;: [<br>      &quot;192.168.101.223:9100&quot;<br>    ],<br>    &quot;labels&quot;: &#123;<br>      &quot;name&quot;: &quot;prome-node01&quot;,<br>      &quot;account&quot;: &quot;aliyun-02&quot;,<br>      &quot;region&quot;: &quot;ap-south-2&quot;,<br>      &quot;env&quot;: &quot;prod&quot;,<br>      &quot;group&quot;: &quot;inf&quot;,<br>      &quot;project&quot;: &quot;middleware&quot;,<br>      &quot;stree_gpa&quot;: &quot;inf.middleware.kafka&quot;<br>    &#125;<br>  &#125;<br>]<br>EOF<br><br>cat &lt;&lt;EOF &gt; /opt/app/prometheus/sd/blackbox_http.json<br>[<br>  &#123;<br>    &quot;targets&quot;: [<br>      &quot;192.168.101.222:9115&quot;,<br>      &quot;http://prometheus.io&quot;,<br>      &quot;http://www.baidu.com&quot;,<br>      &quot;https://www.baidu.com&quot;<br>    ]<br>  &#125;<br>]<br>EOF<br><br></code></pre></td></tr></table></figure><ul><li>reload prometheus</li><li>观察target页面 和 sd结果页面</li><li>修改文件 blackbox_http.json 新增 <a href="https://github.com/">https://github.com/</a> 的探测，重新观察target页面 和 sd结果页面，会发现新添加的检测站点也添加到了页面上。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /opt/app/prometheus/sd/blackbox_http.json<br>[<br>  &#123;<br>    &quot;targets&quot;: [<br>      &quot;192.168.101.222:9115&quot;,<br>      &quot;http://prometheus.io&quot;,<br>      &quot;http://www.baidu.com&quot;,<br>      &quot;https://www.baidu.com&quot;,<br>      &quot;https://github.com/&quot;<br>    ]<br>  &#125;<br>]<br>EOF<br><br><br>curl -X POST http://localhost:9090/-/reload<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应用程序已被JAVA安全阻止java被安全阻止解决办法</title>
    <link href="/2025/03/19/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B7%B2%E8%A2%ABJAVA%E5%AE%89%E5%85%A8%E9%98%BB%E6%AD%A2java%E8%A2%AB%E5%AE%89%E5%85%A8%E9%98%BB%E6%AD%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2025/03/19/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B7%B2%E8%A2%ABJAVA%E5%AE%89%E5%85%A8%E9%98%BB%E6%AD%A2java%E8%A2%AB%E5%AE%89%E5%85%A8%E9%98%BB%E6%AD%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>如果在windows 的控制面板当中可以找到<code>java的图标</code>，按照这个地址方法操作（<a href="https://blog.51cto.com/u_16099271/11623668%EF%BC%89%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%89%BE%E5%88%B0java%E7%9A%84%E5%9B%BE%E6%A0%87%EF%BC%8C%E6%8C%89%E7%85%A7%E4%B8%8B%E6%96%B9%E7%9A%84%E6%95%99%E7%A8%8B%E6%93%8D%E4%BD%9C%EF%BC%9A">https://blog.51cto.com/u_16099271/11623668），如果没有找到java的图标，按照下方的教程操作：</a></p><ol><li><p>找到 Java 安装目录中的 <strong><code>deployment.properties</code></strong> 文件，通常位于：</p><ul><li>Windows: <code>C:\Users\&lt;username&gt;\AppData\LocalLow\Sun\Java\Deployment\security\</code></li><li>Linux&#x2F;Mac: <code>~/.java/deployment/security/</code></li></ul></li><li><p>打开 <strong><code>deployment.properties</code></strong> 文件，在其中添加例外站点：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">deployment.<span class="hljs-keyword">user</span>.<span class="hljs-keyword">security</span>.<span class="hljs-keyword">exception</span>.sites=&lt;URL&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">deployment<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.exception</span>.sites=http:<span class="hljs-comment">//example.com</span><br></code></pre></td></tr></table></figure></li><li><p>保存文件，重启浏览器或相关 Java 应用程序。</p></li></ol><p>这样可以将指定的网站加入 Java 应用程序的信任列表。</p><p><strong>如果没有上面的 <code>deployment.properties</code> ，可以在路径【C:\Users&lt;username&gt;\AppData\LocalLow\Sun\Java\Deployment\security\】下找到exception.sites文件，在里面添加站点的url地址（<a href="http://192.68.101.1)这种形式的地址也是可以的/">http://192.68.101.1）这种形式的地址也是可以的</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>windows、JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows、JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7 快速部署k8s 1.27版本（一定要升级内核，因为cilium需要）</title>
    <link href="/2025/03/19/Centos7%20%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2k8s%201.27%E7%89%88%E6%9C%AC/"/>
    <url>/2025/03/19/Centos7%20%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2k8s%201.27%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h4 id="关闭selinux-一定要做"><a href="#关闭selinux-一定要做" class="headerlink" title="关闭selinux(一定要做)"></a>关闭selinux(一定要做)</h4><h4 id="关闭防火墙-推荐关闭"><a href="#关闭防火墙-推荐关闭" class="headerlink" title="关闭防火墙(推荐关闭)"></a>关闭防火墙(推荐关闭)</h4><h4 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://dl.lamp.sh/kernel/el7/kernel-ml-5.10.222-1.el7.x86_64.rpm<br>wget https://dl.lamp.sh/kernel/el7/kernel-ml-devel-5.10.222-1.el7.x86_64.rpm<br><br>yum localinstall -y kernel-ml-5.10.222-1.el7.x86_64.rpm kernel-ml-devel-5.10.222-1.el7.x86_64.rpm<br><span class="hljs-comment">#安装完毕后查看系统可用启动内核</span><br>awk -F\&#x27; <span class="hljs-string">&#x27;$1==&quot;menuentry &quot; &#123;print  $2&#125;&#x27;</span> /etc/grub2.cfg<br></code></pre></td></tr></table></figure><h4 id="查看当前内核"><a href="#查看当前内核" class="headerlink" title="查看当前内核"></a>查看当前内核</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub2-editenv list<br><span class="hljs-comment">#修改默认内核CentOS Linux (5.10.222-1.el7.x86_64) 7 (Core)是awk查询出来的内核名称</span><br>grub2-set-default <span class="hljs-string">&#x27;CentOS Linux (5.10.222-1.el7.x86_64) 7 (Core)&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="重新启动"><a href="#重新启动" class="headerlink" title="重新启动"></a>重新启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><h4 id="查看内核"><a href="#查看内核" class="headerlink" title="查看内核"></a>查看内核</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><h4 id="指定sealos版本下载sealos"><a href="#指定sealos版本下载sealos" class="headerlink" title="指定sealos版本下载sealos"></a>指定sealos版本下载sealos</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">VERSION=v4.3.7<br><span class="hljs-built_in">export</span> VERSION<br>wget https://mirror.ghproxy.com/https://github.com/labring/sealos/releases/download/<span class="hljs-variable">$&#123;VERSION&#125;</span>/sealos_<span class="hljs-variable">$&#123;VERSION#v&#125;</span>_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure><h4 id="安装k8s-1-27"><a href="#安装k8s-1-27" class="headerlink" title="安装k8s 1.27"></a>安装k8s 1.27</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sealos run registry.cn-shanghai.aliyuncs.com/labring/kubernetes:v1.27.7 registry.cn-shanghai.aliyuncs.com/labring/helm:v3.9.4 \<br>     registry.cn-shanghai.aliyuncs.com/labring/cilium:v1.13.4 \<br>     --masters 192.168.101.73 \<br>     --nodes 192.168.101.74,192.168.101.75 -p [你主机的密码,最好全部统一]<br></code></pre></td></tr></table></figure><h4 id="安装命令补全"><a href="#安装命令补全" class="headerlink" title="安装命令补全"></a>安装命令补全</h4><p><a href="https://www.t-ao.cn/archives/224/">https://www.t-ao.cn/archives/224/</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka的zookeeper、kraft、controller</title>
    <link href="/2025/03/19/Kafka%E7%9A%84zookeeper%E3%80%81kraft%E3%80%81controller/"/>
    <url>/2025/03/19/Kafka%E7%9A%84zookeeper%E3%80%81kraft%E3%80%81controller/</url>
    
    <content type="html"><![CDATA[<p><strong>Kafka 中 ZooKeeper 和 Kraft 模式的区别：</strong></p><p>在早期的 Kafka 版本中，Kafka 集群依赖于 ZooKeeper 来进行元数据管理、协调和集群管理。 而在 Kafka 3.x 版本之后，引入了 Kraft 模式，可以替代 ZooKeeper，实现无 ZooKeeper 的部署。</p><p><strong>1. ZooKeeper 模式：</strong></p><ul><li><strong>依赖 ZooKeeper：</strong> Kafka Broker 需要连接到 ZooKeeper 集群，获取集群的元数据信息。</li><li><strong>元数据存储：</strong> Kafka 集群的元数据 (例如 Topic 信息、分区信息、Broker 信息等) 存储在 ZooKeeper 中。</li><li><strong>Controller 选举：</strong> Kafka Controller 的选举由 ZooKeeper 完成。</li><li><strong>复杂性：</strong> 增加了部署和管理的复杂性，需要维护额外的 ZooKeeper 集群。</li><li><strong>性能瓶颈：</strong> ZooKeeper 的性能可能成为 Kafka 集群的瓶颈，尤其是在大规模集群中。</li><li><strong>外部依赖：</strong> 对外部系统 ZooKeeper 有依赖，增加了维护的成本。</li></ul><p><strong>2. Kraft 模式：</strong></p><ul><li><strong>无 ZooKeeper 依赖：</strong> Kafka 集群不再需要连接到 ZooKeeper，而是使用 Kafka 内部的 Kraft 机制进行元数据管理。</li><li><strong>元数据存储：</strong> Kafka 集群的元数据存储在 Controller 节点的内部存储中，而不是 ZooKeeper。</li><li><strong>Controller 选举：</strong> Kafka Controller 的选举由 Kafka 集群内部的 Kraft 机制完成。</li><li><strong>简化部署：</strong> 简化了部署和管理，不需要维护额外的 ZooKeeper 集群。</li><li><strong>性能提升：</strong> 提高了性能，减少了对外部系统的依赖。</li><li><strong>内部管理：</strong> 元数据管理和集群协调更加紧密地集成在 Kafka 内部。</li></ul><p><strong>总结：</strong></p><table><thead><tr><th align="center">特性</th><th align="center">ZooKeeper 模式</th><th align="center">Kraft 模式</th></tr></thead><tbody><tr><td align="center">依赖</td><td align="center">依赖 ZooKeeper 集群</td><td align="center">不依赖 ZooKeeper，使用内部 Kraft 机制</td></tr><tr><td align="center">元数据存储</td><td align="center">存储在 ZooKeeper 中</td><td align="center">存储在 Controller 节点内部</td></tr><tr><td align="center">Controller 选举</td><td align="center">由 ZooKeeper 完成</td><td align="center">由 Kraft 机制完成</td></tr><tr><td align="center">部署和管理</td><td align="center">复杂，需要维护 ZooKeeper 集群</td><td align="center">简化，无需维护 ZooKeeper 集群</td></tr><tr><td align="center">性能</td><td align="center">性能可能受 ZooKeeper 限制</td><td align="center">性能更高，减少外部依赖</td></tr><tr><td align="center">维护成本</td><td align="center">维护成本较高，需要维护 ZooKeeper 集群</td><td align="center">维护成本较低，无需维护 ZooKeeper 集群</td></tr></tbody></table><p><strong>什么是 Controller？</strong></p><p>在 Kafka 集群中，<strong>Controller</strong> 是一个特殊的 Broker，负责管理集群的元数据和执行一些关键的管理任务。Controller 是 Kafka 集群的核心组件之一，它负责协调和控制整个集群的运行。</p><p><strong>Controller 的作用：</strong></p><ol><li><strong>分区管理：</strong><ul><li>维护 Topic 分区的副本信息。</li><li>决定每个分区的 Leader 和 Follower。</li><li>当 Leader Broker 发生故障时，进行 Leader 的重新选举。</li></ul></li><li><strong>副本管理：</strong><ul><li>维护 Topic 分区的副本列表。</li><li>监控副本的状态，确保副本的同步。</li><li>当副本发生故障时，进行副本的重新分配。</li></ul></li><li><strong>Broker 管理：</strong><ul><li>监控 Broker 的状态，例如 Broker 是否在线、是否正常工作。</li><li>当 Broker 加入或离开集群时，更新集群的元数据。</li></ul></li><li><strong>Topic 管理：</strong><ul><li>创建、删除和修改 Topic。</li><li>管理 Topic 的分区和副本。</li></ul></li><li><strong>元数据管理：</strong><ul><li>维护整个集群的元数据信息。</li><li>将元数据信息同步到所有 Broker。</li></ul></li><li><strong>集群协调：</strong><ul><li>协调 Kafka 集群的各项操作，例如分区重分配、Broker 扩容等。</li></ul></li></ol><p><strong>Controller 的位置：</strong></p><ul><li><strong>ZooKeeper 模式：</strong> 在 ZooKeeper 模式下，Controller 是由 ZooKeeper 选举产生的。Kafka 集群中的所有 Broker 都会竞争成为 Controller，最终只有一个 Broker 会被选举为 Controller。</li><li><strong>Kraft 模式：</strong> 在 Kraft 模式下，Controller 是由 Kafka 集群内部的 Kraft 机制选举产生的。 Controller 是集群中具有特殊角色的 Broker，负责管理集群的元数据和执行管理任务。</li></ul><p><strong>总结：</strong></p><ul><li><strong>ZooKeeper 模式：</strong> Kafka 依赖 ZooKeeper 进行元数据管理和协调，需要维护额外的 ZooKeeper 集群。</li><li><strong>Kraft 模式：</strong> Kafka 不依赖 ZooKeeper，使用内部的 Kraft 机制进行元数据管理，简化了部署和管理，提高了性能。</li><li><strong>Controller：</strong> 是 Kafka 集群的核心组件，负责管理集群的元数据、分区、副本和 Broker。</li><li><strong>Controller 的位置：</strong> 在 ZooKeeper 模式下，Controller 由 ZooKeeper 选举产生；在 Kraft 模式下，Controller 由 Kafka 集群内部的 Kraft 机制选举产生。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arthas监控Elasticsearch报错</title>
    <link href="/2025/03/19/arthas%E7%9B%91%E6%8E%A7Elasticsearch%E6%8A%A5%E9%94%99/"/>
    <url>/2025/03/19/arthas%E7%9B%91%E6%8E%A7Elasticsearch%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h2 id="arthas介绍"><a href="#arthas介绍" class="headerlink" title="arthas介绍"></a>arthas介绍</h2><ul><li>arthas是Alibaba推出的java诊断工具</li><li><a href="https://arthas.aliyun.com/doc/install-detail.html">官方文档</a></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>准备docker环境(使用docker容器的方法部署arthas和ES)</li></ul><table><thead><tr><th>name</th><th>port（arthas启动默认监听的端口，可以在web端进行访问）</th></tr></thead><tbody><tr><td>centos_arthas</td><td>3658:3658</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -tid --name centos_arthas -p 3658:3658 <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span> centos:latest /sbin/init<br></code></pre></td></tr></table></figure><ul><li>可以按照以下安装elasticsearch<br><a href="https://www.cnblogs.com/liwangcai/p/14011981.html">elasticsearch集群安装</a><br><a href="https://www.cnblogs.com/liwangcai/p/14010028.html">elasticsearch单机快速安装</a></li><li>进入到容器中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it centos_arthas /bin/bash<br></code></pre></td></tr></table></figure><h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><ul><li>此处的配置修改按照本站之前博客路径进行修改</li><li>创建，修改java.policy文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 这个policy文件的名字叫什么都可以，但是需要放在这个目录下才行，推荐叫elasticsearch.policy 这样方便区别这个配置文件是干啥用的，原文的解决连接来自github的issue：https://github.com/alibaba/arthas/issues/156  @ralf0131大佬提供的解决办法</span><br><span class="hljs-string">vi</span> <span class="hljs-string">/opt/es/config/elasticsearch.policy</span>  <br><br><span class="hljs-comment"># 具体文件内的内容</span><br><span class="hljs-string">grant</span> <span class="hljs-string">codeBase</span> <span class="hljs-string">&quot;file:$&#123;user.home&#125;/.arthas/lib/-&quot;</span> &#123;<br>    <span class="hljs-string">//</span> <span class="hljs-string">允许</span> <span class="hljs-string">Arthas</span> <span class="hljs-string">读写自身目录及日志</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.io.FilePermission</span> <span class="hljs-string">&quot;$&#123;user.home&#125;/.arthas/-&quot;</span>, <span class="hljs-string">&quot;read,write&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.io.FilePermission</span> <span class="hljs-string">&quot;$&#123;user.home&#125;/logs/arthas/-&quot;</span>, <span class="hljs-string">&quot;read,write,delete&quot;</span><span class="hljs-string">;</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">核心运行时权限</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;createClassLoader&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;getClassLoader&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;modifyThreadGroup&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;modifyThread&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;shutdownHooks&quot;</span><span class="hljs-string">;</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">反射相关权限</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;accessClassInPackage.sun.reflect&quot;</span><span class="hljs-string">;</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">HTTP</span> <span class="hljs-string">协议访问权限</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;accessClassInPackage.sun.net.www.protocol.http&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;accessClassInPackage.sun.net.www.http&quot;</span><span class="hljs-string">;</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">网络端口权限（Arthas</span> <span class="hljs-string">默认使用</span> <span class="hljs-number">3658</span> <span class="hljs-string">和</span> <span class="hljs-number">8563</span><span class="hljs-string">）</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.net.SocketPermission</span> <span class="hljs-string">&quot;127.0.0.1:3658&quot;</span>, <span class="hljs-string">&quot;listen,resolve&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.net.SocketPermission</span> <span class="hljs-string">&quot;127.0.0.1:8563&quot;</span>, <span class="hljs-string">&quot;listen,resolve&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.net.SocketPermission</span> <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;accept&quot;</span><span class="hljs-string">;</span><br>&#125;<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><ul><li>修改&#x2F;opt&#x2F;es&#x2F;jdk&#x2F;conf&#x2F;security&#x2F;java.policy配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">grant</span> &#123;<br>    <span class="hljs-string">permission</span> <span class="hljs-string">org.elasticsearch.ThreadPermission</span> <span class="hljs-string">&quot;modifyArbitraryThreadGroup&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">org.elasticsearch.ThreadPermission</span> <span class="hljs-string">&quot;modifyArbitraryThread&quot;</span><span class="hljs-string">;</span><br>&#125;<span class="hljs-string">;</span><br><br><br><span class="hljs-string">grant</span> &#123;<br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.io.FilePermission</span> <span class="hljs-string">&quot;&lt;&lt;ALL FILES&gt;&gt;&quot;</span>, <span class="hljs-string">&quot;read,write&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.util.PropertyPermission</span> <span class="hljs-string">&quot;JM.LOG.PATH&quot;</span>, <span class="hljs-string">&quot;write&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.reflect.ReflectPermission</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.net.SocketPermission</span> <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;connect,listen,resolve,accept&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">ognl.OgnlInvokePermission</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-string">;</span><br>&#125;<span class="hljs-string">;</span><br><br></code></pre></td></tr></table></figure><ul><li>启动elasticsearch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/es/bin/elasticsearch -d<br></code></pre></td></tr></table></figure><h2 id="安装arthas"><a href="#安装arthas" class="headerlink" title="安装arthas"></a>安装arthas</h2><ul><li><h4 id="配置环境变量（这里使用es自带的jdk）"><a href="#配置环境变量（这里使用es自带的jdk）" class="headerlink" title="配置环境变量（这里使用es自带的jdk）"></a>配置环境变量（这里使用es自带的jdk）</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果是安装过JDK环境，es启动的时候也是用的安装过的JDK，那这部分内容可以不用配置，但是如果没有配置jdk的环境，建议还是配置一下，方便启动的时候可以执行java -jar 这样的命令</span><br>echo &#x27;export JAVA_HOME=/opt/es/jdk&#x27; &gt;&gt;  ~/.bashrc<br>echo &#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27; &gt;&gt; ~/.bashrc<br>echo &#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27; &gt;&gt; ~/.bashrc<br>chmod +x ~/.bashrc<br>source ~/.bashrc<br></code></pre></td></tr></table></figure><ul><li><h4 id="安装arthas-1"><a href="#安装arthas-1" class="headerlink" title="安装arthas"></a>安装arthas</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">[elastic@3f24eb371050 opt]$ curl -O https://arthas.aliyun.com/arthas-boot.jar<br><span class="hljs-meta prompt_">  % </span><span class="language-bash">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100  135k  100  135k    0     0   217k      0 --:--:-- --:--:-- --:--:--  217k<br>[elastic@3f24eb371050 opt]$ java -jar arthas-boot.jar --repo-mirror aliyun --use-http<br>[INFO] arthas-boot version: 3.4.4<br>[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.<br>* [1]: 513 org.elasticsearch.bootstrap.Elasticsearch<br>1<br>[INFO] Start download arthas from remote server: http://arthas.aliyun.com/download/3.4.4?mirror=aliyun<br>[INFO] File size: 11.94 MB, downloaded size: 4.32 MB, downloading ...<br>[INFO] File size: 11.94 MB, downloaded size: 7.45 MB, downloading ...<br>[INFO] File size: 11.94 MB, downloaded size: 9.85 MB, downloading ...<br>[INFO] Download arthas success.<br>[INFO] arthas home: /home/elastic/.arthas/lib/3.4.4/arthas<br>[INFO] Try to attach process 513<br>[INFO] Attach process 513 success.<br>[INFO] arthas-client connect 127.0.0.1 3658<br>  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.<br> /  O  \ |  .--. &#x27;&#x27;--.  .--&#x27;|  &#x27;--&#x27;  | /  O  \ &#x27;   .-&#x27;<br>|  .-.  ||  &#x27;--&#x27;.&#x27;   |  |   |  .--.  ||  .-.  |`.  `-.<br>|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#x27;    |<br>`--&#x27; `--&#x27;`--&#x27; &#x27;--&#x27;   `--&#x27;   `--&#x27;  `--&#x27;`--&#x27; `--&#x27;`-----&#x27;<br><br><br>wiki      https://arthas.aliyun.com/doc<br>tutorials https://arthas.aliyun.com/doc/arthas-tutorials.html<br>version   3.4.4<br>pid       513<br>time      2020-11-30 05:37:25<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">[arthas@513]$ </span><span class="language-bash">shutdown        <span class="hljs-comment">##安装完成后先退出增加--target-ip参数启动</span></span><br><br></code></pre></td></tr></table></figure><ul><li><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[elastic@3f24eb371050 opt]$ java -jar arthas-boot.jar  --target-ip 0.0.0.0<br>[INFO] arthas-boot version: 3.4.4<br>[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.<br>* [1]: 513 org.elasticsearch.bootstrap.Elasticsearch<br>1<br>[INFO] arthas home: /home/elastic/.arthas/lib/3.4.4/arthas<br>[INFO] Try to attach process 513<br>[INFO] Attach process 513 success.<br>[INFO] arthas-client connect 0.0.0.0 3658<br>  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.<br> /  O  \ |  .--. &#x27;&#x27;--.  .--&#x27;|  &#x27;--&#x27;  | /  O  \ &#x27;   .-&#x27;<br>|  .-.  ||  &#x27;--&#x27;.&#x27;   |  |   |  .--.  ||  .-.  |`.  `-.<br>|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#x27;    |<br>`--&#x27; `--&#x27;`--&#x27; &#x27;--&#x27;   `--&#x27;   `--&#x27;  `--&#x27;`--&#x27; `--&#x27;`-----&#x27;<br><br><br>wiki      https://arthas.aliyun.com/doc<br>tutorials https://arthas.aliyun.com/doc/arthas-tutorials.html<br>version   3.4.4<br>pid       513<br>time      2020-11-30 05:39:45<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">[arthas@513]$ </span><span class="language-bash">dashboard</span><br><br></code></pre></td></tr></table></figure><ul><li><h4 id="监控数据，成功启动"><a href="#监控数据，成功启动" class="headerlink" title="监控数据，成功启动"></a>监控数据，成功启动</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">ID   NAME                          GROUP          PRIORITY  STATE     %CPU      DELTA_TIM TIME      INTERRUPT DAEMON<br>-1   C1 CompilerThread0            -              -1        -         0.23      0.011     0:2.577   false     true<br>-1   C2 CompilerThread0            -              -1        -         0.13      0.006     0:9.784   false     true<br>153  Timer-for-arthas-dashboard-02 system         5         RUNNABLE  0.08      0.004     0:0.055   false     true<br>151  arthas-NettyHttpTelnetBootstr system         5         RUNNABLE  0.06      0.003     0:0.086   false     true<br>19   elasticsearch[3f24eb371050][s main           5         TIMED_WAI 0.06      0.003     0:0.599   false     true<br>43   elasticsearch[3f24eb371050][m main           5         TIMED_WAI 0.05      0.002     0:0.032   false     true<br>45   elasticsearch[3f24eb371050][m main           5         TIMED_WAI 0.04      0.002     0:0.023   false     true<br>-1   VM Periodic Task Thread       -              -1        -         0.04      0.002     0:0.391   false     true<br>-1   VM Thread                     -              -1        -         0.01      0.000     0:0.225   false     true<br>18   elasticsearch[3f24eb371050][[ main           5         TIMED_WAI 0.01      0.000     0:0.101   false     true<br>-1   Sweeper thread                -              -1        -         0.0       0.000     0:0.159   false     true<br>Memory                    used    total    max     usage    GC<br>heap                      264M    989M     989M    26.73%   gc.parnew.count               8<br>par_eden_space            190M    273M     273M    69.70%   gc.parnew.time(ms)            138<br>par_survivor_space        26M     34M      34M     77.56%   gc.concurrentmarksweep.count  2<br>cms_old_gen               47M     682M     682M    7.00%    gc.concurrentmarksweep.time(m 39<br>nonheap                   126M    137M     -1      92.30%   s)<br>codeheap_&#x27;non-nmethods&#x27;   1M      2M       5M      27.30%<br>metaspace                 97M     104M     -1      93.26%<br><br>Runtime<br>os.name                                                     Linux<br>os.version                                                  4.19.76-linuxkit<br>java.version                                                13.0.2<br>java.home                                                   /opt/es/jdk<br>systemload.average                                          0.00<br>processors                                                  6<br>uptime<br><br></code></pre></td></tr></table></figure><ul><li><p>arthas命令(官方文档里有：<a href="https://arthas.aliyun.com/doc/commands.html">https://arthas.aliyun.com/doc/commands.html</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell">jvm 相关<br>    dashboard - 当前系统的实时数据面板<br>    getstatic - 查看类的静态属性<br>    heapdump - dump java heap, 类似 jmap 命令的 heap dump 功能<br>    jvm - 查看当前 JVM 的信息<br>    logger - 查看和修改 logger<br>    mbean - 查看 Mbean 的信息<br>    memory - 查看 JVM 的内存信息<br>    ognl - 执行 ognl 表达式<br>    perfcounter - 查看当前 JVM 的 Perf Counter 信息<br>    sysenv - 查看 JVM 的环境变量<br>    sysprop - 查看和修改 JVM 的系统属性<br>    thread - 查看当前 JVM 的线程堆栈信息<br>    vmoption - 查看和修改 JVM 里诊断相关的 option<br>    vmtool - 从 jvm 里查询对象，执行 forceGc<br>    class/classloader 相关<br>    classloader - 查看 classloader 的继承树，urls，类加载信息，使用 classloader 去 getResource<br>    dump - dump 已加载类的 byte code 到特定目录<br>    jad - 反编译指定已加载类的源码<br>    mc - 内存编译器，内存编译.java文件为.class文件<br>    redefine - 加载外部的.class文件，redefine 到 JVM 里<br>    retransform - 加载外部的.class文件，retransform 到 JVM 里<br>    sc - 查看 JVM 已加载的类信息<br>    sm - 查看已加载类的方法信息<br><br>monitor/watch/trace 相关<br>    注意：请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 stop 或将增强过的类执行 reset 命令。<br><br>    monitor - 方法执行监控<br>    stack - 输出当前方法被调用的调用路径<br>    trace - 方法内部调用路径，并输出方法路径上的每个节点上耗时<br>    tt - 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测<br>    watch - 方法执行数据观测<br>    profiler/火焰图<br>    profiler - 使用async-profiler对应用采样，生成火焰图<br>    jfr - 动态开启关闭 JFR 记录<br><br>鉴权<br>    auth - 鉴权<br>    options<br>    options - 查看或设置 Arthas 全局开关<br><br>管道<br>    Arthas 支持使用管道对上述命令的结果进行进一步的处理，如sm java.lang.String * | grep &#x27;index&#x27;<br>    grep - 搜索满足条件的结果<br>    plaintext - 将命令的结果去除 ANSI 颜色<br>    wc - 按行统计输出结果<br><br>后台异步任务<br>当线上出现偶发的问题，比如需要 watch 某个条件，而这个条件一天可能才会出现一次时，异步后台任务就派上用场了，详情请参考这里<br><br>    使用 &gt; 将结果重写向到日志文件，使用 &amp; 指定命令是后台运行，session 断开不影响任务执行（生命周期默认为 1 天）<br>    jobs - 列出所有 job<br>    kill - 强制终止任务<br>    fg - 将暂停的任务拉到前台执行<br>    bg - 将暂停的任务放到后台执行<br><br>基础命令<br>    base64 - base64 编码转换，和 linux 里的 base64 命令类似<br>    cat - 打印文件内容，和 linux 里的 cat 命令类似<br>    cls - 清空当前屏幕区域<br>    echo - 打印参数，和 linux 里的 echo 命令类似<br>    grep - 匹配查找，和 linux 里的 grep 命令类似<br>    help - 查看命令帮助信息<br>    history - 打印命令历史<br>    keymap - Arthas 快捷键列表及自定义快捷键<br>    pwd - 返回当前的工作目录，和 linux 命令类似<br>    quit - 退出当前 Arthas 客户端，其他 Arthas 客户端不受影响<br>    reset - 重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类<br>    session - 查看当前会话的信息<br>    stop - 关闭 Arthas 服务端，所有 Arthas 客户端全部退出<br>    tee - 复制标准输入到标准输出和指定的文件，和 linux 里的 tee 命令类似<br>    version - 输出当前目标 Java 进程所加载的 Arthas 版本号<br></code></pre></td></tr></table></figure></li></ul><h2 id="通过web访问arthas"><a href="#通过web访问arthas" class="headerlink" title="通过web访问arthas"></a>通过web访问arthas</h2><ul><li>增加–target-ip参数（上面的操作步骤中已经加过了）</li><li>通过宿主机浏览器进行访问（<a href="http://localhost:3658/">http://localhost:3658</a>）<br><img src="https://pic.yt/i/2025/02/28/67c1293bb983c.png"></li></ul><p>原文连接，在作者的基础上添加修改了部分内容： <a href="https://www.cnblogs.com/liwangcai/p/14060875.html">https://www.cnblogs.com/liwangcai/p/14060875.html</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ARTHAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM垃圾回收器常见的组合和各自的特点</title>
    <link href="/2025/03/19/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%84%E5%90%88%E5%92%8C%E5%90%84%E8%87%AA%E7%9A%84%E7%89%B9%E7%82%B9/"/>
    <url>/2025/03/19/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%84%E5%90%88%E5%92%8C%E5%90%84%E8%87%AA%E7%9A%84%E7%89%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="一、新生代与老年代垃圾回收器的组合"><a href="#一、新生代与老年代垃圾回收器的组合" class="headerlink" title="一、新生代与老年代垃圾回收器的组合"></a><strong>一、新生代与老年代垃圾回收器的组合</strong></h3><table><thead><tr><th><strong>新生代回收器</strong></th><th><strong>老年代回收器</strong></th><th><strong>适用场景</strong></th><th><strong>JDK 默认版本</strong></th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td><strong>Serial Old</strong></td><td>单线程客户端应用、低资源环境</td><td>JDK 1.3~8（客户端模式）</td></tr><tr><td><strong>ParNew</strong></td><td><strong>CMS</strong></td><td>低延迟 Web 服务、响应优先系统</td><td>JDK 5~8（需手动启用）</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td><strong>Parallel Old</strong></td><td>高吞吐量后台任务（计算密集型）</td><td>JDK 7~8（服务端模式默认）</td></tr><tr><td><strong>G1</strong></td><td><strong>G1 自身管理分代</strong></td><td>大堆内存、低延迟、动态分代</td><td>JDK 9+（服务端模式默认）</td></tr></tbody></table><h3 id="二、各组合核心特点"><a href="#二、各组合核心特点" class="headerlink" title="二、各组合核心特点"></a><strong>二、各组合核心特点</strong></h3><h4 id="1-Serial-Serial-Old"><a href="#1-Serial-Serial-Old" class="headerlink" title="1. Serial + Serial Old"></a><strong>1. Serial + Serial Old</strong></h4><ul><li>新生代（Serial）：<ul><li>单线程复制算法（Stop-The-World，STW）。</li><li>简单高效，无线程交互开销。</li></ul></li><li>老年代（Serial Old）：<ul><li>单线程标记-整理算法（STW）。</li></ul></li><li>适用场景：<ul><li>客户端应用（如 Swing 桌面程序）、嵌入式设备。</li><li><strong>缺点</strong>：STW 时间长，不适用于服务端大堆内存。</li></ul></li></ul><h4 id="2-ParNew-CMS"><a href="#2-ParNew-CMS" class="headerlink" title="2. ParNew + CMS"></a><strong>2. ParNew + CMS</strong></h4><ul><li>新生代（ParNew）：<ul><li>多线程复制算法（STW），与 Serial 兼容。</li></ul></li><li>老年代（CMS）：<ul><li>多线程并发标记-清除算法（Concurrent Mark Sweep）。</li><li><strong>四阶段</strong>：初始标记（STW）→ 并发标记→ 重新标记（STW）→ 并发清除。</li></ul></li><li>适用场景：<ul><li>Web 服务、API 服务器（追求低延迟，容忍内存碎片）。</li><li><strong>缺点</strong>：CPU 敏感，内存碎片可能导致 Full GC 退化（需压缩）。</li></ul></li></ul><h4 id="3-Parallel-Scavenge-Parallel-Old"><a href="#3-Parallel-Scavenge-Parallel-Old" class="headerlink" title="3. Parallel Scavenge + Parallel Old"></a><strong>3. Parallel Scavenge + Parallel Old</strong></h4><ul><li>新生代（Parallel Scavenge）：<ul><li>多线程复制算法（STW），<strong>吞吐量优先</strong>。</li></ul></li><li>老年代（Parallel Old）：<ul><li>多线程标记-整理算法（STW）。</li></ul></li><li>适用场景：<ul><li>批处理、科学计算（如 Hadoop 离线任务）。</li><li><strong>缺点</strong>：STW 时间不可控，不适合低延迟场景。</li></ul></li></ul><h4 id="4-G1（Garbage-First）"><a href="#4-G1（Garbage-First）" class="headerlink" title="4. G1（Garbage-First）"></a><strong>4. G1（Garbage-First）</strong></h4><ul><li>分代管理：<ul><li><strong>逻辑分代</strong>：仍保留新生代（Eden&#x2F;Survivor）和老年代（Old）。</li><li><strong>物理划分</strong>：将堆划分为多个大小固定的 Region（1MB~32MB），动态分配为 Eden&#x2F;Survivor&#x2F;Old&#x2F;Humongous（大对象区）。</li></ul></li><li>回收机制：<ul><li><strong>Young GC</strong>：回收新生代 Region（STW）。</li><li><strong>Mixed GC</strong>：同时回收新生代和部分老年代 Region（STW），基于停顿预测模型。</li><li><strong>Full GC</strong>：退化时触发（单线程整理，类似 Serial Old）。</li></ul></li><li>特点：<ul><li><strong>低延迟</strong>：通过 Region 回收和停顿预测控制 STW 时间（默认 200ms）。</li><li><strong>大堆友好</strong>：适合 4GB 以上堆内存。</li><li><strong>内存整理</strong>：Mixed GC 阶段并行整理，减少碎片。</li></ul></li><li>适用场景：<ul><li>现代服务端应用（如微服务、云原生环境）。</li></ul></li></ul><h3 id="三、关于-G1-的疑问解答"><a href="#三、关于-G1-的疑问解答" class="headerlink" title="三、关于 G1 的疑问解答"></a><strong>三、关于 G1 的疑问解答</strong></h3><p><strong>Q: G1 没有老年代了吗？</strong><br><strong>A</strong>: 不是。G1 <strong>仍然有老年代</strong>，但分代方式与传统回收器不同：</p><ol><li><strong>逻辑分代保留</strong>：对象年龄（Age）达到阈值后晋升到老年代。</li><li><strong>物理 Region 动态分配</strong>：老年代由多个 Region 组成，不要求连续内存。</li><li><strong>混合回收（Mixed GC）</strong> ：选择性回收高垃圾比例的老年代 Region，避免全堆扫描。</li></ol><h3 id="四、对比总结"><a href="#四、对比总结" class="headerlink" title="四、对比总结"></a><strong>四、对比总结</strong></h3><table><thead><tr><th><strong>回收器组合</strong></th><th><strong>吞吐量</strong></th><th><strong>延迟</strong></th><th><strong>内存碎片</strong></th><th><strong>适用堆大小</strong></th></tr></thead><tbody><tr><td>Serial + Serial Old</td><td>低</td><td>高</td><td>低</td><td>&lt;100MB</td></tr><tr><td>ParNew + CMS</td><td>中</td><td>低</td><td>高</td><td>2~4GB</td></tr><tr><td>Parallel Scavenge</td><td>高</td><td>中</td><td>低</td><td>2~8GB</td></tr><tr><td>G1</td><td>中高</td><td>低</td><td>低</td><td>&gt;4GB</td></tr></tbody></table><h3 id="五、选择建议"><a href="#五、选择建议" class="headerlink" title="五、选择建议"></a><strong>五、选择建议</strong></h3><ol><li><strong>小堆 &amp; 客户端</strong>：Serial + Serial Old。</li><li><strong>中等堆 &amp; 低延迟</strong>：ParNew + CMS（JDK 8 及之前）。</li><li><strong>大堆 &amp; 高吞吐</strong>：Parallel Scavenge + Parallel Old（计算密集型）。</li><li><strong>大堆 &amp; 低延迟</strong>：G1（JDK 9+ 首选）或 ZGC&#x2F;Shenandoah（超大堆+极低延迟）。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
