<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>金句</title>
    <link href="/2025/07/30/%E9%87%91%E5%8F%A5/"/>
    <url>/2025/07/30/%E9%87%91%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="来自蔡雅奇老师"><a href="#来自蔡雅奇老师" class="headerlink" title="来自蔡雅奇老师"></a>来自蔡雅奇老师</h2><h4 id="我可以有立场，但我正常表达；"><a href="#我可以有立场，但我正常表达；" class="headerlink" title="我可以有立场，但我正常表达；"></a>我可以有立场，但我正常表达；</h4><h4 id="我可以有观点，但我心平气和；"><a href="#我可以有观点，但我心平气和；" class="headerlink" title="我可以有观点，但我心平气和；"></a>我可以有观点，但我心平气和；</h4><h4 id="我可以有我的输出，但我要理性平和；"><a href="#我可以有我的输出，但我要理性平和；" class="headerlink" title="我可以有我的输出，但我要理性平和；"></a>我可以有我的输出，但我要理性平和；</h4><h4 id="绝不会上纲上线，绝不会辱骂人格，-因为这就是一份工作，尊重我们同行，-就是在尊重我们自己的行业。"><a href="#绝不会上纲上线，绝不会辱骂人格，-因为这就是一份工作，尊重我们同行，-就是在尊重我们自己的行业。" class="headerlink" title="绝不会上纲上线，绝不会辱骂人格， 因为这就是一份工作，尊重我们同行， 就是在尊重我们自己的行业。"></a>绝不会上纲上线，绝不会辱骂人格， 因为这就是一份工作，尊重我们同行， 就是在尊重我们自己的行业。</h4>]]></content>
    
    
    <categories>
      
      <category>金句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>金句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell编程第一天</title>
    <link href="/2025/07/14/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E7%AC%AC1%E5%A4%A9/"/>
    <url>/2025/07/14/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E7%AC%AC1%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="1-shell简介"><a href="#1-shell简介" class="headerlink" title="1 shell简介"></a>1 shell简介</h1><h2 id="1-1-核心命令回顾"><a href="#1-1-核心命令回顾" class="headerlink" title="1.1 核心命令回顾"></a>1.1 核心命令回顾</h2><h3 id="1-1-1-筛选信息"><a href="#1-1-1-筛选信息" class="headerlink" title="1.1.1 筛选信息"></a>1.1.1 筛选信息</h3><p>学习目标</p><p>这一节，我们从 shell快捷键、grep、sort、小结、四个方面来学习。</p><p><strong>shell快捷键</strong></p><p>快捷键符号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">命令执行：   <br>    !!                  执行上一条命令<br>    !num                执行历史命令中的第num行命令<br>    Ctrl 关键字          执行内容匹配的命令<br>命令行切换<br>    Ctrl + <span class="hljs-selector-tag">A</span>            光标迅速回到行首<br>    Ctrl + E            光标迅速回到行尾<br>    Ctrl + k            删除光标到行尾内容<br>    Ctrl + u            删除光标到行首内容<br>    Ctrl + <span class="hljs-attribute">y</span>            粘贴删除的内容<br>    Ctrl + c            临时终止命令行命令<br>    Esc + <span class="hljs-selector-tag">b</span>             移动到当前单词的开头<br>    Esc + f             移动到当前单词的结尾<br></code></pre></td></tr></table></figure><p><strong>grep命令</strong></p><p>负责从数据源中检索对应的字符串，行过滤</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs nix">grep options &#x27;keys&#x27; filename<br><span class="hljs-params">OPTIONS:</span><br>    <span class="hljs-operator">-</span><span class="hljs-params">i:</span> 不区分大小写<br>    <span class="hljs-operator">-</span><span class="hljs-params">v:</span> 查找不包含指定内容的行,反向选择<br>    <span class="hljs-operator">-</span><span class="hljs-params">w:</span> 按单词搜索<br>    <span class="hljs-operator">-</span><span class="hljs-params">o:</span> 打印匹配关键字<br>    <span class="hljs-operator">-</span><span class="hljs-params">c:</span> 统计匹配到的次数<br>    <span class="hljs-operator">-</span><span class="hljs-params">n:</span> 显示行号<br>    <span class="hljs-operator">-</span><span class="hljs-params">r:</span> 逐层遍历目录查找<br>    <span class="hljs-operator">-</span><span class="hljs-params">A:</span> 显示匹配行及后面多少行 <br>    <span class="hljs-operator">-</span><span class="hljs-params">B:</span> 显示匹配行及前面多少行<br>    <span class="hljs-operator">-</span><span class="hljs-params">C:</span> 显示匹配行前后多少行<br>    <span class="hljs-operator">-</span>l：只列出匹配的文件名<br>    <span class="hljs-operator">-</span>L：列出不匹配的文件名<br>    <span class="hljs-operator">-</span><span class="hljs-params">e:</span> 使用正则匹配  <br>    <span class="hljs-operator">-</span>E:使用扩展正则匹配<br>    ^key:以关键字开头<br>    key$:以关键字结尾<br>    ^$:匹配空行<br>    <span class="hljs-operator">-</span>-color<span class="hljs-operator">=</span>auto ：可以将找到的关键词部分加上颜色的显示<br>grep 高亮显示<br>centos7中已经为大家设置了，存放在<span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>profile.d<span class="hljs-operator">/</span>colorgrep.sh文件中，如若大家使用的系统中没有设置颜色输出，可以使用以下方法来自行设置<br><br>临时设置：<br><span class="hljs-comment"># alias grep=&#x27;grep --color=auto&#x27;            //只针对当前终端和当前用户生效</span><br><br>永久设置：<br><span class="hljs-number">1</span>）全局（针对所有用户生效）<br>vim <span class="hljs-symbol">/etc/bashrc</span><br>alias grep<span class="hljs-operator">=</span>&#x27;grep <span class="hljs-operator">-</span>-color<span class="hljs-operator">=</span>auto&#x27;<br>source <span class="hljs-symbol">/etc/bashrc</span><br><br><span class="hljs-number">2</span>）局部（针对具体的某个用户）<br>vim <span class="hljs-symbol">~/.bashrc</span><br>alias grep<span class="hljs-operator">=</span>&#x27;grep <span class="hljs-operator">-</span>-color<span class="hljs-operator">=</span>auto&#x27;<br>source <span class="hljs-symbol">~/.bashrc</span><br>常用命令选项必知必会  示例：<br><span class="hljs-comment"># grep -i root passwd                   忽略大小写匹配包含root的行</span><br><span class="hljs-comment"># grep -w ftp passwd                    精确匹配ftp单词</span><br><span class="hljs-comment"># grep -wo ftp passwd                   打印匹配到的关键字ftp</span><br><span class="hljs-comment"># grep -n root passwd                   打印匹配到root关键字的行好</span><br><span class="hljs-comment"># grep -ni root passwd                  忽略大小写匹配统计包含关键字root的行</span><br><span class="hljs-comment"># grep -nic root passwd                 忽略大小写匹配统计包含关键字root的行数</span><br><span class="hljs-comment"># grep -i ^root passwd                  忽略大小写匹配以root开头的行</span><br><span class="hljs-comment"># grep bash$ passwd                     匹配以bash结尾的行</span><br><span class="hljs-comment"># grep -n ^$ passwd                     匹配空行并打印行号</span><br><span class="hljs-comment"># grep ^# /etc/vsftpd/vsftpd.conf       匹配以#号开头的行</span><br><span class="hljs-comment"># grep -v ^# /etc/vsftpd/vsftpd.conf    匹配不以#号开头的行</span><br><span class="hljs-comment"># grep -A 5 mail passwd                 匹配包含mail关键字及其后5行</span><br><span class="hljs-comment"># grep -B 5 mail passwd                 匹配包含mail关键字及其前5行</span><br><span class="hljs-comment"># grep -C 5 mail passwd                 匹配包含mail关键字及其前后5行</span><br></code></pre></td></tr></table></figure><p><strong>sort命令</strong></p><p>信息排序</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs vim">语法：<br><span class="hljs-keyword">sort</span> [<span class="hljs-keyword">options</span>] <span class="hljs-keyword">file</span><br>将文件的每一行作为一个单位，从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。<br><br><span class="hljs-keyword">options</span>:<br>-<span class="hljs-keyword">u</span> ：去除重复行<br>-r ：降序排列，默认是升序<br>-<span class="hljs-keyword">o</span> : 将排序结果输出到文件中  类似 重定向符号&gt;<br>-n ：以数字排序，默认是按字符排序<br>-t ：分隔符<br>-<span class="hljs-keyword">k</span> ：第<span class="hljs-keyword">N</span>列<br>-<span class="hljs-keyword">b</span> ：忽略前导空格。<br>-R ：随机排序，每次运行的结果均不同。<br>文件内容<br>[root@localhost ~]# <span class="hljs-keyword">cat</span> num.txt<br><span class="hljs-number">9</span><br><span class="hljs-number">8</span><br><span class="hljs-number">6</span><br><span class="hljs-number">8</span><br><span class="hljs-number">4</span><br><span class="hljs-number">7</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><br>内容升序<br>[root@localhost ~]# <span class="hljs-keyword">sort</span> -n num.txt<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br><span class="hljs-number">8</span><br><span class="hljs-number">9</span><br><br>内容降序<br>[root@localhost ~]# <span class="hljs-keyword">sort</span> -r num.txt<br><span class="hljs-number">9</span><br><span class="hljs-number">9</span><br><span class="hljs-number">8</span><br><span class="hljs-number">7</span><br><span class="hljs-number">6</span><br><span class="hljs-number">4</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><br>其他实践<br><span class="hljs-keyword">sort</span> -<span class="hljs-keyword">nu</span> num.txt                升序去重<br><span class="hljs-keyword">sort</span> -<span class="hljs-keyword">ru</span> num.txt                降序去重<br><span class="hljs-keyword">sort</span> -nru num.txt               先升序后降序再去重<br><span class="hljs-keyword">sort</span> -R num.txt                 随机排序<br><span class="hljs-keyword">sort</span> -<span class="hljs-keyword">nu</span> num.txt -<span class="hljs-keyword">o</span> /tmp/<span class="hljs-keyword">a</span>.txt  升序去重后输出到一个文件<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="1-1-2-处理信息"><a href="#1-1-2-处理信息" class="headerlink" title="1.1.2 处理信息"></a>1.1.2 处理信息</h3><p>学习目标</p><p>这一节，我们从 cut、tr、uniq 、小结 四个方面来学习。</p><p><strong>cut命令</strong></p><p>数据截取</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Mandatory arguments <span class="hljs-keyword">to</span> long options are mandatory <span class="hljs-keyword">for</span> short options too.<br>  -b, <span class="hljs-comment">--bytes=列表              只选中指定的这些字节</span><br>  -c, <span class="hljs-comment">--characters=列表         只选中指定的这些字符</span><br>  -d, <span class="hljs-comment">--delimiter=分界符        使用指定分界符代替制表符作为区域分界</span><br>  -f, <span class="hljs-comment">--fields=LIST       select only these fields;  also print any line</span><br>                            <span class="hljs-keyword">that</span> <span class="hljs-keyword">contains</span> no delimiter <span class="hljs-built_in">character</span>, unless<br>                            <span class="hljs-keyword">the</span> -s option <span class="hljs-keyword">is</span> specified<br>  -n                      <span class="hljs-keyword">with</span> -b: don&#x27;t split multibyte <span class="hljs-built_in">characters</span><br>      <span class="hljs-comment">--complement              补全选中的字节、字符或域</span><br>  -s, <span class="hljs-comment">--only-delimited          不打印没有包含分界符的行</span><br>      <span class="hljs-comment">--output-delimiter=字符串 使用指定的字符串作为输出分界符，默认采用输入</span><br>                                的分界符<br>      <span class="hljs-comment">--help            显示此帮助信息并退出</span><br>      <span class="hljs-comment">--version         显示版本信息并退出</span><br><span class="hljs-comment"># cut -d: -f1 1.txt             以:冒号分割，截取第1列内容</span><br><span class="hljs-comment"># cut -d: -f1,6,7 1.txt         以:冒号分割，截取第1,6,7列内容</span><br><span class="hljs-comment"># cut -c4 1.txt                 截取文件中每行第4个字符</span><br><span class="hljs-comment"># cut -c1-4 1.txt               截取文件中每行的1-4个字符</span><br><span class="hljs-comment"># cut -c5- 1.txt                从第5个字符开始截取后面所有字符</span><br></code></pre></td></tr></table></figure><p><strong>tr命令</strong></p><p>字符转换、替换、删除</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs elixir">用法：tr [选项]... <span class="hljs-title class_">SET1</span> [<span class="hljs-title class_">SET2</span>]<br>从标准输入中替换、缩减和/或删除字符，并将结果写到标准输出。<br><br>  -c, -C, --complement          首先补足<span class="hljs-title class_">SET1</span><br>  -d, --delete                  删除匹配<span class="hljs-title class_">SET1</span> 的内容，并不作替换<br>  -s, --squeeze-repeats         如果匹配于<span class="hljs-title class_">SET1</span> 的字符在输入序列中存在连续的<br>                                重复，在替换时会被统一缩为一个字符的长度<br>  -t, --truncate-set1           先将<span class="hljs-title class_">SET1</span> 的长度截为和<span class="hljs-title class_">SET2</span> 相等<br>      --help                    显示此帮助信息并退出<br>      --version                 显示版本信息并退出<br>      <br>用法<span class="hljs-number">1</span>：把commands命令输出做为tr输入进行处理<br>commands | tr  <span class="hljs-string">&#x27;string1&#x27;</span>  <span class="hljs-string">&#x27;string2&#x27;</span><br><br>用法<span class="hljs-number">2</span>：把文件中的内容输入给tr进行处理<br>tr  <span class="hljs-string">&#x27;string1&#x27;</span>  <span class="hljs-string">&#x27;string2&#x27;</span> &lt; filename<br><br>用法<span class="hljs-number">3</span>：把文件中的内容输入给tr进行处理，需要使用到选项<br>tr options <span class="hljs-string">&#x27;string1&#x27;</span> &lt; filename<br>示例<span class="hljs-number">1</span>：通过tr把反复出现的内容进行压缩，压缩后再处理。<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># ifconfig eth0 | grep -w inet</span><br>        inet <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span>  netmask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span>  broadcast <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># ifconfig eth0 | grep -w inet | tr -s &quot; &quot;</span><br> inet <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span> netmask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span> broadcast <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># ifconfig eth0 | grep -w inet | tr -s &quot; &quot; | cut -d &quot; &quot; -f 3  # 因为压缩空格之后前面的空格前还有一段</span><br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br>示例<span class="hljs-number">2</span>： 文件的演示<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># head -n 5 /etc/passwd &gt; test1.txt</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># tr &#x27;[0-9]&#x27; &#x27;@&#x27; &lt; test1.txt</span><br><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span>@<span class="hljs-symbol">:</span>@<span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span>@<span class="hljs-symbol">:</span>@<span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/sbin/nologin</span><br><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span>@<span class="hljs-symbol">:</span>@<span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/sbin/nologin</span><br><span class="hljs-symbol">adm:</span><span class="hljs-symbol">x:</span>@<span class="hljs-symbol">:</span>@<span class="hljs-symbol">:adm</span><span class="hljs-symbol">:/var/adm</span><span class="hljs-symbol">:/sbin/nologin</span><br><span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span>@<span class="hljs-symbol">:</span>@<span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/sbin/nologin</span><br><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># tr &#x27;[a-z]&#x27; &#x27;[A-Z]&#x27; &lt; test1.txt</span><br><span class="hljs-symbol">ROOT:</span><span class="hljs-symbol">X:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:ROOT</span><span class="hljs-symbol">:/ROOT</span><span class="hljs-symbol">:/BIN/BASH</span><br><span class="hljs-symbol">BIN:</span><span class="hljs-symbol">X:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:BIN</span><span class="hljs-symbol">:/BIN</span><span class="hljs-symbol">:/SBIN/NOLOGIN</span><br><span class="hljs-symbol">DAEMON:</span><span class="hljs-symbol">X:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:DAEMON</span><span class="hljs-symbol">:/SBIN</span><span class="hljs-symbol">:/SBIN/NOLOGIN</span><br><span class="hljs-symbol">ADM:</span><span class="hljs-symbol">X:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">4</span><span class="hljs-symbol">:ADM</span><span class="hljs-symbol">:/VAR/ADM</span><span class="hljs-symbol">:/SBIN/NOLOGIN</span><br><span class="hljs-symbol">LP:</span><span class="hljs-symbol">X:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:LP</span><span class="hljs-symbol">:/VAR/SPOOL/LPD</span><span class="hljs-symbol">:/SBIN/NOLOGIN</span><br></code></pre></td></tr></table></figure><p><strong>uniq命令</strong> </p><p>连续信息去重</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vim">Mandatory arguments <span class="hljs-keyword">to</span> long <span class="hljs-keyword">options</span> are mandatory <span class="hljs-keyword">for</span> short <span class="hljs-keyword">options</span> too.<br>  -<span class="hljs-keyword">c</span>, --<span class="hljs-built_in">count</span>           统计重复行次数<br>  -d, --repeated        只显示重复行<br>  -i, --ignore-case     忽略大小写<br>  -s, --skip-chars=<span class="hljs-keyword">N</span>    avoid comparing the <span class="hljs-keyword">first</span> <span class="hljs-keyword">N</span> characters<br>  -<span class="hljs-keyword">u</span>, --unique          <span class="hljs-keyword">only</span> <span class="hljs-keyword">print</span> unique lines<br>文件内容<br>[root@localhost ~]# <span class="hljs-keyword">cat</span> uniq.txt<br>AA<br>aa<br>aa<br>bb<br><span class="hljs-keyword">cc</span><br><span class="hljs-keyword">cc</span><br>dd<br><br>去重演示<br>[root@localhost ~]# uniq uniq.txt<br>AA<br>aa<br>bb<br><span class="hljs-keyword">cc</span><br>dd<br><br>其他演示<br>uniq -i uniq.txt            大小写不敏感去重<br>uniq -ic uniq.txt           大小写不敏感去重后计数<br>uniq -d uniq.txt            仅显示重复的内容<br><span class="hljs-keyword">sort</span> -n num.txt  | uniq     结合<span class="hljs-keyword">sort</span>排序后去重<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="1-1-3-组合信息"><a href="#1-1-3-组合信息" class="headerlink" title="1.1.3 组合信息"></a>1.1.3 组合信息</h3><p>学习目标</p><p>这一节，我们从  paste、xargs、小结、两个方面来学习。</p><p><strong>paste命令</strong></p><p>合并文件行内容输出到屏幕，不会改动源文件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs autoit">Mandatory arguments <span class="hljs-keyword">to</span> long options are mandatory <span class="hljs-keyword">for</span> short options too.<br>  -d, --delimiters=列表 改用指定列表里的字符替代制表分隔符<br>  -s, --serial          不使用平行的行目输出模式，而是每个文件占用一行<br>      --help            显示此帮助信息并退出<br>      --version         显示版本信息并退出<br>文件内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat a.txt</span><br>hello<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat b.txt</span><br>world<br><span class="hljs-number">888</span><br><span class="hljs-number">999</span><br><br>内容合并<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># paste a.txt b.txt</span><br>hello   world<br>        <span class="hljs-number">888</span><br>        <span class="hljs-number">999</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># paste b.txt a.txt</span><br>world   hello<br><span class="hljs-number">888</span><br><span class="hljs-number">999</span><br><br>自定义分隔符后合并内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># paste -d<span class="hljs-string">&#x27;@&#x27;</span> b.txt a.txt</span><br>world<span class="hljs-symbol">@hello</span><br><span class="hljs-number">888</span>@<br><span class="hljs-number">999</span>@<br><br>将一个文件所有内容一行输出<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># paste -s b.txt</span><br>world   <span class="hljs-number">888</span>     <span class="hljs-number">999</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># paste -d<span class="hljs-string">&#x27;@&#x27;</span> -s b.txt</span><br>world<span class="hljs-symbol">@888</span><span class="hljs-symbol">@999</span><br></code></pre></td></tr></table></figure><p><strong>xargs命令</strong></p><p>命令结果传递</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">作用：<br>    xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。<br>    xargs 一般是和管道一起使用。<br><br>命令格式：<br>    somecommand |xargs -item  <span class="hljs-keyword">command</span><br><br>OPTIONS:<br>    -a file 从文件中读入作为sdtin<br>    -E flag flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。<br>    -p 当每次执行一个argument的时候询问一次用户。<br>    -n num 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。<br>    -t 表示先打印命令，然后再执行。<br>    -i 或者是-I，将xargs接收的每项名称，逐行赋值给 &#123;&#125;，可以用 &#123;&#125; 代替。<br>    -r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了。<br>    -d delim 分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符。<br><br><br>注意：linux命令格式一般为<br>    命令    命令选项     参数<br>    上一个命令的输出就是下一个命令的参数  这句话结合命令语法  应该知道输出的内容在下一个命令的位置了吧。<br>从文件中读取内容<br>[root@localhost ~]<span class="hljs-comment"># xargs -a num.txt</span><br>9 8 6 8 4 7 2 1<br><br>从文件中读取内容时，指定内容结束符号<br>[root@localhost ~]<span class="hljs-comment"># xargs -a num.txt -E 4</span><br>9 8 6 8<br><br>从文件中读取内容时，询问用户是否显示，y显示，其他不显示<br>[root@localhost ~]<span class="hljs-comment"># xargs -a num.txt -p</span><br><span class="hljs-keyword">echo</span> 9 8 6 8 4 7 2 1 ?<span class="hljs-string">...y</span><br>9 8 6 8 4 7 2 1<br>[root@localhost ~]<span class="hljs-comment"># xargs -a num.txt -p</span><br><span class="hljs-keyword">echo</span> 9 8 6 8 4 7 2 1 ?<span class="hljs-string">...n</span><br><br>从文件中读取内容时，指定每行显示几个内容<br>[root@localhost ~]<span class="hljs-comment"># xargs -a num.txt -n4</span><br>9 8 6 8<br>4 7 2 1<br><br>从文件中读取内容时，指定每行显示几个内容，没显示一行询问一下用户<br>[root@localhost ~]<span class="hljs-comment"># xargs -a num.txt -n4 -p</span><br><span class="hljs-keyword">echo</span> 9 8 6 8 ?<span class="hljs-string">...y</span><br>9 8 6 8<br><span class="hljs-keyword">echo</span> 4 7 2 1 ?<span class="hljs-string">...y</span><br>4 7 2 1<br><br>默认xargs以空格为分隔符，可以通过-d来自定义分隔符<br>[root@localhost ~]<span class="hljs-comment"># echo &quot;ab cd ef g&quot; | xargs</span><br>ab <span class="hljs-keyword">cd</span> ef g<br>[root@localhost ~]<span class="hljs-comment"># echo &quot;nameXnameXnameXname&quot; | xargs -dX</span><br>name name name name<br>[root@localhost ~]<span class="hljs-comment"># echo &quot;nameXnameXnameXname&quot; | xargs</span><br>nameXnameXnameXname<br>-I 临时存储内容给一个对象，然后进行后续处理<br>[root@localhost ~]<span class="hljs-comment"># xargs -a num.txt -n1 -I &#123;&#125; echo &#123;&#125;--bak</span><br>9<span class="hljs-params">--bak</span><br>8<span class="hljs-params">--bak</span><br>6<span class="hljs-params">--bak</span><br>8<span class="hljs-params">--bak</span><br>4<span class="hljs-params">--bak</span><br>7<span class="hljs-params">--bak</span><br>2<span class="hljs-params">--bak</span><br>1<span class="hljs-params">--bak</span><br><br>-I的综合运用，转移文件并改名<br>[root@localhost ~]<span class="hljs-comment"># ls *.txt</span><br>a.txt  b.txt  num.txt  test1.txt  uniq.txt<br>[root@localhost ~]<span class="hljs-comment"># ls *.txt | xargs -n1 -I &#123;&#125; cp &#123;&#125; /tmp/&#123;&#125;-bak</span><br>[root@localhost ~]<span class="hljs-comment"># ls /tmp/*-bak</span><br><span class="hljs-string">/tmp/a.txt-bak</span>  <span class="hljs-string">/tmp/num.txt-bak</span>    <span class="hljs-string">/tmp/uniq.txt-bak</span><br><span class="hljs-string">/tmp/b.txt-bak</span>  <span class="hljs-string">/tmp/test1.txt-bak</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="1-2-编程简介"><a href="#1-2-编程简介" class="headerlink" title="1.2 编程简介"></a>1.2 编程简介</h2><h3 id="1-2-1-编程语言解读"><a href="#1-2-1-编程语言解读" class="headerlink" title="1.2.1 编程语言解读"></a>1.2.1 编程语言解读</h3><p>学习目标</p><p>这一节，我们从 基础知识、编程语言、小结 三个方面来学习。</p><p><strong>基础知识</strong></p><p>程序</p><p><img src="H:/2024/msb2023shell%20%E7%BC%96%E7%A8%8B/shell%E7%BC%96%E7%A8%8B/%E8%AF%BE%E4%BB%B6%E5%86%85%E5%AE%B9/%E8%AF%BE%E4%BB%B6%E5%86%85%E5%AE%B9/%E7%AC%AC1%E5%A4%A9/image/image-20220607184357946.png?lastModify=1752502307" alt="image-20220607184357946"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">外在关系：<br><span class="hljs-code">    业务数据：用户访问业务时候，产生的信息内容</span><br><span class="hljs-code">    数据结构：静态的描述了数据元素之间的关系</span><br><span class="hljs-code">    算法：解决各种实际问题的方法和思路</span><br><span class="hljs-code">    数据结构 + 算法 = 程序</span><br><span class="hljs-code">内在关系：</span><br><span class="hljs-code">    算法其实就是数据的表示和处理，而数据的处理受到数据的各种存储形式的约束，所以算法的效率和样式受到数据结构的严重约束。</span><br><span class="hljs-code"></span><br><span class="hljs-code">    数据结构存储下来的数据为为算法服务的，而算法存在的意义就是为了数据结构中的内容而存在的。</span><br><span class="hljs-code">    所以说：数据结构和算法，是你中有我，我中有你的合二为一的关系</span><br><span class="hljs-code"></span><br>理解：<br><span class="hljs-code">    我们一般说的数据不是干巴巴的字母数字，而是在某种场景下来对这些数据的含义进行分析等操作，数据一旦有了场景意义: </span><br><span class="hljs-code">    &quot;一&quot; 在不同场景的声音和含义。</span><br><span class="hljs-code">    纯粹的数据加上场景，他们就有了新的名称：ADT</span><br></code></pre></td></tr></table></figure><p>ADT</p><p><img src="http://cdn.882227.xyz/image-20220607184745329.png" alt="image-20220607184745329"></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl">举例一：<br>    数据类型-人                       多个人，陈浩南、山鸡、大天二、大飞...<br>    数据运算-关系                     彼此间的团队联系<br>    抽象数据类型=类型+运算=人+关系       洪兴<br>举例二：<br>    游戏按钮“空格”：人物<span class="hljs-function"><span class="hljs-title">A</span>(数据类型) + 打子弹(动作)</span><br></code></pre></td></tr></table></figure><p><strong>编程语言</strong></p><p>编程</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">所谓的编程，就是将我们的功能思路用代码的方式实现出来。一般情况下，这些实现的思路主要有两种方式：<br><br>面向过程编程<br>    将任务功能拆分成多个子部分，然后按照顺序依次执行下去。<br>    <span class="hljs-bullet">-</span> <span class="hljs-string">问题规模小，可以步骤化，按部就班处理</span><br>    比较符合我们自己做一件事情的思路。<br>面向对象编程<br>    将任务功能拆分成多个子部分，然后按照顺序依次找不同的人执行下去。<br>    <span class="hljs-bullet">-</span> <span class="hljs-string">问题规模大，复杂系统</span><br>    比较符合我们的领导指挥一个部门的人做事情的思路。<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220607190012445.png" alt="image-20220607190012445"></p><p>编程语言</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">所谓编程语言，指的是以哪种风格代码方式把程序编写出来。每一种编程风格就是一系列的编程语言。<br><br>参考资料：<br>    https:<span class="hljs-regexp">//</span>www.tiobe.com<span class="hljs-regexp">/tiobe-index/</span><br>    https:<span class="hljs-regexp">//</span>hellogithub.com<span class="hljs-regexp">/report/</span>tiobe/<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220607191238570.png" alt="image-20220607191238570"></p><p><strong>小结</strong></p><h3 id="1-2-2-编程语言逻辑"><a href="#1-2-2-编程语言逻辑" class="headerlink" title="1.2.2 编程语言逻辑"></a>1.2.2 编程语言逻辑</h3><p>学习目标</p><p>这一节，我们从 语言分类、编程逻辑、小结 三个方面来学习。</p><p><strong>语言分类</strong></p><p>语言分类</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">低级编程语言：<br>    机器：<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">二进制的0和1的序列，称为机器指令。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">一般人看不懂</span><br>    汇编：<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">用一些助记符号替代机器指令，称为汇编语言。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">一般人看不懂，但是能够有感觉</span><br>高级编程语言：<br>    编译：<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">借助于专属编译器将一些高级语言编译成机器代码文件，然后再交给程序去执行。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">如：C，C++等</span><br>    解释：<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">将高级语言的代码逐行加载到解释器环境，逐行解释为机器代码，然后再交给程序去执行。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">如：shell，python，php，JavaScript等</span><br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220607192547404.png" alt="image-20220607192547404"></p><p><strong>编程逻辑</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">编程语言的目的是通过风格化的编程思路将代码写出来后，实现项目功能的。为了实现功能，我们通过在代码层面通过一些代码逻辑来实现：<br>    顺序执行 - 程序按从上到下顺序执行<br>    选择执行 - 程序执行过程中，根据条件选择不同的顺序执行<br>    循环执行 - 程序执行过程中，根据条件重复执行代码<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220607193946767.png" alt="image-20220607193946767"></p><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="1-3-shell基础"><a href="#1-3-shell基础" class="headerlink" title="1.3 shell基础"></a>1.3 shell基础</h2><h3 id="1-3-1-shell简介"><a href="#1-3-1-shell简介" class="headerlink" title="1.3.1 shell简介"></a>1.3.1 shell简介</h3><p>学习目标</p><p>这一节，我们从  运维、shell语言、小结 三个方面来学习。</p><p><strong>运维</strong></p><p>简介</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">运维是什么？<br>    所谓的运维，其实就是公司的内部项目当中的一个技术岗位而已，它主要做的是项目的维护性工作。它所涉及的内容范围非常多。<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220607195615193.png" alt="image-20220607195615193"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">以xx项目为例：<br>    规划：我们需要多少资源来支持项目的运行         <br>    管理：项目运行过程中的所有内容都管理起来<br>    流程规范：所有操作都形成制度，提高工作效率<br>    平台：大幅度提高工作效率<br>    监控：实时查看项目运行状态指标<br>    告警：状态指标异常，告知工作人员处理<br>    安全：网站运营安全措施<br>    优化：保证用户访问网站体验很好<br>    考核：权责分配，保证利益<br>自动化运维：就是将图里面所有的工作都使用自动化的方式来实现。<br>    实现自动化的方式很多，常见的方式：工具和脚本。<br>    工作中常见的脚本有哪些呢？<br>    <span class="hljs-keyword">shell</span><span class="language-bash">脚本 和 其他开发语言脚本</span><br></code></pre></td></tr></table></figure><p><strong>shell语言</strong></p><p>shell定义</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">在计算机科学中，<span class="hljs-built_in">Shell</span>就是一个命令解释器。<br><span class="hljs-built_in">shell</span>是位于操作系统和应用程序之间，是他们二者最主要的接口，<span class="hljs-built_in">shell</span>负责把应用程序的输入命令信息解释给操作系统，将操作系统指令处理后的结果解释给应用程序。<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220607200101373.png" alt="image-20220607200101373"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">一句话，<span class="hljs-keyword">shell</span><span class="language-bash">就是在操作系统和应用程序之间的一个命令翻译工具。</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="1-3-2-shell实践"><a href="#1-3-2-shell实践" class="headerlink" title="1.3.2 shell实践"></a>1.3.2 shell实践</h3><p>学习目标</p><p>这一节，我们从 shell分类、shell实践、小结 三个方面来学习。</p><p><strong>shell分类</strong></p><p>简介</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">在不同的操作系统上，<span class="hljs-keyword">shell</span>的表现样式是不一样的，按照我的角度，它主要分为两类<br>图形界面<span class="hljs-keyword">shell</span><br>    图形界面<span class="hljs-keyword">shell</span>就是我们常说的桌面　　<br>命令行式<span class="hljs-keyword">shell</span><br>    windows系统:<br>        cmd.<span class="hljs-keyword">exe</span>  命令提示字符<br>    linux系统:<br>        <span class="hljs-keyword">sh</span> / csh / ksh / bash(默认) / ...<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220607200616935.png" alt="image-20220607200616935"></p><p>查看系统的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs awk">查看当前系统的shell类型<br>[root@localhost ~]<span class="hljs-comment"># echo $SHELL</span><br><span class="hljs-regexp">/bin/</span>bash<br><br>查看当前系统环境支持的shell<br>[root@localhost ~]<span class="hljs-comment"># cat /etc/shells</span><br><span class="hljs-regexp">/bin/</span>sh<br><span class="hljs-regexp">/bin/</span>bash<br><span class="hljs-regexp">/usr/</span>bin/sh<br><span class="hljs-regexp">/usr/</span>bin/bash<br>更改默认的shell<br>chsh &lt;用户名&gt; -s &lt;新shell&gt;<br><br>[root@localhost ~]<span class="hljs-comment"># su - python</span><br>[python@localhost ~]$ <span class="hljs-keyword">exit</span><br>登出<br>[root@localhost ~]<span class="hljs-comment"># chsh python -s /bin/sh</span><br>Changing shell <span class="hljs-keyword">for</span> python.<br>Shell changed.<br>[root@localhost ~]<span class="hljs-comment"># su - python</span><br>上一次登录：二 <span class="hljs-number">6</span>月  <span class="hljs-number">7</span> <span class="hljs-number">20</span>:<span class="hljs-number">11</span>:<span class="hljs-number">13</span> CST <span class="hljs-number">2022</span>pts/<span class="hljs-number">0</span> 上<br>-sh-<span class="hljs-number">4.2</span>$ <span class="hljs-keyword">exit</span><br>登出<br>[root@localhost ~]<span class="hljs-comment"># chsh python -s /bin/bash</span><br>Changing shell <span class="hljs-keyword">for</span> python.<br>Shell changed.<br>[root@localhost ~]<span class="hljs-comment"># su - python</span><br>上一次登录：二 <span class="hljs-number">6</span>月  <span class="hljs-number">7</span> <span class="hljs-number">20</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span> CST <span class="hljs-number">2022</span>pts/<span class="hljs-number">0</span> 上<br>[python@localhost ~]$ echo <span class="hljs-variable">$SHELL</span><br><span class="hljs-regexp">/bin/</span>bash<br>安装shell<br>yum list | grep zsh<br>yum install -y zsh<br><br>查看效果<br>[root@localhost ~]<span class="hljs-comment"># cat /etc/shells</span><br><span class="hljs-regexp">/bin/</span>sh<br><span class="hljs-regexp">/bin/</span>bash<br><span class="hljs-regexp">/usr/</span>bin/sh<br><span class="hljs-regexp">/usr/</span>bin/bash<br><span class="hljs-regexp">/bin/</span>zsh<br></code></pre></td></tr></table></figure><p><strong>shell实践</strong></p><p>命令行实践方式</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs autoit">描述：<br>    手工敲击键盘,在shell的命令行输入命令,按Enter后,执行通过键盘输入的命令,然后shell返回并显示命令执行的结果.<br>    <br>重点：<br>    逐行输入命令、逐行进行确认执行<br>直接找一个终端界面执行一些可执行的命令即可<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># whoami</span><br>root<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># pwd</span><br>/root<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># date +<span class="hljs-string">&quot;%F %T&quot;</span></span><br><span class="hljs-number">2022</span><span class="hljs-number">-06</span><span class="hljs-number">-07</span> <span class="hljs-number">20</span>:<span class="hljs-number">14</span>:<span class="hljs-number">46</span><br></code></pre></td></tr></table></figure><p>文件实现方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">描述：<br>    就是说我们把手工执行的命令a，写到一个脚本文件b中，然后通过执行脚本b，达到执行命令a的效果.<br>    <br>重点：<br>    按照文件内容的顺序执行。<br>找一个文件，将我们刚才执行成功的命令放到里面。<br><br>[root@localhost ~]# <span class="hljs-built_in">cat</span> <span class="hljs-built_in">test</span><br><span class="hljs-built_in">whoami</span><br><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%F %T&quot;</span><br>[root@localhost ~]# /bin/bash <span class="hljs-built_in">test</span><br>root<br>/root<br>2022-06-07 20:16:20<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="1-3-3-shell脚本实践"><a href="#1-3-3-shell脚本实践" class="headerlink" title="1.3.3 shell脚本实践"></a>1.3.3 shell脚本实践</h3><p>学习目标</p><p>这一节，我们从  脚本基础、脚本实践、小结 三个方面来学习</p><p><strong>脚本基础</strong></p><p>shell脚本</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">当可执行的Linux命令或语句不在命令行状态下执行，而是通过一个文件执行时，我们称文件为<span class="hljs-keyword">shell</span><span class="language-bash">脚本。</span><br></code></pre></td></tr></table></figure><p>应用场景</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">重复化、复杂化的工作，通过把工作的命令写成脚本，以后仅仅需要执行脚本就能完成这些工作。<br>    自动化分析处理<br>    自动化备份<br>    自动化批量部署安装<br>    等等<span class="hljs-string">...</span> <br></code></pre></td></tr></table></figure><p>脚本创建</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">脚本创建工具：<br>    创建脚本的常见编辑器是 <span class="hljs-keyword">vi</span>/<span class="hljs-keyword">vim</span>.<br><br>脚本命名<br>    <span class="hljs-keyword">shell</span>脚本的命名简单来说就是要有意义，方便我们通过脚本名，来知道这个文件是干什么用的。<br><br>脚本内容：<br>    各种可以执行的命令<br></code></pre></td></tr></table></figure><p>脚本注释</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">单行注释：<br>    除了首行的<span class="hljs-comment">#不是注释外，其他所有行内容，只要首个字符是#,那么就表示该行是注释</span><br>多行注释：<br>    多行注释有两种方法：<span class="hljs-symbol">:&lt;&lt;</span>! ... !  和 <span class="hljs-symbol">:&lt;&lt;</span>字符 ... 字符<br></code></pre></td></tr></table></figure><p><strong>脚本实践</strong></p><p>脚本示例1</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs perl">脚本内容<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># cat get_netinfo.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 功能：获取当前主机的网卡设备信息</span><br><span class="hljs-comment"># 作者：wangshuji</span><br><span class="hljs-comment"># 版本：V0.1</span><br><span class="hljs-comment"># 联系：www.superopsmsb.com</span><br><br><span class="hljs-comment"># 获取ip地址信息</span><br>ifconfig eth0 | <span class="hljs-keyword">grep</span> -w inet | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs echo <span class="hljs-string">&quot;IP: &quot;</span><br><br><span class="hljs-comment"># 获取掩码地址信息</span><br>ifconfig eth0 | <span class="hljs-keyword">grep</span> -w inet | awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span> | xargs echo <span class="hljs-string">&quot;NetMask: &quot;</span><br><br><span class="hljs-comment"># 获取广播地址信息</span><br>ifconfig eth0 | <span class="hljs-keyword">grep</span> -w inet | awk <span class="hljs-string">&#x27;&#123;print $6&#125;&#x27;</span> | xargs echo <span class="hljs-string">&quot;Broadcast: &quot;</span><br><br><span class="hljs-comment"># 获取MAC地址信息</span><br>ifconfig eth0 | <span class="hljs-keyword">grep</span> ether | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> |xargs echo <span class="hljs-string">&quot;MAC Address: &quot;</span><br>执行脚本<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># /bin/bash get_netinfo.sh</span><br>IP:  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br>NetMask:  <span class="hljs-number">255.255</span><span class="hljs-number">.255</span>.<span class="hljs-number">0</span><br>Broadcast:  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>MAC Address:  <span class="hljs-number">00</span>:0c:<span class="hljs-number">29</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span>:8c<br></code></pre></td></tr></table></figure><p>脚本注释</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs d">更改脚本内容<br>[root<span class="hljs-keyword">@localhost</span> ~]# cat get_netinfo.sh<br><span class="hljs-meta">#!/bin/bash</span><br>:&lt;&lt;!<br>功能：获取当前主机的网卡设备信息<br>作者：wangshuji<br>版本：V0<span class="hljs-number">.1</span><br>联系：www.superopsmsb.com<br>!<br>... ...<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="1-3-4-脚本执行"><a href="#1-3-4-脚本执行" class="headerlink" title="1.3.4 脚本执行"></a>1.3.4 脚本执行</h3><p>这一节，我们从 脚本执行、脚本调试、小结 三个方面来学习。</p><p><strong>脚本执行</strong></p><p>脚本执行方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">方法<span class="hljs-number">1</span>：<br>    bash /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/script-<span class="hljs-type">name</span>   或   /bin/bash /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/script-<span class="hljs-type">name</span>  （强烈推荐使用）<br>    <br>方法<span class="hljs-number">2</span>：<br>    /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/script-<span class="hljs-type">name</span>        或   ./script-<span class="hljs-type">name</span>   （当前路径下执行脚本）<br>    <br>方法<span class="hljs-number">3</span>：<br>    source script-<span class="hljs-type">name</span>          或   . script-<span class="hljs-type">name</span>   （注意“.“点号）<br>    <br>方法<span class="hljs-number">1</span>变种：<br>    cat /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/script-<span class="hljs-type">name</span> | bash<br>    bash /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/script-<span class="hljs-type">name</span><br>脚本执行说明<br><span class="hljs-number">1</span>、脚本文件本身没有可执行权限或者脚本首行没有命令解释器时使用的方法，我们推荐用bash执行。<br>    使用频率：☆☆☆☆☆<br><span class="hljs-number">2</span>、脚本文件具有可执行权限时使用。<br>    使用频率：☆☆☆☆<br><span class="hljs-number">3</span>、使用source或者.点号，加载shell脚本文件内容，使shell脚本内容环境和当前用户环境一致。<br>    使用频率：☆☆☆<br>    使用场景：环境一致性<br></code></pre></td></tr></table></figure><p>执行示例</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs nix">方法<span class="hljs-number">1</span>：<br>[root@localhost ~]<span class="hljs-comment"># /bin/bash get_netinfo.sh</span><br><span class="hljs-params">IP:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br><span class="hljs-params">NetMask:</span>  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-params">Broadcast:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>MAC <span class="hljs-params">Address:</span>  <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span>:<span class="hljs-number">8</span>c<br>方法<span class="hljs-number">2</span>：<br>[root@localhost ~]<span class="hljs-comment"># ./get_netinfo.sh</span><br><span class="hljs-params">bash:</span> .<span class="hljs-operator">/</span>get_netinfo.<span class="hljs-params">sh:</span> 权限不够<br>[root@localhost ~]<span class="hljs-comment"># ll get_netinfo.sh</span><br><span class="hljs-operator">-</span>rw-r--r-- <span class="hljs-number">1</span> root root <span class="hljs-number">521</span> <span class="hljs-number">6</span>月   <span class="hljs-number">7</span> <span class="hljs-number">20</span>:<span class="hljs-number">41</span> get_netinfo.sh<br>[root@localhost ~]<span class="hljs-comment"># chmod +x get_netinfo.sh</span><br>[root@localhost ~]<span class="hljs-comment"># ./get_netinfo.sh</span><br><span class="hljs-params">IP:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br><span class="hljs-params">NetMask:</span>  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-params">Broadcast:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>MAC <span class="hljs-params">Address:</span>  <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span>:<span class="hljs-number">8</span>c<br>方法<span class="hljs-number">3</span>：<br>[root@localhost ~]<span class="hljs-comment"># source get_netinfo.sh</span><br><span class="hljs-params">IP:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br><span class="hljs-params">NetMask:</span>  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-params">Broadcast:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>MAC <span class="hljs-params">Address:</span>  <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span>:<span class="hljs-number">8</span>c<br>[root@localhost ~]<span class="hljs-comment"># chmod -x get_netinfo.sh</span><br>[root@localhost ~]<span class="hljs-comment"># ll get_netinfo.sh</span><br><span class="hljs-operator">-</span>rw-r--r-- <span class="hljs-number">1</span> root root <span class="hljs-number">521</span> <span class="hljs-number">6</span>月   <span class="hljs-number">7</span> <span class="hljs-number">20</span>:<span class="hljs-number">41</span> get_netinfo.sh<br>[root@localhost ~]<span class="hljs-comment"># source get_netinfo.sh</span><br><span class="hljs-params">IP:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br><span class="hljs-params">NetMask:</span>  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-params">Broadcast:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>MAC <span class="hljs-params">Address:</span>  <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span>:<span class="hljs-number">8</span>c<br>方法<span class="hljs-number">1</span>变种：<br>[root@localhost ~]<span class="hljs-comment"># cat get_netinfo.sh | bash</span><br><span class="hljs-params">IP:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br><span class="hljs-params">NetMask:</span>  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-params">Broadcast:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>MAC <span class="hljs-params">Address:</span>  <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span>:<span class="hljs-number">8</span>c<br>[root@localhost ~]<span class="hljs-comment"># bash &lt; get_netinfo.sh</span><br><span class="hljs-params">IP:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br><span class="hljs-params">NetMask:</span>  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-params">Broadcast:</span>  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>MAC <span class="hljs-params">Address:</span>  <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span>:<span class="hljs-number">8</span>c<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="1-3-5-脚本调试"><a href="#1-3-5-脚本调试" class="headerlink" title="1.3.5 脚本调试"></a>1.3.5 脚本调试</h3><p>学习目标</p><p>这一节，我们从 脚本调试、简单实践、小结 三个方面来学习。</p><p><strong>脚本调试</strong></p><p>需求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">我们在编写脚本的时候，往往会受到各种因素的限制，导致脚本功能非常大或者内容有误，如果直接执行脚本的时候，因为脚本内容有误，导致脚本执行失败。<br>所以我们需要在脚本执行的时候，保证脚本没问题，我们可以借助于多种脚本调试方式来验证脚本。<br></code></pre></td></tr></table></figure><p>调试方式</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-n      检查脚本中的语法错误</span><br><span class="hljs-deletion">-v      先显示脚本所有内容，然后执行脚本，结果输出，如果执行遇到错误，将错误输出。</span><br><span class="hljs-deletion">-x      将执行的每一条命令和执行结果都打印出来</span><br></code></pre></td></tr></table></figure><p><strong>简单实践</strong></p><p>准备工作</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stata">准备备份文件<br>cp get_netinfo.<span class="hljs-keyword">sh</span> get_netinfo-<span class="hljs-keyword">error</span>.<span class="hljs-keyword">sh</span><br><br>设置错误文件<br>[root@localhost ~]# <span class="hljs-keyword">cat</span> get_netinfo-<span class="hljs-keyword">error</span>.<span class="hljs-keyword">sh</span><br>...<br># 将最后一行末尾的&quot;取消<br>ifconfig eth0 | grep ether | awk &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$2&#125;</span>&#x27; |xargs echo <span class="hljs-string">&quot;MAC Address: &quot;</span><br>错误脚本执行效果<br>[root@localhost ~]# /bin/bash get_netinfo-<span class="hljs-keyword">error</span>.<span class="hljs-keyword">sh</span><br>IP:  10.0.0.12<br>NetMask:  255.255.255.0<br>Broadcast:  10.0.0.255<br>get_netinfo-<span class="hljs-keyword">error</span>.<span class="hljs-keyword">sh</span>:行19: 寻找匹配的 `&quot;&#x27; 是遇到了未预期的文件结束符<br>get_netinfo-<span class="hljs-keyword">error</span>.<span class="hljs-keyword">sh</span>:行20: 语法错误: 未预期的文件结尾<br></code></pre></td></tr></table></figure><p>检查语法实践</p><p>检查语法实践</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@localhost ~]# /bin/bash -<span class="hljs-keyword">n</span> get_netinfo-<span class="hljs-keyword">error</span>.<span class="hljs-keyword">sh</span><br>get_netinfo-<span class="hljs-keyword">error</span>.<span class="hljs-keyword">sh</span>:行19: 寻找匹配的 `&quot;&#x27; 是遇到了未预期的文件结束符<br>get_netinfo-<span class="hljs-keyword">error</span>.<span class="hljs-keyword">sh</span>:行20: 语法错误: 未预期的文件结尾<br></code></pre></td></tr></table></figure><p>检查语法调试</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@localhost ~]# /bin/bash -v get_netinfo-error.<span class="hljs-keyword">sh</span><br>#!/bin/bash<br>:&lt;&lt;!<br>功能：获取当前主机的网卡设备信息<br>作者：wangshuji<br>版本：V0.<span class="hljs-number">1</span><br>联系：www.superopsmsb.<span class="hljs-keyword">com</span><br>!<br><br># 获取ip地址信息<br>ifconfig eth0 | <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;IP: &quot;</span><br>IP:  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br><br># 获取掩码地址信息<br>ifconfig eth0 | <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet | awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span> | xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;NetMask: &quot;</span><br>NetMask:  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><br># 获取广播地址信息<br>ifconfig eth0 | <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet | awk <span class="hljs-string">&#x27;&#123;print $6&#125;&#x27;</span> | xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Broadcast: &quot;</span><br>Broadcast:  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br><br># 获取MAC地址信息<br>ifconfig eth0 | <span class="hljs-keyword">grep</span> ether | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> |xargs <span class="hljs-keyword">echo</span> <span class="hljs-comment">&quot;MAC Address:</span><br>get_netinfo-error.<span class="hljs-keyword">sh</span>:行<span class="hljs-number">19</span>: 寻找匹配的 `<span class="hljs-comment">&quot;&#x27; 是遇到了未预期的文件结束符</span><br>get_netinfo-error.<span class="hljs-keyword">sh</span>:行<span class="hljs-number">20</span>: 语法错误: 未预期的文件结尾<br></code></pre></td></tr></table></figure><p>脚本跟踪实践</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vim">失败演示<br>[root@localhost ~]# /bin/bash -<span class="hljs-keyword">x</span> get_netinfo-error.<span class="hljs-keyword">sh</span><br>+ :<br>+ ifconfig eth0<br>+ awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>+ <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet<br>+ xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;IP: &#x27;</span><br>IP:  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br>+ ifconfig eth0<br>+ <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet<br>+ awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span><br>+ xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;NetMask: &#x27;</span><br>NetMask:  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>+ ifconfig eth0<br>+ <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet<br>+ xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Broadcast: &#x27;</span><br>+ awk <span class="hljs-string">&#x27;&#123;print $6&#125;&#x27;</span><br>Broadcast:  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>get_netinfo-error.<span class="hljs-keyword">sh</span>:行<span class="hljs-number">19</span>: 寻找匹配的 `<span class="hljs-comment">&quot;&#x27; 是遇到了未预期的文件结束符</span><br>get_netinfo-error.<span class="hljs-keyword">sh</span>:行<span class="hljs-number">20</span>: 语法错误: 未预期的文件结尾<br>成功演示<br>[root@localhost ~]# /bin/bash -<span class="hljs-keyword">x</span> get_netinfo.<span class="hljs-keyword">sh</span><br>+ :<br>+ ifconfig eth0<br>+ awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>+ <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet<br>+ xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;IP: &#x27;</span><br>IP:  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span><br>+ ifconfig eth0<br>+ <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet<br>+ awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span><br>+ xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;NetMask: &#x27;</span><br>NetMask:  <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>+ ifconfig eth0<br>+ <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">w</span> inet<br>+ awk <span class="hljs-string">&#x27;&#123;print $6&#125;&#x27;</span><br>+ xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Broadcast: &#x27;</span><br>Broadcast:  <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span><br>+ ifconfig eth0<br>+ <span class="hljs-keyword">grep</span> ether<br>+ awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>+ xargs <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;MAC Address: &#x27;</span><br>MAC Address:  <span class="hljs-number">00</span>:<span class="hljs-number">0</span><span class="hljs-keyword">c</span>:<span class="hljs-number">29</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span>:<span class="hljs-number">8</span><span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="1-3-6-脚本开发规范"><a href="#1-3-6-脚本开发规范" class="headerlink" title="1.3.6 脚本开发规范"></a>1.3.6 脚本开发规范</h3><p>学习目标</p><p>这一节，我们从 开发规范、规范解析、小结 三个方面来学习。</p><p><strong>开发规范</strong></p><p>脚本规范</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-number">1</span>、脚本命名要有意义，文件后缀是.sh<br><span class="hljs-number">2</span>、脚本文件首行是而且必须是脚本解释器<br>    #!/bin/bash<br><span class="hljs-number">3</span>、脚本文件解释器后面要有脚本的基本信息等内容<br>    脚本文件中尽量不用中文注释;<br>    尽量用英文注释，防止本机或切换系统环境后中文乱码的困扰<br>    常见的注释信息：脚本名称、脚本功能描述、脚本版本、脚本作者、联系方式等<br><span class="hljs-number">4</span>、脚本文件常见执行方式：bash 脚本名<br><span class="hljs-number">5</span>、脚本内容执行：从上到下，依次执行<br><span class="hljs-number">6</span>、代码书写优秀习惯;<br>    <span class="hljs-number">1</span>）成对内容的一次性写出来,防止遗漏。<br>如：()、&#123;&#125;、[]、<span class="hljs-string">&#x27;&#x27;</span>、<span class="hljs-string">``</span>、<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-number">2</span>）[]中括号两端要有空格,书写时即可留出空格[    ],然后再退格书写内容。<br>    <span class="hljs-number">3</span>）流程控制语句一次性书写完，再添加内容<br><span class="hljs-number">7</span>、通过缩进让代码易读;(即该有空格的地方就要有空格)<br></code></pre></td></tr></table></figure><p><strong>规范解析</strong></p><p>编写梳理</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">shell</span>脚本开发规范重点：<span class="hljs-number">2</span>-<span class="hljs-number">4</span>-<span class="hljs-number">5</span><br><span class="hljs-attribute">shell</span>脚本开发小技巧：<span class="hljs-number">3</span>-<span class="hljs-number">6</span>-<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>其他技巧</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>尽可能记忆更多的命令<br><span class="hljs-symbol">2 </span>掌握脚本的标准的格式<br><span class="hljs-symbol">3 </span>多看、多模仿、多思考<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="2-shell变量"><a href="#2-shell变量" class="headerlink" title="2 shell变量"></a>2 shell变量</h1><h2 id="2-1-变量基础"><a href="#2-1-变量基础" class="headerlink" title="2.1 变量基础"></a>2.1 变量基础</h2><h3 id="2-1-1-变量场景"><a href="#2-1-1-变量场景" class="headerlink" title="2.1.1 变量场景"></a>2.1.1 变量场景</h3><p>学习目标</p><p>这一节， 我们从 数据存储、变量场景、小结 三个方面来学习。</p><p><strong>数据存储</strong></p><p>数据存储</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">所谓的数据存储，我们从三方面来理解这句话：<br>    <span class="hljs-number">1</span>、数据保存到哪里   <span class="hljs-comment">--  各种媒介，CPU、内存、磁盘、磁带、网盘...</span><br>    <span class="hljs-number">2</span>、数据保存的效果   <span class="hljs-comment">--  完整、安全、有效</span><br>    <span class="hljs-number">3</span>、数据保存的单元   <span class="hljs-comment">--  存储空间</span><br>    数据的存储空间默认不是一个整体，而是由一个个的存储单元组成，每一个存储单元都有一个唯一的整数编号，我们称这个编号为：地址<br>    存储单元的作用：存储数据+读写数据<br>    存储空间大小：<span class="hljs-number">1</span>字节(B) = <span class="hljs-number">8</span><span class="hljs-built_in">bit</span> == <span class="hljs-number">00000000</span><br>    地址特点：十六进制，例如：<span class="hljs-number">0</span>x20000000<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220607232318465.png" alt="image-20220607232318465"></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">对于数据的存储来说，主要有两种样式：物理地址和逻辑地址。<br>    物理地址：内存或硬盘中真正存储数据的位置，也就是说通过磁盘设备查找的位置<br>    逻辑地址：用于查找物理地址的存储块地址叫逻辑地址。程序中用的地址一般都是逻辑地址<br>    逻辑地址包括两部分：起始值(十六进制)+偏移量(十六进制)<br>    数据表的描述主要是逻辑地址，因为程序一般存储的是逻辑地址。<br>数据一旦存储下来就不再发生变化了，而程序中可能会在很多场景中用到同一个数据，就会出现两个问题：<br>    1 物理地址人听得懂，机器看不懂 <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">所以用逻辑地址找物理地址</span><br>    2 软件可以通过逻辑地址找到数据地址，但是软件不懂场景<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">所以人用逻辑地址的别名来代指向同一个xx地址</span><br>        <br>应用程序中为了 多场景应用这个逻辑地址的别名，本质上就是“变量”。<br></code></pre></td></tr></table></figure><p><strong>变量场景</strong></p><p>变量的本质</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">变量的本质其实就是 通过一个名称帮助程序快速找到内存中具体数据的地址。<br><span class="hljs-bullet">    -</span> 变量说白了就是指向xx值。<br></code></pre></td></tr></table></figure><p>编程语言</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs axapta">编程语言在数据调用层面分类的话，可以分为两类：<br>    静态编译语言：<br>        使用变量前，先声明变量类型，之后类型不能改变，在编译时检查。<br>        如：java，c<br>    动态编译语言：<br>        不用事先声明，可随时改变类型。<br>        如：bash，Python<br>根据编程语言在使用变量的程度上，可以划分为强类型、弱类型语言：<br>    强类型语言：<br>        不同类型数据操作，必须经过强制转换才同一类型才能运算。<br>            如java ， c<span class="hljs-meta"># ，python</span><br>        示例：<br>            <span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;shuji&#x27;</span> + <span class="hljs-number">10</span>) 提示出错，不会自动转换类型<br>            <span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;shuji&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">10</span>)) 结果为magedu10，需要显示转换类型<br>    弱类型语言：<br>        语言的运行时会隐式做数据类型转换。无须指定类型，默认均为字符型；<br>        参与运算会自动进行隐式类型转换；变量无须事先定义可直接调用。<br>        如：bash ，php，javascript<br>        示例：<br>            echo <span class="hljs-string">&#x27;aaa&#x27;</span>+<span class="hljs-number">222</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="2-1-2-变量定义"><a href="#2-1-2-变量定义" class="headerlink" title="2.1.2 变量定义"></a>2.1.2 变量定义</h3><p>学习目标</p><p>这一节，我们从 变量定义、变量分类、小结 三个方面来学习。</p><p><strong>变量定义</strong></p><p>变量定义</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">变量包括三部分：<br>    变量名 - 不变的<br>    变量值 - 变化的<br>    赋值动作 - 变量名指向变量值<br>表现样式：<br>    变量名<span class="hljs-operator">=</span>变量值<br>    变量的全称应该成为变量赋值，简称变量，在工作中，我们一般只xx是变量，其实是是将这两者作为一个整体来描述了。准确来说，我们一般所说的变量其实指的是：变量名。<br></code></pre></td></tr></table></figure><p>命名规范</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1</span> 名称有意义<br><span class="hljs-number">2</span> 名称细节<br>    命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。<br>    中间不能有空格，可以使用下划线（_）。<br>    不能使用标点符号。<br>    不能使用bash里的关键字（可用help命令查看保留关键字）。<br><span class="hljs-number">3</span> 命名样式<br>    大驼峰HelloWorld,每个单词的首字母是大写<br>    小驼峰helloWorld,第一个单词的首字母小写，后续每个单词的首字母是大写<br>    下划线: Hello_World<br>    大小写字母： helloworld, HELLOWORLD<br>注意：<br>    对于开发人员来说，他们对于变量名的规范比较多，什么类、函数、对象、属性、命名空间等都有要求<br>    对于运维人员来说，记住一个词 <span class="hljs-comment">-- 有意义。</span><br></code></pre></td></tr></table></figure><p><strong>变量分类</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">shell</span> 中的变量分为三大类：<br>    本地变量        变量名仅仅在当前终端有效    <br>    全局变量        变量名在当前操作系统的所有终端都有效<br>    <span class="hljs-built_in">shell</span>内置变量   <span class="hljs-built_in">shell</span>解析器内部的一些功能参数变量<br>注意：<br>    这里的变量分类的特点仅仅是从字面上来理解的，因为在实际的操作的时候，还会涉及到环境优先级的问题<br>    所以生产中对于这三者的划分没有特别大的强制。<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="2-1-3-基本操作"><a href="#2-1-3-基本操作" class="headerlink" title="2.1.3 基本操作"></a>2.1.3 基本操作</h3><p>学习目标</p><p>这一节，我们从 变量查看、变量定义、变量移除、小结四个方面来学习。</p><p><strong>变量查看</strong></p><p>语法解析</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">基本格式<br>    <span class="hljs-variable">$变</span>量名<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看默认的shell类型<br>[root@localhost ~]# <span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br>/bin/bash<br></code></pre></td></tr></table></figure><p><strong>变量定义</strong></p><p>普通语法解析</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">基本格式<br>    变量名<span class="hljs-operator">=</span>变量值<br>    <br>注意：<br>    <span class="hljs-operator">=</span> 两侧不允许有空格<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs autoit">查看一个空值变量名<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#  echo $myname</span><br><br>定制变量实践<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># myname=shuji</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#  echo $myname</span><br>shuji<br>错误的定制变量命令<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#  echo $myage</span><br><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># myage = 18</span><br>bash: myage: 未找到命令<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#  echo $myage</span><br><br></code></pre></td></tr></table></figure><p>类型变量定义</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs autoit">命令语法<br>    declare 参数 变量名=变量值<br>参数解析：<br>    -i 将变量看成整数 <br>    -r 使变量只读  readonly,==**该变量的值无法改变，并且不能为unset**==<br>    -x 标记变量为全局变量，类似于export<br>    -a  指定为索引数组（普通数组）；查看普通数组<br>    -A 指定为关联数组；查看关联数组<br>注意：<br>    在生产场景中，这种方法比较鸡肋，使用频率 <span class="hljs-number">0</span><span class="hljs-number">-20</span>次/<span class="hljs-number">3</span>年<br>设定制定类型的变量值<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># declare -i mynum=<span class="hljs-string">&#x27;shuzi&#x27;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $mynum</span><br><span class="hljs-number">0</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># declare -i mynum=<span class="hljs-string">&#x27;123456&#x27;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $mynum</span><br><span class="hljs-number">123456</span><br>设定只读类型变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># declare -r myread1=<span class="hljs-string">&quot;aaa&quot;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># myread2=myread</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># readonly myread2</span><br><br>查看只读变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># declare -r | grep myread</span><br>declare -r myread1=<span class="hljs-string">&quot;aaa&quot;</span><br>declare -r myread2=<span class="hljs-string">&quot;myread&quot;</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># readonly -p | grep myread</span><br>declare -r myread1=<span class="hljs-string">&quot;aaa&quot;</span><br>declare -r myread2=<span class="hljs-string">&quot;myread&quot;</span><br><br>无法使用unset删除只读变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># unset myread1 myread2</span><br>bash: unset: myread1: 无法反设定: 只读 variable<br>bash: unset: myread2: 无法反设定: 只读 variable<br><br>借助于<span class="hljs-keyword">exit</span>方式删除只读变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># exit</span><br>...... 重新登录后再次查看<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># declare -r | grep myread</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><strong>变量移除</strong></p><p>语法解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">基本格式<br>    <span class="hljs-built_in">unset</span> 变量名<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autoit">查看刚才定制的变量名<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#  echo $myname</span><br>shuji<br><br>移除变量名<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># unset myname</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#  echo $myname</span><br><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="2-2-本地变量"><a href="#2-2-本地变量" class="headerlink" title="2.2 本地变量"></a>2.2 本地变量</h2><h3 id="2-2-1-本地变量分类"><a href="#2-2-1-本地变量分类" class="headerlink" title="2.2.1 本地变量分类"></a>2.2.1 本地变量分类</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习。</p><p><strong>基础知识</strong></p><p>本地变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">所谓的本地变量就是：在当前系统的某个环境下才能生效的变量，作用范围小。<br></code></pre></td></tr></table></figure><p>变量分类</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">本地变量按照变量值的生成方式包含两种：<br>    普通变量：<br>        自定义变量名和变量值<br>    命令变量：<br>        自定义变量名，而变量值是通过一条命令获取的<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="2-2-2-普通变量"><a href="#2-2-2-普通变量" class="headerlink" title="2.2.2 普通变量"></a>2.2.2 普通变量</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习。</p><p><strong>基础知识</strong></p><p>变量分类</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">所谓的本地变量就是：在当前系统的某个环境下才能生效的变量，作用范围小。本地变量按照变量值的生成方式包含两种：<br>    普通变量：<br>        自定义变量名和变量值<br>    命令变量：<br>        自定义变量名，而变量值是通过一条命令获取的<br></code></pre></td></tr></table></figure><p>基本格式</p><table><thead><tr><th>序号</th><th>样式</th><th>要点</th></tr></thead><tbody><tr><td>方式一</td><td>变量名&#x3D;变量值</td><td>变量值必须是一个整体，中间没有特殊字符<br />“&#x3D;” 前后不能有空格</td></tr><tr><td>方式二</td><td>变量名&#x3D;’变量值’</td><td>原字符输出，我看到的内容，我就输出什么内容，</td></tr><tr><td>方式三</td><td>变量名&#x3D;”变量值”</td><td>如果变量值范围内，有可以解析的变量A，那么首先解析变量A，<br />将A的结果和其他内容组合成一个整体，重新赋值给变量B</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">习惯：<br>    数字不加引号，其他默认加双引号<br>    因为bash属于弱类型语言，默认会将所有内容当成字符串<br></code></pre></td></tr></table></figure><p>变量定义</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs autoit">查看默认的空值变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name</span><br><br>方法<span class="hljs-number">1</span>设定变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name=shuji</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name</span><br>shuji<br><br>方法<span class="hljs-number">2</span>设定变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name=<span class="hljs-string">&#x27;shuji1&#x27;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name</span><br>shuji1<br><br>方法<span class="hljs-number">3</span>设定变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name=<span class="hljs-string">&quot;shuji2&quot;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name</span><br>shuji2<br><br>清理变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># unset name</span><br></code></pre></td></tr></table></figure><p>作用区别演示</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs autoit">查看默认的空值变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name2</span><br><br>方法<span class="hljs-number">1</span>设定变量的要点，变量值必须是一个整体<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name2=shuji haoshuai</span><br>bash: haoshuai: 未找到命令<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name2</span><br>原因解析：<br>    空格是一个特殊符号，表示两条命令的隔开<br>    它将shuji 和 haoshuai当成两条命令了，所以报错信息是命令找不到<br>    <br>方法<span class="hljs-number">2</span>设定变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name2=<span class="hljs-string">&#x27;shuji haoshuai&#x27;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name2</span><br>shuji haoshuai<br><br>方法<span class="hljs-number">3</span>设定变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name2=<span class="hljs-string">&quot;shuji haoweiwu&quot;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name2</span><br>haoweiwu    <br><br>清理变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># unset name2</span><br>定制基础变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name=shuji</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name</span><br>shuji<br><br>方法<span class="hljs-number">2</span>设定变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name2=<span class="hljs-string">&#x27;dan-$name&#x27;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name2</span><br>dan-$name<br><br>方法<span class="hljs-number">3</span>设定变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># name2=<span class="hljs-string">&quot;shuang-$name&quot;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $name2</span><br>shuang-shuji<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="2-2-3-命令变量"><a href="#2-2-3-命令变量" class="headerlink" title="2.2.3 命令变量"></a>2.2.3 命令变量</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习。</p><p><strong>基础知识</strong></p><p>基本格式</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">定义方式一：<br>    变量名=`命令`<br>    注意：<br>    ` 是反引号<br><br>定义方式二：<br>    变量名=$(命令)<br>执行流程：<br>    <span class="hljs-number">1</span>、执行 ` 或者 $() 范围内的命令<br>    <span class="hljs-number">2</span>、将命令执行后的结果，赋值给新的变量名A<br></code></pre></td></tr></table></figure><p><strong>简单实践</strong></p><p>命令变量实践</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs autoit">查看默认的空值变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $myuser</span><br><br>方法<span class="hljs-number">1</span>设定变量名<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># myuser=`whoami`</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $myuser</span><br>root<br>查看默认的空值变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $mydir</span><br><br>方法<span class="hljs-number">2</span>设定变量名<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># mydir=$(pwd)</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $mydir</span><br>/root<br><br>清理变量<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># unset mydir myuser</span><br></code></pre></td></tr></table></figure><p>其他常见的实践</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mel">自动生成一系列数字<br>[root@localhost ~]# NUM=<span class="hljs-string">`seq 10`</span><br>[root@localhost ~]# echo $NUM<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><br>文件备份添加时间戳<br>[root@localhost ~]# touch <span class="hljs-keyword">file</span>-a<br>[root@localhost ~]# cp <span class="hljs-keyword">file</span>-a <span class="hljs-keyword">file</span>-a-$(<span class="hljs-keyword">date</span> +%F)<br>[root@localhost ~]# <span class="hljs-keyword">ls</span> <span class="hljs-keyword">file</span>-a*<br><span class="hljs-keyword">file</span>-a  <span class="hljs-keyword">file</span>-a<span class="hljs-number">-2022</span><span class="hljs-number">-06</span><span class="hljs-number">-08</span><br></code></pre></td></tr></table></figure><p>简单小综合实践</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@localhost ~]# cat get_netinfo_v2.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 功能：获取当前主机的网卡设备信息</span><br><span class="hljs-comment"># 作者：wangshuji</span><br><span class="hljs-comment"># 版本：V0.2</span><br><span class="hljs-comment"># 联系：www.superopsmsb.com</span><br><br><span class="hljs-comment"># 定制基础变量</span><br><span class="hljs-attribute">RED</span>=<span class="hljs-string">&quot;\E[1;31m&quot;</span><br><span class="hljs-attribute">GREEN</span>=<span class="hljs-string">&quot;echo -e \E[1;32m&quot;</span><br><span class="hljs-attribute">END</span>=<span class="hljs-string">&quot;\E[0m&quot;</span><br><br><span class="hljs-comment"># 获取ip地址信息</span><br><span class="hljs-attribute">IPDDR</span>=$(ifconfig eth0 | grep -w inet | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><span class="hljs-comment"># 获取掩码地址信息</span><br><span class="hljs-attribute">NETMAST</span>=$(ifconfig eth0 | grep -w inet | awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span>)<br><span class="hljs-comment"># 获取广播地址信息</span><br><span class="hljs-attribute">BROADCAST</span>=$(ifconfig eth0 | grep -w inet | awk <span class="hljs-string">&#x27;&#123;print $6&#125;&#x27;</span>)<br><span class="hljs-comment"># 获取MAC地址信息</span><br><span class="hljs-attribute">MACADDR</span>=$(ifconfig eth0 | grep ether | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><br><span class="hljs-comment"># 打印网络基本信息</span><br><span class="hljs-variable">$GREEN</span>---------主机网卡基本信息---------<span class="hljs-variable">$END</span><br>echo -e  <span class="hljs-string">&quot;HOSTNAME:     <span class="hljs-variable">$RED</span> `hostname` <span class="hljs-variable">$END</span>&quot;</span><br>echo -e  <span class="hljs-string">&quot;IP:           <span class="hljs-variable">$RED</span> <span class="hljs-variable">$IPDDR</span> <span class="hljs-variable">$END</span>&quot;</span><br>echo -e  <span class="hljs-string">&quot;NetMask:      <span class="hljs-variable">$RED</span> <span class="hljs-variable">$NETMAST</span> <span class="hljs-variable">$END</span>&quot;</span><br>echo -e  <span class="hljs-string">&quot;Broadcast:    <span class="hljs-variable">$RED</span> <span class="hljs-variable">$BROADCAST</span> <span class="hljs-variable">$END</span>&quot;</span><br>echo -e  <span class="hljs-string">&quot;MAC Address:  <span class="hljs-variable">$RED</span> <span class="hljs-variable">$MACADDR</span> <span class="hljs-variable">$END</span>&quot;</span><br><span class="hljs-variable">$GREEN</span>---------主机网卡基本信息---------<span class="hljs-variable">$END</span><br>文件执行后效果<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220608010705436.png" alt="image-20220608010705436"></p><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="2-3-全局变量"><a href="#2-3-全局变量" class="headerlink" title="2.3 全局变量"></a>2.3 全局变量</h2><h3 id="2-3-1-基本操作"><a href="#2-3-1-基本操作" class="headerlink" title="2.3.1 基本操作"></a>2.3.1 基本操作</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习。</p><p><strong>基础知识</strong></p><p>基本定义</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">全局变量是什么<br>    全局变量就是：在当前系统的所有环境下都能生效的变量。<br></code></pre></td></tr></table></figure><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看全局环境变量<br>    <span class="hljs-built_in">env</span>         只显示全局变量,一般结合 grep 和管道符来使用<br>    <span class="hljs-built_in">printenv</span>    效果与<span class="hljs-built_in">env</span>等同<br>    <br>    <span class="hljs-built_in">export</span>      查看所有的环境变量，包括声明的过程等信息，一般不用<br>    <span class="hljs-built_in">declare</span> -x  效果与<span class="hljs-built_in">export</span>类似<br>定义全局变量方法一：<br>    变量=值<br>    <span class="hljs-built_in">export</span> 变量<br>定义全局变量方法二：（最常用）<br>    <span class="hljs-built_in">export</span> 变量=值<br></code></pre></td></tr></table></figure><p>查看全局变量</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs perl">查看所有的全局变量<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># env</span><br>XDG_SESSION_ID=<span class="hljs-number">4</span><br>HOSTNAME=localhost<br>SHELL=<span class="hljs-regexp">/bin/</span>bash<br>TERM=xterm<br>HISTSIZE=<span class="hljs-number">1000</span><br>...<br><br>查看制定的全局变量<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># env | grep SHELL</span><br>SHELL=<span class="hljs-regexp">/bin/</span>bash<br>定制本地变量<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># envtype=local</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo $envtype</span><br><span class="hljs-keyword">local</span><br><br>从全局变量中查看<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># env | grep envtype</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment">#</span><br>结果显示：<br>    无法从全局变量中查看本地变量的名称<br>方法<span class="hljs-number">1</span>定制全局变量<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo $envtype</span><br><span class="hljs-keyword">local</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># env | grep envtype</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># export envtype</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># env | grep envtype</span><br>envtype=<span class="hljs-keyword">local</span><br><br>方法<span class="hljs-number">2</span>定制全局变量<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># export myuser=root</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># env | grep myuser</span><br>myuser=root<br><br>鸡肋方法定制全局变量<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># declare -x mydir=/root</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># env | grep mydir</span><br>mydir=/root<br><br>清理全局变量<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># unset envtype myuser mydir</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="2-3-2-文件体系"><a href="#2-3-2-文件体系" class="headerlink" title="2.3.2 文件体系"></a>2.3.2 文件体系</h3><p>学习目标</p><p>这一节，我们从 变量文件、简单实践、小结 三个方面来学习。</p><p><strong>变量文件</strong></p><p>变量文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">在linux环境中，有很多目录下的文件都可以定制一些作用范围更广的变量，这些文件或文件所在的目录有：<br>    作用范围在制定的用户范围：<br>        ~/.bashrc<br>        ~/.bash_profile<br>    作用的范围在系统范围：<br>        /etc/profile<br>        /etc/profile.d/env_file_name<br></code></pre></td></tr></table></figure><p><strong>简单实践</strong></p><p>bashrc 或 bash_profile 实践</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs crystal">查看未知的变量名<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo $NAME</span><br><br>定制变量名到文件中<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo NAME=shuji &gt;&gt; ~/.bashrc</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># source ~/.bashrc</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo $NAME</span><br>shuji<br><br>新开一个终端查看效果<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo $NAME</span><br>shuji<br><br>新开一个普通用户的终端查看效果<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># su - python</span><br>[python<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>echo <span class="hljs-variable">$NAME</span><br><br>[python<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$</span><br><span class="hljs-variable"></span>清理.bashrc 文件里的变量，然后清除当前环境下的变量名<br>unset NAME<br></code></pre></td></tr></table></figure><p>profile实践</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crystal">查看未知的变量名<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo $PROFILE</span><br><br>定制变量名到文件中<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo PROFILE=shuji &gt;&gt; /etc/profile</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># source /etc/profile</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo $PROFILE</span><br>shuji<br><br>新开一个终端查看效果<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># echo $PROFILE</span><br>shuji<br><br>新开一个普通用户的终端查看效果<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># su - python</span><br>[python<span class="hljs-variable">@localhost</span> ~]<span class="hljs-variable">$ </span>echo <span class="hljs-variable">$PROFILE</span><br>shuji<br>[python<span class="hljs-variable">@localhost</span> ~]$<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="2-3-3-嵌套shell"><a href="#2-3-3-嵌套shell" class="headerlink" title="2.3.3 嵌套shell"></a>2.3.3 嵌套shell</h3><p>学习目标</p><p>这一节，我们从 export原理、嵌套实践、小结 三个方面来学习。</p><p><strong>export原理</strong></p><p>原理解析</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gauss">用户登录时:<br>    用户登录到Linux系统后，系统将启动一个用户<span class="hljs-built_in">shell</span>。<br>    在这个<span class="hljs-built_in">shell</span>中，可以使用<span class="hljs-built_in">shell</span>命令或声明变量，也可以创建并运行 <span class="hljs-built_in">shell</span>脚本程序。<br><br>运行脚本时:<br>    运行<span class="hljs-built_in">shell</span>脚本程序时，系统将创建一个子<span class="hljs-built_in">shell</span>。 此时，系统中将有两个<span class="hljs-built_in">shell</span><br>        - 一个是登录时系统启动的<span class="hljs-built_in">shell</span>，另一个是系统为运行脚本程序创建的<span class="hljs-built_in">shell</span>。<br>        当一个脚本程序运行完毕，它的脚本<span class="hljs-built_in">shell</span>将终止，可以返回到执行该脚本之前的<span class="hljs-built_in">shell</span>。<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220608013404270.png" alt="image-20220608013404270"></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss">意义解读<br>    从这种意义上来说，用户可以有许多 <span class="hljs-built_in">shell</span>，每个<span class="hljs-built_in">shell</span>都是由某个<span class="hljs-built_in">shell</span>（称为父<span class="hljs-built_in">shell</span>）派生的。<br>在子<span class="hljs-built_in">shell</span>中定义的变量只在该子<span class="hljs-built_in">shell</span>内有效。如果在一个<span class="hljs-built_in">shell</span>脚本程序中定义了一个变量，当该脚本程序运行时，这个定义的变量只是该脚本程序内的一个局部变量，其他的<span class="hljs-built_in">shell</span>不能引用它，要使某个变量的值可以在其他<span class="hljs-built_in">shell</span>中被改变，可以使用export命令对已定义的变量进行输出。 <br><br>    export命令将使系统在创建每一个新的<span class="hljs-built_in">shell</span>时定义这个变量的一个拷贝。这个过程称之为变量输出。<br></code></pre></td></tr></table></figure><p>实践解读</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">当前父<span class="hljs-built_in">shell</span>中定义变量中,分为局部变量和全局变量，不同点是：<br>    - 局部变量只能作用于本父<span class="hljs-built_in">shell</span>，子<span class="hljs-built_in">shell</span>无法继续使用<br>    - 如果使用了export将局部变量定义为全局变量，那么子<span class="hljs-built_in">shell</span>创建的时候会继承父<span class="hljs-built_in">shell</span>的全局变量<br></code></pre></td></tr></table></figure><p><strong>嵌套实践</strong></p><p>简单实践</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看父shell的脚本<br>[root@localhost ~]# <span class="hljs-built_in">cat</span> father.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 定制全局变量</span><br><span class="hljs-built_in">export</span> _xing=<span class="hljs-string">&#x27;王&#x27;</span><br>_name=<span class="hljs-string">&quot;书记&quot;</span><br>_age=<span class="hljs-string">&quot;42&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;父shell信息: $_xing<span class="hljs-variable">$_name</span>,<span class="hljs-variable">$_age</span>&quot;</span><br><span class="hljs-built_in">sleep</span> 3<br><br><span class="hljs-comment"># 调用child.sh进行验证,最好放在同一目录下</span><br>/bin/bash child.sh<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;父shell信息: $_xing<span class="hljs-variable">$_name</span>,<span class="hljs-variable">$_age</span>&quot;</span><br>查看子shell的脚本<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 显示父shell的全局变量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;子shell信息: $_xing<span class="hljs-variable">$_name</span>,<span class="hljs-variable">$_age</span>&quot;</span><br><br><span class="hljs-comment"># 同名变量 子shell 的优先级高于父shell,但是不会传递给父shell</span><br>_xing=<span class="hljs-string">&quot;王胖胖&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;子shell修改后的信息: <span class="hljs-variable">$_xing</span>&quot;</span><br>执行测试效果<br>[root@localhost ~]# /bin/bash father.sh<br>父shell信息: 王书记,42<br>子shell信息: 王,<br>子shell修改后的信息: 王胖胖<br>父shell信息: 王书记,42<br></code></pre></td></tr></table></figure><h2 id="2-4-内置变量"><a href="#2-4-内置变量" class="headerlink" title="2.4 内置变量"></a>2.4 内置变量</h2><h3 id="2-4-1-脚本相关"><a href="#2-4-1-脚本相关" class="headerlink" title="2.4.1 脚本相关"></a>2.4.1 脚本相关</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习</p><p><strong>基础知识</strong></p><p>脚本相关的变量解析</p><table><thead><tr><th>序号</th><th>变量名</th><th>解析</th></tr></thead><tbody><tr><td>1</td><td>$0</td><td>获取当前执行的shell脚本文件名</td></tr><tr><td>2</td><td>$n</td><td>获取当前执行的shell脚本的第n个参数值，n&#x3D;1..9，<br />当n为0时表示脚本的文件名，如果n大于9就要用大括号括起来${10}</td></tr><tr><td>3</td><td>$#</td><td>获取当前shell命令行中参数的总个数</td></tr><tr><td>4</td><td>$?</td><td>获取执行上一个指令的返回值（0为成功，非0为失败）</td></tr></tbody></table><p><strong>简单实践</strong></p><p>实践1 - $0 获取脚本的名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# <span class="hljs-built_in">cat</span> get_name.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 获取脚本的名称</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;我脚本的名称是： file.sh&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;我脚本的名称是：<span class="hljs-variable">$0</span>&quot;</span><br></code></pre></td></tr></table></figure><p>实践2 - $n 获取当前脚本传入的第n个位置的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# <span class="hljs-built_in">cat</span> get_args.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 获取指定位置的参数</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个位置的参数是： <span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个位置的参数是： <span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第三个位置的参数是： <span class="hljs-variable">$3</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第四个位置的参数是： <span class="hljs-variable">$4</span>&quot;</span><br></code></pre></td></tr></table></figure><p>实践3 - $# 获取当前脚本传入参数的数量</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs d">[root<span class="hljs-keyword">@localhost</span> ~]# cat get_number.sh<br><span class="hljs-meta">#!/bin/bash</span><br># 获取当前脚本传入的参数数量<br>echo <span class="hljs-string">&quot;当前脚本传入的参数数量是： $#&quot;</span><br></code></pre></td></tr></table></figure><p>实践4 - $? 获取文件执行或者命令执行的返回状态值</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[root@localhost ~]<span class="hljs-comment">#  bash nihao</span><br><span class="hljs-keyword">bash: </span>nihao: No such file <span class="hljs-keyword">or </span><span class="hljs-keyword">directory</span><br><span class="hljs-keyword"></span>[root@localhost ~]<span class="hljs-comment">#  echo $?</span><br><span class="hljs-number">127</span><br><br>[root@localhost ~]<span class="hljs-comment">#  ls</span><br>get_name.<span class="hljs-keyword">sh </span>get_args.<span class="hljs-keyword">sh </span>get_number.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>[root@localhost ~]<span class="hljs-comment">#  echo $?</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="2-4-2-字符串相关"><a href="#2-4-2-字符串相关" class="headerlink" title="2.4.2 字符串相关"></a>2.4.2 字符串相关</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习</p><p><strong>基础知识</strong></p><p>字符串相关的变量解析</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gams">字符串计数<br>    <span class="hljs-symbol">$</span>&#123;#<span class="hljs-keyword">file</span>&#125;            获取字符串的长度<br><br>字符串截取   <br>    - 语法为<span class="hljs-symbol">$</span>&#123;var:pos:length&#125;   表示对变量var从pos开始截取length个字符，pos为空标示<span class="hljs-number">0</span><br>    <span class="hljs-symbol">$</span>&#123;<span class="hljs-keyword">file</span>:<span class="hljs-number">0</span>:<span class="hljs-number">5</span>&#125;         从<span class="hljs-number">0</span>开始，截取<span class="hljs-number">5</span>个字符<br>    <span class="hljs-symbol">$</span>&#123;<span class="hljs-keyword">file</span>:<span class="hljs-number">5</span>:<span class="hljs-number">5</span>&#125;         从<span class="hljs-number">5</span>开始，截取<span class="hljs-number">5</span>个字符<br>    <span class="hljs-symbol">$</span>&#123;<span class="hljs-keyword">file</span>::<span class="hljs-number">5</span>&#125;          从<span class="hljs-number">0</span>开始，截取<span class="hljs-number">5</span>个字符<br>    <span class="hljs-symbol">$</span>&#123;<span class="hljs-keyword">file</span>:<span class="hljs-number">0</span><span class="hljs-number">-6</span>:<span class="hljs-number">3</span>&#125;       从倒数第<span class="hljs-number">6</span>个字符开始，截取之后的<span class="hljs-number">3</span>个字符<br>    <span class="hljs-symbol">$</span>&#123;<span class="hljs-keyword">file</span>: <span class="hljs-number">-4</span>&#125;         返回字符串最后四个字节，-前面是<span class="hljs-string">&quot;空格&quot;</span><br></code></pre></td></tr></table></figure><p><strong>简单实践</strong></p><p>字符串实践</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs autoit">定制字符串内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># string_context=<span class="hljs-string">&quot;dsjfdsafjkldjsklfajkdsa&quot;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $string_context</span><br>dsjfdsafjkldjsklfajkdsa<br>获取字符串长度<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $&#123;#string_context&#125;</span><br><span class="hljs-number">23</span><br>从<span class="hljs-number">0</span>开始，截取<span class="hljs-number">5</span>个字符<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $&#123;string_context:0:5&#125;</span><br>dsjfd<br><br>从<span class="hljs-number">5</span>开始，截取<span class="hljs-number">5</span>个字符<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $&#123;string_context:5:5&#125;</span><br>safjk   <br><br>从<span class="hljs-number">0</span>开始，截取<span class="hljs-number">5</span>个字符<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $&#123;string_context::5&#125;</span><br>dsjfd<br><br>从倒数第<span class="hljs-number">6</span>个字符开始，截取之后的<span class="hljs-number">3</span>个字符<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $&#123;string_context:0-6:3&#125;</span><br>ajk<br><br>返回字符串最后四个字节，-前面是<span class="hljs-string">&quot;空格&quot;</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $&#123;string_context: -4&#125;</span><br>kdsa    <br><br></code></pre></td></tr></table></figure><h3 id="2-4-3-默认值相关"><a href="#2-4-3-默认值相关" class="headerlink" title="2.4.3 默认值相关"></a>2.4.3 默认值相关</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习</p><p><strong>基础知识</strong></p><p>语法解读</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">格式一：<span class="hljs-variable">$&#123;变量名:-默认值&#125;</span> <br>    变量a如果有内容，那么就输出a的变量值<br>    变量a如果没有内容，那么就输出默认的内容<br><br>格式二：<span class="hljs-variable">$&#123;变量名+默认值&#125;</span>  <br>    无论变量a是否有内容，都输出默认值<br></code></pre></td></tr></table></figure><p>实践1 - 有条件的默认值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">购买手机的时候选择套餐：<br>    如果我输入的参数为空，那么输出内容是 <span class="hljs-string">&quot;您选择的套餐是： 套餐 1&quot;</span><br>    如果我输入的参数为n，那么输出内容是 <span class="hljs-string">&quot;您选择的套餐是： 套餐 n&quot;</span>  <br>[root@localhost ~]# select_default_value.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 套餐选择演示</span><br>a=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;您选择的手机套餐是： 套餐 <span class="hljs-variable">$&#123;a:-1&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>实践2 - 强制默认值</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs d">国家法律强制规定：<br>    不管我说国家法定结婚年龄是 多少岁，都输出 国家法定结婚年龄(男性)是 <span class="hljs-number">22</span> 岁    <br>[root<span class="hljs-keyword">@localhost</span> ~]# froce_default_value.sh<br><span class="hljs-meta">#!/bin/bash</span><br># 默认值演示示例二<br>a=<span class="hljs-string">&quot;$1&quot;</span><br>echo <span class="hljs-string">&quot;国家法定结婚年龄(男性)是 $&#123;a+22&#125; 岁&quot;</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="2-4-4-其他相关"><a href="#2-4-4-其他相关" class="headerlink" title="2.4.4 其他相关"></a>2.4.4 其他相关</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习</p><p><strong>基础知识</strong></p><p>脚本相关的变量解析</p><table><thead><tr><th>序号</th><th>变量名</th><th>解析</th></tr></thead><tbody><tr><td>1</td><td>$_</td><td>在此之前执行的命令或脚本的第一个内容</td></tr><tr><td>2</td><td>$@</td><td>传给脚本的所有参数</td></tr><tr><td>3</td><td>$*</td><td>是以一个单字符串显示里所有向脚本传递的参数，与位置参数不同，参数可超过9个</td></tr><tr><td>4</td><td>$$</td><td>是脚本运行的当前进程的ID号，作用是方便以后管理它杀掉他</td></tr><tr><td>5</td><td>$!</td><td>前一条命令进程的ID号，作用是方便以后管理它杀掉他</td></tr></tbody></table><p><strong>简单实践</strong></p><p>实践1 - 其他变量的作用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# <span class="hljs-built_in">cat</span> get_other.sh<br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;脚本执行命令的第一个内容: <span class="hljs-variable">$_</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;传递给当前脚本的所有参数是: <span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;单字符串显示所有参数: $*&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;当前脚本执行时候的进程号是: $$&quot;</span><br><span class="hljs-built_in">sleep</span> 5 &amp;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;上一条命令执行时候的进程号是: $!&quot;</span><br></code></pre></td></tr></table></figure><p>实践2 - $$ 获取当前的进程号</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">查看当前的进程号<br>[root@localhost ~]# <span class="hljs-keyword">echo</span> $$<br><span class="hljs-number">4759</span><br>[root@localhost ~]# <span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> <span class="hljs-number">4759</span><br>root       <span class="hljs-number">4759</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span> <span class="hljs-number">116712</span>  <span class="hljs-number">3356</span> <span class="hljs-keyword">pts</span>/<span class="hljs-number">1</span>    Ss   <span class="hljs-number">00</span>:<span class="hljs-number">11</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> -bash<br>root       <span class="hljs-number">5547</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span> <span class="hljs-number">112828</span>   <span class="hljs-number">984</span> <span class="hljs-keyword">pts</span>/<span class="hljs-number">1</span>    S+   <span class="hljs-number">02</span>:<span class="hljs-number">00</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> <span class="hljs-keyword">grep</span> --color=auto <span class="hljs-number">4759</span><br>杀死当前的进程<br>[root@localhost ~]# kill -<span class="hljs-number">9</span> <span class="hljs-number">4759</span><br>───────────────────────────────────────────<br>Session stopped<br>    - Press <span class="hljs-symbol">&lt;return&gt;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">exit</span> <span class="hljs-keyword">tab</span><br>    - Press R <span class="hljs-keyword">to</span> restart session<br>    - Press S <span class="hljs-keyword">to</span> save terminal output <span class="hljs-keyword">to</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>实践3 - $@ 和 $* 的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">定制father脚本<br>[root@localhost ~]# <span class="hljs-built_in">cat</span> father.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>: 所有的参数 <span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>: 所有的参数 $*&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;将 $* 值传递给 child-1.sh 文件&#x27;</span><br>/bin/bash child-1.sh <span class="hljs-string">&quot;$*&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;将 $@ 值传递给 child-2.sh 文件&#x27;</span><br>/bin/bash child-2.sh <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br>定制两个child脚本<br>[root@localhost ~]# <span class="hljs-built_in">cat</span> child-1.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>: 获取所有的参数 <span class="hljs-variable">$1</span>&quot;</span><br><br>[root@localhost ~]# <span class="hljs-built_in">cat</span> child-2.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>: 获取所有的参数 <span class="hljs-variable">$1</span>&quot;</span><br>执行 father.sh 脚本<br>[root@localhost ~]# /bin/bash father.sh 1 2 3<br>father.sh: 所有的参数 1 2 3<br>father.sh: 所有的参数 1 2 3<br>将 $* 值传递给 child-1.sh 文件<br>child-1.sh: 获取所有的参数 1 2 3<br>将 <span class="hljs-variable">$@</span> 值传递给 child-2.sh 文件<br>child-2.sh: 获取所有的参数 1<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="3-内容格式化"><a href="#3-内容格式化" class="headerlink" title="3 内容格式化"></a>3 内容格式化</h1><h2 id="3-1-常用符号解读"><a href="#3-1-常用符号解读" class="headerlink" title="3.1 常用符号解读"></a>3.1 常用符号解读</h2><h3 id="3-1-1-信息传递"><a href="#3-1-1-信息传递" class="headerlink" title="3.1.1 信息传递"></a>3.1.1 信息传递</h3><p>学习目标</p><p>这一节，我们从 重定向、管道符、小结 三个方面来学习。</p><p><strong>重定向</strong></p><p>重定向符号</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bnf">在shell脚本中有两类常见的重定向符号：<br>覆盖式重定向：<br>    &gt; 表示将符号左侧的内容，以覆盖的方式输入到右侧文件中<br>    <span class="hljs-attribute">&lt; 表示将符号右侧的内容，以覆盖的方式输入到左侧文件中</span><br><span class="hljs-attribute">追加式重定向：</span><br><span class="hljs-attribute">    &gt;</span>&gt; 表示将符号左侧的内容，以追加的方式输入到右侧文件的末尾行中<br>    <span class="hljs-attribute">&lt;&lt; 表示将符号右侧的内容，以追加的方式输入到左侧文件的末尾行中</span><br></code></pre></td></tr></table></figure><p>实践1 - 覆盖式重定向</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autoit">查看文件内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat file.txt</span><br>nihao<br><br>使用重定向符号给文件中增加内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo <span class="hljs-string">&quot;file1.txt&quot;</span> &gt; file.txt</span><br><br>再次查看文件内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat file.txt</span><br>file1.txt<br></code></pre></td></tr></table></figure><p>实践2 - 追加式重定向</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autoit">查看文件内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat file.txt </span><br>file1.txt<br><br>使用重定向符号给文件中增加内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo <span class="hljs-string">&quot;file2.txt&quot;</span> &gt;&gt; file.txt </span><br><br>再次查看文件内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat file.txt </span><br>file1.txt<br>file2.txt<br></code></pre></td></tr></table></figure><p><strong>管道符</strong></p><p>符号简介</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">| 这个就是管道符，常用于将两个命令隔开，然后命令间(从左向右)传递信息使用的。</span><br></code></pre></td></tr></table></figure><p>使用格式</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">命令<span class="hljs-number">1</span> <span class="hljs-string">| 命令2</span><br>    管道符左侧命令<span class="hljs-number">1</span> 执行后的结果，传递给管道符右侧的命令<span class="hljs-number">2</span>使用<br></code></pre></td></tr></table></figure><p>实践1 - 信息的传递</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">查看当前系统中的全局变量<span class="hljs-keyword">SHELL</span><span class="language-bash"></span><br><span class="language-bash">[root@localhost ~]# <span class="hljs-built_in">env</span> | grep SHELL</span><br><span class="hljs-keyword">SHELL</span><span class="language-bash">=/bin/bash</span><br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="3-1-2-终端输出"><a href="#3-1-2-终端输出" class="headerlink" title="3.1.2  终端输出"></a>3.1.2  终端输出</h3><p>学习目标</p><p>这一节，我们从 后台执行、信息符号、小结 三个方面来学习。</p><p><strong>后台执行</strong></p><p>简介</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">&amp; 就是将一个命令从前台转到后台执行,使用格式如下：</span><br>    命令 <span class="hljs-meta">&amp;</span><br></code></pre></td></tr></table></figure><p>简单演示</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">前台执行休眠命令<br>[root@localhost ~]# <span class="hljs-keyword">sleep</span> <span class="hljs-number">4</span><br>界面卡住<span class="hljs-number">4</span>秒后消失<br><br>后台执行休眠命令<br>[root@localhost ~]# <span class="hljs-keyword">sleep</span> <span class="hljs-number">10</span> &amp;<br>[<span class="hljs-number">1</span>] <span class="hljs-number">4198</span><br>[root@localhost ~]# <span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> <span class="hljs-keyword">sleep</span><br>root       <span class="hljs-number">4198</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>   <span class="hljs-number">9032</span>   <span class="hljs-number">808</span> <span class="hljs-keyword">pts</span>/<span class="hljs-number">17</span>   S    <span class="hljs-number">21</span>:<span class="hljs-number">58</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> <span class="hljs-keyword">sleep</span> <span class="hljs-number">10</span><br>root       <span class="hljs-number">4200</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">15964</span>   <span class="hljs-number">944</span> <span class="hljs-keyword">pts</span>/<span class="hljs-number">17</span>   S+   <span class="hljs-number">21</span>:<span class="hljs-number">58</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span> <span class="hljs-keyword">grep</span> --color=auto <span class="hljs-keyword">sleep</span><br></code></pre></td></tr></table></figure><p><strong>信息符号</strong></p><p>信息简介</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>表示正确输出的信息<br><span class="hljs-symbol">2 </span>表示错误输出的信息<br><span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> 代表所有输出的信息,也可以简写为 <span class="hljs-string">&quot;&amp;&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>示例1 - 符号演示</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">标准正确输出重定向到zhengque文件<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat nihao.txt 1&gt;&gt; zhengque </span><br><br>标准错误输出重定向到errfile文件<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># dsfadsfadsfa 2&gt;&gt; errfile</span><br></code></pre></td></tr></table></figure><p>实例2 - 综合演练</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs autoit">脚本文件内容<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat ceshi.sh</span><br><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-meta"># 输出正确信息</span><br>echo <span class="hljs-string">&#x27;下一条错误命令&#x27;</span><br><span class="hljs-meta"># 执行错误命令，输出错误信息</span><br>dsfsafsafdsa<br><br>脚本执行效果<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># /bin/bash ceshi.sh</span><br>下一条错误命令<br>ceshi.sh:行<span class="hljs-number">5</span>: dsfsafsafdsa: 未找到命令<br><span class="hljs-number">1</span> 和 <span class="hljs-number">2</span> 综合演练<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># /bin/bash ceshi.sh 1&gt;&gt; ceshi-ok 2&gt;&gt; ceshi-err</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat ceshi-ok</span><br>下一条错误命令<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat ceshi-err</span><br>ceshi.sh:行<span class="hljs-number">5</span>: dsfsafsafdsa: 未找到命令<br>全部信息演练<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># /bin/bash ceshi.sh &gt;&gt; ceshi-all 2&gt;&amp;1</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># cat ceshi-all</span><br>下一条错误命令<br>ceshi.sh:行<span class="hljs-number">5</span>: dsfsafsafdsa: 未找到命令<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="3-2-输入格式化"><a href="#3-2-输入格式化" class="headerlink" title="3.2 输入格式化"></a>3.2 输入格式化</h2><h3 id="3-2-1-EOF原理"><a href="#3-2-1-EOF原理" class="headerlink" title="3.2.1 EOF原理"></a>3.2.1 EOF原理</h3><p>学习目标</p><p>这一节，我们从 基础知识、简单实践、小结 三个方面来学习。</p><p><strong>基础知识</strong></p><p>场景需求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">在运维岗位中，有非常多的场景需要我们在脚本中编写应用软件的配置文件。在这些应用软件的配置文件中，经常携带大量的格式，尤其是携带空格的层级格式，如果我们一个一个的编写好标准的配置文件，但是一旦涉及到场景信息的动态化调整，固定好的配置文件就不太适合了，所以我们需要一种方法能够实现整个动态的格式化需求。<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">在<span class="hljs-built_in">shell</span>编程中，<span class="hljs-string">&quot;EOF”通常与&quot;</span>&lt;&lt;”结合使用，<span class="hljs-string">&quot;&lt;&lt;EOF”表示后续的输入作为子命令或子shell的输入，直到遇到&quot;</span><span class="hljs-literal">EOF</span>”，再次返回到主调用<span class="hljs-built_in">shell</span>，可将其理解为分界符（delimiter）。<br>所谓的 <span class="hljs-literal">EOF</span>，就是End <span class="hljs-keyword">of</span> <span class="hljs-built_in">file</span>的缩写，它是一种自定义的文件内容终止符。<br>既然是分界符，那么形式自然不是固定的，这里可以将”<span class="hljs-literal">EOF</span><span class="hljs-string">&quot;可以进行自定义，但是前后的”EOF&quot;</span>必须成对出现且不能和<span class="hljs-built_in">shell</span>命令冲突。其使用形式如下：<br></code></pre></td></tr></table></figure><p>语法格式</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">交互式程序 &lt;&lt; <span class="hljs-literal">EOF</span><br>command1<br>command2<br>...<br><span class="hljs-literal">EOF</span><br>注意：<br>    最后的<span class="hljs-string">&quot;EOF&quot;</span>必须单独占一行，而且必须顶格写，如果不想受到如此限制的话，使用&lt;&lt;-符号<br>        &lt;&lt;- 的作用是自动去除最后一个<span class="hljs-literal">EOF</span>前面的制表符\t【注意，对于空格无效】<br>    前后两个<span class="hljs-literal">EOF</span>可以是任意一个字符，比如aaa，只要前后两个边界内容一致即可。<br>    <span class="hljs-string">&quot;EOF&quot;</span>中间的内容将以标准输入的形式输入到”交互式程序<span class="hljs-string">&quot;，当shell看到”&lt;&lt;&quot;</span>知道其后面输入的分界符，当<span class="hljs-built_in">shell</span>再次看到分界符时，两个分界符中间的部分将作为标准输入。<br></code></pre></td></tr></table></figure><p><strong>简单实践</strong></p><p>实践1 - EOF信息格式化输出</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">终端方式接收多行信息，然后交个一个命令<br>[root@localhost ~]# cat &lt;&lt; EOF<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Dear</span> <span class="hljs-title class_">Wang</span>:</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">  jian dao ni hen gaoxing.</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">danshi wo bu xihuan ni.</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">zaijian.</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">               zhaoliu</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">               <span class="hljs-number">2100</span>-<span class="hljs-number">11</span>-<span class="hljs-number">11</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-variable constant_">EOF</span></span><br>Dear Wang:<br>  jian dao ni hen gaoxing.<br>danshi wo bu xihuan ni.<br>zaijian.<br>               zhaoliu<br>               2100-11-11<br></code></pre></td></tr></table></figure><p>实践2 - 脚本中实践EOF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">编写请假条<br>[root@localhost ~]# <span class="hljs-built_in">cat</span> qingjiatiao.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># EOF演示请假条示例</span><br><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">                        请假条</span><br><span class="hljs-string">王老师:</span><br><span class="hljs-string">    我因患急性空腹病，现在需要到火锅理疗，不能到学校上课，</span><br><span class="hljs-string">请准假一天。恳请批准！</span><br><span class="hljs-string">                                             请假人：李四</span><br><span class="hljs-string">                                                 6月1日</span><br><span class="hljs-string">EOF</span><br><br>执行脚本示例<br>[root@localhost ~]# /bin/bash qingjiatiao.sh<br>                        请假条<br>王老师:<br>    我因患急性空腹病，现在需要到火锅理疗，不能到学校上课，<br>请准假一天。恳请批准！<br>                                             请假人：李四<br>                                                 6月1日<br></code></pre></td></tr></table></figure><p>实践3 - 末尾EOF前面有制表符</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">修改脚本<br>[root<span class="hljs-meta">@localhost</span> ~]<span class="hljs-comment"># cat qingjiatiao.sh</span><br>...<br><span class="hljs-comment"># EOF前面有一个制表符，也就是 Tab键效果</span><br>    EOF<br>    <br>执行脚本后效果<br>[root<span class="hljs-meta">@localhost</span> ~]<span class="hljs-comment"># /bin/bash qingjiatiao.sh</span><br>qingjiatiao.sh:行11: 警告:立即文档在第 4 行被文件结束符分隔 (需要 `EOF&#x27;)<br>...<br>修改脚本效果<br>[root<span class="hljs-meta">@localhost</span> ~]<span class="hljs-comment"># cat qingjiatiao.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># EOF演示请假条示例，将&lt;&lt; 替换为 &lt;&lt;-</span><br><br>cat <span class="hljs-variable">&lt;&lt;- EOF</span><br><span class="hljs-variable">                        请假条</span><br><span class="hljs-variable">王老师:</span><br><span class="hljs-variable">    我因患急性空腹病，现在需要到火锅理疗，不能到学校上课，</span><br><span class="hljs-variable">请准假一天。恳请批准！</span><br><span class="hljs-variable">                                             请假人：李四</span><br><span class="hljs-variable">                                                 6月1日</span><br><span class="hljs-variable">        EOF</span><br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/image-20220609002516145.png" alt="image-20220609002516145"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">脚本执行后的效果<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># /bin/bash qingjiatiao.sh</span><br>                        请假条<br>王老师:<br>    我因患急性空腹病，现在需要到火锅理疗，不能到学校上课，<br>请准假一天。恳请批准！<br>                                             请假人：李四<br>                                                 <span class="hljs-number">6</span>月<span class="hljs-number">1</span>日<br></code></pre></td></tr></table></figure><p><strong>小结</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="3-2-2-文本输入"><a href="#3-2-2-文本输入" class="headerlink" title="3.2.2 文本输入"></a>3.2.2 文本输入</h3><p>学习目标</p><p>这一节，我们从 cat实践、tee实践、小结 三个方面来学习。</p><p><strong>cat实践</strong></p><p>实现多行文件的输出</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">语法格式<br>    cat &gt; <span class="hljs-built_in">file</span>  &lt;&lt; <span class="hljs-literal">EOF</span><br>    ...<br>    <span class="hljs-literal">EOF</span><br>注意：<br>    &gt; 代表覆盖式增加内容到 <span class="hljs-built_in">file</span> 文件<br>    &gt;&gt; 代表追加式增加内容到 <span class="hljs-built_in">file</span> 文件<br></code></pre></td></tr></table></figure><p>简单示例</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">定制主机解析名信息<br><span class="hljs-string">[root@localhost ~]</span># cat &gt;&gt; hosts &lt;&lt; EOF<br><span class="hljs-number">10.0.0.13</span> k8s-master<br><span class="hljs-number">10.0.0.14</span> k8s-node1<br><span class="hljs-number">10.0.0.15</span> k8s-node2<br>EOF<br><br>演示效果<br><span class="hljs-string">[root@localhost ~]</span># cat hosts<br><span class="hljs-number">10.0.0.13</span> k8s-master<br><span class="hljs-number">10.0.0.14</span> k8s-node1<br><span class="hljs-number">10.0.0.15</span> k8s-node2<br></code></pre></td></tr></table></figure><p>实践1- 定制nginx配置文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs perl">定制nginx配置文件的脚本<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># cat define-nginx-conf.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 定制nginx的配置文件</span><br><br><span class="hljs-comment"># 定制配置文件目录</span><br>NGINX_DIR=<span class="hljs-string">&#x27;/data/server/conf&#x27;</span><br>NGINX_CONF=<span class="hljs-string">&#x27;nginx.conf&#x27;</span><br><br><span class="hljs-comment"># 创建基本目录</span><br><span class="hljs-keyword">mkdir</span> -p <span class="hljs-variable">$NGINX_DIR</span><br><br><span class="hljs-comment"># 定制nginx配置文件</span><br>cat &gt; <span class="hljs-variable">$NGINX_DIR</span>/<span class="hljs-variable">$NGINX_CONF</span> &lt;&lt; EOF<br>server &#123;<br>  <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>  server_name www.example.com<br>  <span class="hljs-keyword">listen</span> / &#123;<br>     proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span>:<span class="hljs-number">10086</span>;<br>  &#125;<br>&#125;<br>EOF<br>执行文件后的效果<br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># /bin/bash define-nginx-conf.sh</span><br>[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># cat /data/server/conf/nginx.conf</span><br>server &#123;<br>  <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>  server_name www.example.com<br>  <span class="hljs-keyword">listen</span> / &#123;<br>     proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">10.0</span>.<span class="hljs-number">0.12</span>:<span class="hljs-number">10086</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>tee实践</strong></p><p>功能简介</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tee</span>命令读取标准输入，把这些内容同时输出到标准输出和（多个）文件中，<span class="hljs-built_in">tee</span>命令可以重定向标准输出到多个文件。要注意的是：在使用管道线时，前一个命令的标准错误输出不会被<span class="hljs-built_in">tee</span>读取。<br></code></pre></td></tr></table></figure><p>命令格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">样式1：只输出到标准输出<br>    <span class="hljs-built_in">tee</span><br>样式2：输出到标准输出的同时，保存到文件file中<br>    <span class="hljs-built_in">tee</span> file<br>样式3：输出到标准输出的同时，追加到文件file中。如果文件不存在则创建；如果文件存在则追加。<br>    <span class="hljs-built_in">tee</span> -a file<br>    <span class="hljs-built_in">tee</span> host2 &lt;&lt;- <span class="hljs-string">EOF ... EOF</span><br>样式4: 输出到标准输出两次。<br>    <span class="hljs-built_in">tee</span> -<br>样式5：输出到标准输出两次，同时保存到file1和file2中。<br>    <span class="hljs-built_in">tee</span> file1 file2 -<br></code></pre></td></tr></table></figure><p>简单演示</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs powershell">实践<span class="hljs-number">1</span> - 仅输出到当前屏幕<br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test | tee</span><br><span class="hljs-built_in">tee-test</span><br><br>实践<span class="hljs-number">2</span> - 同时输出到屏幕和文件<br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test | tee tee-file</span><br><span class="hljs-built_in">tee-test</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cat tee-file</span><br><span class="hljs-built_in">tee-test</span><br>实践<span class="hljs-number">3</span> - 追加到对应的文件中<br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cat tee-file</span><br><span class="hljs-built_in">tee-test</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test1 | tee tee-file</span><br><span class="hljs-built_in">tee-test1</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cat tee-file</span><br><span class="hljs-built_in">tee-test1</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test2 | tee -a tee-file</span><br><span class="hljs-built_in">tee-test2</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cat tee-file</span><br><span class="hljs-built_in">tee-test1</span><br><span class="hljs-built_in">tee-test2</span><br>实践<span class="hljs-number">4</span> - 输出多次信息<br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test | tee</span><br><span class="hljs-built_in">tee-test</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test | tee -</span><br><span class="hljs-built_in">tee-test</span><br><span class="hljs-built_in">tee-test</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test | tee - -</span><br><span class="hljs-built_in">tee-test</span><br><span class="hljs-built_in">tee-test</span><br><span class="hljs-built_in">tee-test</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test | tee - - -</span><br><span class="hljs-built_in">tee-test</span><br><span class="hljs-built_in">tee-test</span><br><span class="hljs-built_in">tee-test</span><br><span class="hljs-built_in">tee-test</span><br>实践<span class="hljs-number">5</span> - 保存到多个文件<br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># echo tee-test | tee file-1 file-2 file-3</span><br><span class="hljs-built_in">tee-test</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cat file-1</span><br><span class="hljs-built_in">tee-test</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cat file-2</span><br><span class="hljs-built_in">tee-test</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cat file-3</span><br><span class="hljs-built_in">tee-test</span><br>实践<span class="hljs-number">6</span> - 接收命令行多行信息，同时在文件和当前终端显示<br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># tee host2 &lt;&lt;- EOF</span><br>&gt; <span class="hljs-number">10.0</span>.<span class="hljs-number">0.13</span> k8s<span class="hljs-literal">-master</span><br>&gt; <span class="hljs-number">10.0</span>.<span class="hljs-number">0.14</span> k8s<span class="hljs-literal">-node1</span><br>&gt; <span class="hljs-number">10.0</span>.<span class="hljs-number">0.15</span> k8s<span class="hljs-literal">-node2</span><br>&gt; EOF<br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.13</span> k8s<span class="hljs-literal">-master</span><br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.14</span> k8s<span class="hljs-literal">-node1</span><br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.15</span> k8s<span class="hljs-literal">-node2</span><br><br>查看文件内容<br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cat host2</span><br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.13</span> k8s<span class="hljs-literal">-master</span><br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.14</span> k8s<span class="hljs-literal">-node1</span><br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.15</span> k8s<span class="hljs-literal">-node2</span><br></code></pre></td></tr></table></figure><p>案例实践 - kubernetes参数配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">定制kubernetes的网络模块加载<br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br>定制kubernetes的数据包内核参数<br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">sudo</span> sysctl --system<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql主从</title>
    <link href="/2025/07/07/Mysql%E4%B8%BB%E4%BB%8E/"/>
    <url>/2025/07/07/Mysql%E4%B8%BB%E4%BB%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="1-MySQL-主从"><a href="#1-MySQL-主从" class="headerlink" title="1. MySQL 主从"></a>1. MySQL 主从</h2><h3 id="1-1-什么是-MySQL-主从"><a href="#1-1-什么是-MySQL-主从" class="headerlink" title="1.1 什么是 MySQL 主从 ?"></a>1.1 什么是 MySQL 主从 ?</h3><p>所谓 MySQL 主从，就是建立两个完全一样的数据库，一个是主库，一个是从库，<strong>主库对外提供读写的操作，从库对外提供读的操作</strong>。</p><p><img src="http://cdn.882227.xyz/dd2b3ec0fe2a4ee78ab814bb3793498a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p><h3 id="1-2-为什么使用-MySQL-主从"><a href="#1-2-为什么使用-MySQL-主从" class="headerlink" title="1.2 为什么使用 MySQL 主从 ?"></a>1.2 为什么使用 MySQL 主从 ?</h3><p>对于数据库单机部署，在 4 核 8G 的机器上运行 MySQL 5.7 时，大概可以支撑 500 的 TPS 和 10000 的 QPS，<strong>当遇到一些活动时，查询流量骤然，就需要进行主从分离。</strong></p><p>大部分系统的访问模型是读多写少，读写请求量的差距可能达到几个数量级，所以我们可以通过一主多从的方式，<strong>主库只负责写入和部分核心逻辑的查询，多个从库只负责查询，提升查询性能，降低主库压力。</strong></p><p>当主库宕机时，从库可以切成主库，保证服务的高可用，然后主库也可以做数据的容灾备份，整体场景总结如下：</p><ul><li><strong>读写分离</strong>：从库提供查询，减少主库压力，提升性能；</li><li><strong>高可用</strong>：故障时可切换从库，保证服务高可用；</li><li><strong>数据备份</strong>：数据备份到从库，防止服务器宕机导致数据丢失。</li></ul><h2 id="2-主从复制"><a href="#2-主从复制" class="headerlink" title="2. 主从复制"></a>2. 主从复制</h2><h3 id="2-1-主从复制原理"><a href="#2-1-主从复制原理" class="headerlink" title="2.1 主从复制原理"></a>2.1 主从复制原理</h3><p>MySQL 的主从复制是依赖于 binlog，也就是记录 MySQL 上的所有变化并以二进制形式保存在磁盘上二进制日志文件。</p><p>主从复制就是将 binlog 中的数据从主库传输到从库上，一般这个过程是异步的，即主库上的操作不会等待 binlog 同步地完成。</p><p><img src="http://cdn.882227.xyz/453ed3ddf7a343d2a7f17abeec833e08~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p><p>详细流程如下：</p><ol><li><strong>主库写 binlog</strong>：主库的更新 SQL(update、insert、delete) 被写到 binlog；</li><li><strong>主库发送 binlog</strong>：主库创建一个 log dump 线程来发送 binlog 给从库；</li><li><strong>从库写 relay log</strong>：从库在连接到主节点时会创建一个 IO 线程，以请求主库更新的 binlog，并且把接收到的 binlog 信息写入一个叫做 relay log 的日志文件；</li><li><strong>从库回放</strong>：从库还会创建一个 SQL 线程读取 relay log 中的内容，并且在从库中做回放，最终实现主从的一致性。</li></ol><h3 id="2-2-如何保证主从一致"><a href="#2-2-如何保证主从一致" class="headerlink" title="2.2 如何保证主从一致"></a>2.2 如何保证主从一致</h3><p>当主库和从库数据同步时，突然中断怎么办？因为主库与从库之间维持了一个长链接，主库内部有一个线程，专门服务于从库的这个长链接。</p><p>对于下面的情况，假如主库执行如下 SQL，其中 a 和 create_time 都是索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> a <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;666&#x27;</span> <span class="hljs-keyword">and</span> create_time<span class="hljs-operator">&lt;</span><span class="hljs-string">&#x27;2022-03-01&#x27;</span> limit <span class="hljs-number">1</span>;<br>复制代码<br></code></pre></td></tr></table></figure><p>我们知道，数据选择了 a 索引和选择 create_time 索引，最后 limit 1 出来的数据一般是不一样的。</p><p>所以就会存在这种情况：在 binlog &#x3D; statement 格式时，主库在执行这条 SQL 时，使用的是索引 a，而从库在执行这条 SQL 时，使用了索引 create_time，最后主从数据不一致了。</p><p><strong>那么我们该如何解决呢？</strong></p><p>可以把 binlog 格式修改为 row，row 格式的 binlog 日志记录的不是 SQL 原文，而是两个 event:Table_map 和 Delete_rows。</p><p>Table_map event 说明要操作的表，Delete_rows event用于定义要删除的行为，记录删除的具体行数。<strong>row 格式的 binlog 记录的就是要删除的主键 ID 信息，因此不会出现主从不一致的问题。</strong></p><p>但是如果 SQL 删除 10 万行数据，使用 row 格式就会很占空间，10 万条数据都在 binlog 里面，写 binlog 的时候也很耗 IO。但是 statement 格式的 binlog 可能会导致数据不一致。</p><p>设计 MySQL 的大叔想了一个折中的方案，mixed 格式的 binlog，其实就是 row 和 statement 格式混合使用，<strong>当 MySQL 判断可能数据不一致时，就用 row 格式，否则使用就用 statement 格式。</strong></p><h2 id="3-主从延迟"><a href="#3-主从延迟" class="headerlink" title="3. 主从延迟"></a>3. 主从延迟</h2><p>有时候我们遇到从数据库中获取不到信息的诡异问题时，会纠结于代码中是否有一些逻辑会把之前写入的内容删除，但是你又会发现，过了一段时间再去查询时又可以读到数据了，这基本上就是主从延迟在作怪。</p><p>主从延迟，其实就是“从库回放” 完成的时间，与 “主库写 binlog” 完成时间的差值，<strong>会导致从库查询的数据，和主库的不一致</strong>。</p><h3 id="3-1-主从延迟原理"><a href="#3-1-主从延迟原理" class="headerlink" title="3.1 主从延迟原理"></a>3.1 主从延迟原理</h3><p>谈到 MySQL 数据库主从同步延迟原理，得从 MySQL 的主从复制原理说起：</p><ul><li>MySQL 的主从复制都是单线程的操作，主库对所有 DDL 和 DML 产生 binlog，binlog 是顺序写，所以效率很高；</li><li>Slave 的 Slave_IO_Running 线程会到主库取日志，放入 relay log，效率会比较高；</li><li>Slave 的 Slave_SQL_Running 线程将主库的 DDL 和 DML 操作都在 Slave 实施，<strong>DML 和 DDL 的 IO 操作是随机的，不是顺序的</strong>，因此成本会很高，还可能是 Slave 上的其他查询产生 lock 争用，由于 Slave_SQL_Running 也是单线程的，所以一个 DDL 卡住了，需要执行 10 分钟，那么所有之后的 DDL 会等待这个 DDL 执行完才会继续执行，这就导致了延时。</li></ul><p><strong>总结一下主从延迟的主要原因</strong>：主从延迟主要是出现在 “relay log 回放” 这一步，当主库的 TPS 并发较高，产生的 DDL 数量超过从库一个 SQL 线程所能承受的范围，那么延时就产生了，当然还有就是可能与从库的大型 query 语句产生了锁等待。</p><h3 id="3-2-主从延迟情况"><a href="#3-2-主从延迟情况" class="headerlink" title="3.2 主从延迟情况"></a>3.2 主从延迟情况</h3><ul><li><strong>从库机器性能</strong>：从库机器比主库的机器性能差，只需选择主从库一样规格的机器就好。</li><li><strong>从库压力大</strong>：可以搞了一主多从的架构，还可以把 binlog 接入到 Hadoop 这类系统，让它们提供查询的能力。</li><li><strong>从库过多</strong>：要避免复制的从节点数量过多，<strong>从库数据一般以3-5个为宜。</strong></li><li><strong>大事务</strong>：如果一个事务执行就要 10 分钟，那么主库执行完后，给到从库执行，最后这个事务可能就会导致从库延迟 10 分钟啦。日常开发中，<strong>不要一次性 delete 太多 SQL</strong>，需要分批进行，另外大表的 DDL 语句，也会导致大事务。</li><li><strong>网络延迟</strong>：优化网络，比如带宽 20M 升级到 100M。</li><li><strong>MySQL 版本低</strong>：低版本的 MySQL 只支持单线程复制，如果主库并发高，来不及传送到从库，就会导致延迟，可以换用更高版本的 MySQL，支持多线程复制。</li></ul><h3 id="3-3-主从延迟解决方案"><a href="#3-3-主从延迟解决方案" class="headerlink" title="3.3 主从延迟解决方案"></a>3.3 主从延迟解决方案</h3><p>我们一般会把从库落后的时间作为一个重点的数据库指标做监控和报警，正常的时间是在毫秒级别，一旦落后的时间达到了秒级别就需要告警了。</p><p>解决该问题的方法，除了缩短主从延迟的时间，还有一些其它的方法，基本原理都是尽量不查询从库，具体解决方案如下：</p><ul><li><strong>使用缓存</strong>：我们在同步写数据库的同时，也把数据写到缓存，查询数据时，会先查询缓存，不过这种情况会带来 MySQL 和 Redis 数据一致性问题。</li><li><strong>查询主库</strong>：直接查询主库，这种情况会给主库太大压力，不建议这种方式。</li><li><strong>数据冗余</strong>：对于一些异步处理的场景，如果只扔数据 ID，消费数据时，需要查询从库，我们可以把数据全部都扔给消息队列，这样消费者就无需再查询从库。（这种情况应该不太能出现，数据转了一圈，MySQL 主从还没有同步好，直接去撕 DBA 吧）</li></ul><p>在实际应用场景中，对于一些非常核心的场景，比如库存，支付订单等，需要直接查询主库，其它非核心场景，就不要去查主库了。</p><h2 id="4-主从切换"><a href="#4-主从切换" class="headerlink" title="4. 主从切换"></a>4. 主从切换</h2><h3 id="4-1-一主一从"><a href="#4-1-一主一从" class="headerlink" title="4.1 一主一从"></a>4.1 一主一从</h3><p>两台机器 A 和 B，A 为主库，负责读写，B 为从库，负责读数据。</p><p>如果 A 库发生故障，B 库成为主库负责读写，修复故障后，A 成为从库，主库 B 同步数据到从库 A。</p><p><img src="http://cdn.882227.xyz/5e03e730169040c8b12903c149980a0c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p><ul><li><strong>优点</strong>： 从库支持读，分担了主库的压力，提升了并发度，且一个机器故障了可以自动切换，操作比较简单，公司从库还可以充当数据备份的角色；</li><li><strong>缺点</strong>： 一台从库，并发支持还是不够，并且一共两台机器，还是存在同时故障的机率，不够高可用。</li></ul><p>对于一主一从的模式，一般小公司会这么用，不过该模式下，主从分离的意义其实并不大，因为小公司的流量不高，更多是为了数据库的可用性，以及数据备份。</p><h3 id="4-2-一主多从"><a href="#4-2-一主多从" class="headerlink" title="4.2 一主多从"></a>4.2 一主多从</h3><p>一台主库多台从库，A 为主库，负责读写，B、C、D为从库，负责读数据。</p><p>如果 A 库发生故障，B 库成为主库负责读写，C、D 负责读，修复故障后，A 也成为从库，主库 B 同步数据到从库 A。</p><p><img src="http://cdn.882227.xyz/7a58403f9c6440f4ba947c9167ae6b51~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p><ul><li><strong>优点</strong>： 多个从库支持读，分担了主库的压力，明显提升了读的并发度。</li><li><strong>缺点</strong>： 只有一台主机写，因此写的并发度不高。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql日志格式</title>
    <link href="/2025/07/07/Mysql%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F/"/>
    <url>/2025/07/07/Mysql%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MySQL 的日志主要包括<strong>二进制日志（Binary Log）</strong>、<strong>错误日志</strong>、<strong>慢查询日志</strong>、<strong>一般查询日志</strong>和<strong>中继日志</strong>。其中，二进制日志的格式直接影响主从复制和数据恢复。本文重点介绍二进制日志的三种格式：<strong>Statement (SBR)</strong>、<strong>Row (RBR)</strong> 和 <strong>Mixed</strong>，并简述其他日志类型。</p><h2 id="二进制日志格式"><a href="#二进制日志格式" class="headerlink" title="二进制日志格式"></a>二进制日志格式</h2><h3 id="1-Statement（基于语句的复制，SBR）"><a href="#1-Statement（基于语句的复制，SBR）" class="headerlink" title="1. Statement（基于语句的复制，SBR）"></a>1. Statement（基于语句的复制，SBR）</h3><ul><li><strong>描述</strong>：记录执行的 SQL 语句，如 INSERT INTO table VALUES (…);。</li><li><strong>特点</strong>：<ul><li>日志文件较小，仅记录 SQL 语句。</li><li>非确定性操作（如 NOW()、RAND()）可能导致主从复制不一致。</li><li>触发器、存储过程等可能无法正确复制。</li><li>日志可读性高，适合人工分析。</li></ul></li><li><strong>适用场景</strong>：<ul><li>存储空间有限。</li><li>数据一致性要求不高，或操作多为确定性。</li><li>需要审计 SQL 执行历史。</li></ul></li><li><strong>配置</strong>：binlog_format &#x3D; STATEMENT</li></ul><h3 id="2-Row（基于行的复制，RBR）"><a href="#2-Row（基于行的复制，RBR）" class="headerlink" title="2. Row（基于行的复制，RBR）"></a>2. Row（基于行的复制，RBR）</h3><ul><li><strong>描述</strong>：记录每行数据的实际变化（插入、更新、删除），而非 SQL 语句。</li><li><strong>特点</strong>：<ul><li>日志文件较大，记录具体数据变化。</li><li>保证数据一致性，适合非确定性操作。</li><li>对复杂查询（如多表联接）效率较高。</li><li>日志可读性低，不便于人工分析。</li></ul></li><li><strong>适用场景</strong>：<ul><li>高一致性的主从复制。</li><li>涉及非确定性操作（如 UUID()、RAND()）。</li><li>数据更新频繁，复杂查询较多。</li></ul></li><li><strong>配置</strong>：binlog_format &#x3D; ROW</li></ul><h3 id="3-Mixed（混合模式）"><a href="#3-Mixed（混合模式）" class="headerlink" title="3. Mixed（混合模式）"></a>3. Mixed（混合模式）</h3><ul><li><strong>描述</strong>：结合 Statement 和 Row 格式，MySQL 根据操作类型自动选择。</li><li><strong>特点</strong>：<ul><li>默认使用 Statement 格式，记录 SQL 语句。</li><li>非确定性操作或特定场景（如 INSERT … SELECT）切换为 Row 格式。</li><li>兼顾日志大小和一致性，但行为可能不够明确。</li><li>可读性取决于记录格式。</li></ul></li><li><strong>适用场景</strong>：<ul><li>需要平衡一致性和存储空间。</li><li>不确定操作类型，依赖 MySQL 自动优化。</li></ul></li><li><strong>配置</strong>：binlog_format &#x3D; MIXED</li></ul><h2 id="其他日志类型"><a href="#其他日志类型" class="headerlink" title="其他日志类型"></a>其他日志类型</h2><ul><li><strong>错误日志（Error Log）</strong>：<ul><li>记录 MySQL 启动、停止及运行错误，格式为纯文本。</li></ul></li><li><strong>慢查询日志（Slow Query Log）</strong>：<ul><li>记录执行时间超阈值的查询，格式为文本，包含 SQL 和执行时间。</li></ul></li><li><strong>一般查询日志（General Query Log）</strong>：<ul><li>记录所有客户端连接和 SQL 语句，格式为文本，适合调试但开销大。</li></ul></li><li><strong>中继日志（Relay Log）</strong>：<ul><li>用于主从复制，存储从主库接收的二进制日志，格式与二进制日志一致。</li></ul></li></ul><h2 id="格式对比"><a href="#格式对比" class="headerlink" title="格式对比"></a>格式对比</h2><table><thead><tr><th>特性</th><th>Statement (SBR)</th><th>Row (RBR)</th><th>Mixed</th></tr></thead><tbody><tr><td><strong>记录内容</strong></td><td>SQL 语句</td><td>每行数据变化</td><td>自动选择 Statement 或 Row</td></tr><tr><td><strong>日志大小</strong></td><td>较小</td><td>较大</td><td>中等</td></tr><tr><td><strong>一致性</strong></td><td>可能不一致（非确定性操作）</td><td>高一致性</td><td>较高（视情况切换）</td></tr><tr><td><strong>可读性</strong></td><td>高（SQL 语句易读）</td><td>低（数据变化难读）</td><td>视记录格式而定</td></tr><tr><td><strong>适用场景</strong></td><td>审计、简单操作、空间受限</td><td>高一致性、复杂查询</td><td>折中场景</td></tr><tr><td><strong>性能影响</strong></td><td>主库执行快，日志小</td><td>主库记录开销大，复制可靠</td><td>平衡性能与一致性</td></tr></tbody></table><h2 id="配置与查看"><a href="#配置与查看" class="headerlink" title="配置与查看"></a>配置与查看</h2><ul><li><p><strong>查看当前日志格式</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;binlog_format&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>设置日志格式</strong>（需 SUPER 权限）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> binlog_format <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;STATEMENT&#x27;</span>; <span class="hljs-comment">-- 或 ROW, MIXED</span><br></code></pre></td></tr></table></figure><p>或在 my.cnf 中配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">binlog_format</span> = ROW<br></code></pre></td></tr></table></figure></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>版本差异</strong>：MySQL 5.7 起推荐 Row 格式，因其复制一致性更高。</li><li><strong>复制环境</strong>：Row 格式适合高可用、高一致性场景。</li><li><strong>存储空间</strong>：Row 格式日志文件较大，需确保足够磁盘空间。</li><li><strong>非确定性操作</strong>：如 LIMIT 无 ORDER BY、触发器等，推荐 Row 或 Mixed 模式。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Redis或Memcached优化Grafana 热点查询缓存</title>
    <link href="/2025/07/07/%E7%83%AD%E7%82%B9%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/"/>
    <url>/2025/07/07/%E7%83%AD%E7%82%B9%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Redis-或-Memcached-优化-Grafana-热点查询缓存"><a href="#使用-Redis-或-Memcached-优化-Grafana-热点查询缓存" class="headerlink" title="使用 Redis 或 Memcached 优化 Grafana 热点查询缓存"></a>使用 Redis 或 Memcached 优化 Grafana 热点查询缓存</h1><p>本文档整理了如何在 Grafana 中使用 Redis 或 Memcached 作为外部缓存后端，以优化热点查询（如 30 天 CPU 峰值）的性能。</p><h2 id="1-使用-Redis-作为缓存"><a href="#1-使用-Redis-作为缓存" class="headerlink" title="1. 使用 Redis 作为缓存"></a>1. 使用 Redis 作为缓存</h2><h3 id="1-1-安装和配置-Redis"><a href="#1-1-安装和配置-Redis" class="headerlink" title="1.1 安装和配置 Redis"></a>1.1 安装和配置 Redis</h3><ul><li><p><strong>安装 Redis</strong>：在服务器上安装 Redis（如 <code>sudo apt-get install redis-server</code>）或使用 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name redis -p 6379:6379 redis<br></code></pre></td></tr></table></figure></li><li><p><strong>验证连接</strong>：确保 Grafana 服务器可以连接到 Redis（检查 IP、端口和防火墙）。</p></li></ul><h3 id="1-2-修改-Grafana-配置文件"><a href="#1-2-修改-Grafana-配置文件" class="headerlink" title="1.2 修改 Grafana 配置文件"></a>1.2 修改 Grafana 配置文件</h3><ol><li><p>编辑 <code>/etc/grafana/grafana.ini</code>，配置 <code>[caching]</code> 部分：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[caching]</span><br><span class="hljs-attr">enabled</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">type</span> = redis<br><span class="hljs-attr">connection_string</span> = redis://&lt;redis-host&gt;:<span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><ul><li><p>如果 Redis 有密码或特定数据库：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">connection_string</span> = redis://:&lt;password&gt;@&lt;redis-host&gt;:<span class="hljs-number">6379</span>/&lt;db-number&gt;<br></code></pre></td></tr></table></figure><p>示例：<code>redis://:mypassword@192.168.1.100:6379/0</code></p></li></ul></li><li><p>可选配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">cache_ttl</span> = <span class="hljs-number">3600</span> <span class="hljs-comment">; 缓存 1 小时</span><br><span class="hljs-attr">max_size</span> = <span class="hljs-number">100</span> <span class="hljs-comment">; 限制缓存为 100MB</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="1-3-重启-Grafana"><a href="#1-3-重启-Grafana" class="headerlink" title="1.3 重启 Grafana"></a>1.3 重启 Grafana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart grafana-server<br></code></pre></td></tr></table></figure><p>或 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart &lt;grafana-container-name&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-验证缓存"><a href="#1-4-验证缓存" class="headerlink" title="1.4 验证缓存"></a>1.4 验证缓存</h3><ul><li>检查 Grafana 日志（<code>/var/log/grafana/grafana.log</code>）确认 Redis 连接。</li><li>监控缓存命中率：使用 Grafana 指标（如 <code>grafana_cache_hits_total</code>）。</li></ul><h3 id="1-5-注意事项"><a href="#1-5-注意事项" class="headerlink" title="1.5 注意事项"></a>1.5 注意事项</h3><ul><li><strong>缓存范围</strong>：适用于查询结果、仪表板元数据等。</li><li><strong>性能</strong>：确保 Redis 有足够内存和高可用性。</li><li><strong>安全性</strong>：建议启用 TLS 或密码保护。</li></ul><h2 id="2-使用-Memcached-作为缓存"><a href="#2-使用-Memcached-作为缓存" class="headerlink" title="2. 使用 Memcached 作为缓存"></a>2. 使用 Memcached 作为缓存</h2><h3 id="2-1-安装和配置-Memcached"><a href="#2-1-安装和配置-Memcached" class="headerlink" title="2.1 安装和配置 Memcached"></a>2.1 安装和配置 Memcached</h3><ul><li><p><strong>安装 Memcached</strong>：在服务器上安装（如 <code>sudo apt-get install memcached</code>）或使用 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name memcached -p 11211:11211 memcached<br></code></pre></td></tr></table></figure></li><li><p><strong>验证连接</strong>：确保 Grafana 可访问 Memcached（默认端口 11211）。</p></li></ul><h3 id="2-2-修改-Grafana-配置文件"><a href="#2-2-修改-Grafana-配置文件" class="headerlink" title="2.2 修改 Grafana 配置文件"></a>2.2 修改 Grafana 配置文件</h3><ol><li><p>编辑 <code>grafana.ini</code>，配置 <code>[caching]</code> 部分：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[caching]</span><br><span class="hljs-attr">enabled</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">type</span> = memcached<br><span class="hljs-attr">connection_string</span> = &lt;memcached-host&gt;:<span class="hljs-number">11211</span><br></code></pre></td></tr></table></figure><ul><li><p>多实例用逗号分隔：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">connection_string</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">11211</span>,<span class="hljs-number">192.168</span>.<span class="hljs-number">1.101</span>:<span class="hljs-number">11211</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>可选配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">cache_ttl</span> = <span class="hljs-number">3600</span> <span class="hljs-comment">; 缓存 1 小时</span><br><span class="hljs-attr">max_size</span> = <span class="hljs-number">100</span> <span class="hljs-comment">; 限制缓存为 100MB</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-3-重启-Grafana"><a href="#2-3-重启-Grafana" class="headerlink" title="2.3 重启 Grafana"></a>2.3 重启 Grafana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart grafana-server<br></code></pre></td></tr></table></figure><p>或 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart &lt;grafana-container-name&gt;<br></code></pre></td></tr></table></figure><h3 id="2-4-验证缓存"><a href="#2-4-验证缓存" class="headerlink" title="2.4 验证缓存"></a>2.4 验证缓存</h3><ul><li>检查 Grafana 日志确认 Memcached 连接。</li><li>监控缓存命中率（<code>grafana_cache_hits_total</code>）。</li></ul><h3 id="2-5-注意事项"><a href="#2-5-注意事项" class="headerlink" title="2.5 注意事项"></a>2.5 注意事项</h3><ul><li><strong>限制</strong>：Memcached 无持久化，重启丢失数据。</li><li><strong>性能</strong>：适合轻量级缓存，内存效率高。</li><li><strong>安全性</strong>：通过防火墙限制访问。</li></ul><h2 id="3-优化热点查询缓存"><a href="#3-优化热点查询缓存" class="headerlink" title="3. 优化热点查询缓存"></a>3. 优化热点查询缓存</h2><ul><li><strong>识别热点查询</strong>：通过 Grafana 日志或 Prometheus 指标（如 <code>prometheus_engine_query_duration_seconds</code>）识别高频查询。</li><li><strong>调整 TTL</strong>：根据查询更新频率设置 TTL（如 24 小时）。</li><li><strong>预计算查询</strong>：结合 Prometheus Recording Rules 预计算复杂查询（如 <code>max_over_time</code>）。</li><li><strong>分层缓存</strong>：结合数据源缓存（如 Thanos Querier）形成多级缓存。</li></ul><h2 id="4-Redis-vs-Memcached"><a href="#4-Redis-vs-Memcached" class="headerlink" title="4. Redis vs. Memcached"></a>4. Redis vs. Memcached</h2><ul><li><strong>Redis</strong>：<ul><li>优点：支持持久化、丰富数据结构、支持集群。</li><li>缺点：配置复杂，资源占用较高。</li><li>推荐场景：复杂查询、长期缓存。</li></ul></li><li><strong>Memcached</strong>：<ul><li>优点：简单轻量，内存效率高。</li><li>缺点：无持久化，功能单一。</li><li>推荐场景：临时热点查询缓存。</li></ul></li></ul><h2 id="5-验证和监控"><a href="#5-验证和监控" class="headerlink" title="5. 验证和监控"></a>5. 验证和监控</h2><ul><li><strong>验证缓存</strong>：<ul><li>使用 Grafana “Inspect” 检查查询响应时间。</li><li>检查 Redis（<code>INFO STATS</code>）或 Memcached（<code>stats</code>）命中率。</li></ul></li><li><strong>监控性能</strong>：<ul><li>使用 <code>redis_exporter</code> 或 <code>memcached_exporter</code> 监控。</li><li>在 Grafana 创建仪表板，监控命中率、内存和延迟。</li></ul></li></ul><h2 id="6-示例：缓存-30-天-CPU-峰值查询"><a href="#6-示例：缓存-30-天-CPU-峰值查询" class="headerlink" title="6. 示例：缓存 30 天 CPU 峰值查询"></a>6. 示例：缓存 30 天 CPU 峰值查询</h2><p>查询：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">max_over_time</span><span class="hljs-params">(rate(node_cpu_seconds_total[<span class="hljs-number">5</span>m])</span></span><span class="hljs-selector-attr">[30d:1h]</span>)<br></code></pre></td></tr></table></figure><p>配置 Redis：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[caching]</span><br><span class="hljs-attr">enabled</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">type</span> = redis<br><span class="hljs-attr">connection_string</span> = redis://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">6379</span><br><span class="hljs-attr">cache_ttl</span> = <span class="hljs-number">86400</span> <span class="hljs-comment">; 缓存 24 小时</span><br></code></pre></td></tr></table></figure><p>验证：检查 Redis 缓存键（<code>KEYS *</code>）或 Grafana 日志。</p><h2 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a>7. 注意事项</h2><ul><li><strong>缓存失效</strong>：定期清理过期键，Redis 支持自动过期，Memcached 依赖 LRU。</li><li><strong>数据一致性</strong>：热点查询适合较长 TTL，实时查询需降低 TTL。</li><li><strong>资源规划</strong>：分配足够内存（建议从 1GB 开始）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Monitor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prometheus添加基本认证</title>
    <link href="/2025/06/19/prometheus%E6%B7%BB%E5%8A%A0%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81%EF%BC%88Basic%20auth%EF%BC%89/"/>
    <url>/2025/06/19/prometheus%E6%B7%BB%E5%8A%A0%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81%EF%BC%88Basic%20auth%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>官方配置说明：</p><p><a href="https://prometheus.io/docs/guides/basic-auth/" title="Basic auth | Prometheus">Basic auth | Prometheus</a></p><h4 id="一、生成密码加密串"><a href="#一、生成密码加密串" class="headerlink" title="一、生成密码加密串"></a>一、生成密码加密串</h4><p>Prometheus于2.24版本（包括2.24）之后提供Basic Auth功能进行加密访问，在浏览器登录UI的时候需要输入用户密码，访问Prometheus api的时候也需要加上用户密码。</p><p>使用<a href="https://so.csdn.net/so/search?q=python%E8%84%9A%E6%9C%AC&spm=1001.2101.3001.7020">python脚本</a>，生成加密密码串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> getpassimport bcrypt password = getpass.getpass(<span class="hljs-string">&quot;password: &quot;</span>)hashed_password = bcrypt.hashpw(password.encode(<span class="hljs-string">&quot;utf-8&quot;</span>), bcrypt.gensalt())<span class="hljs-built_in">print</span>(hashed_password.decode())<br></code></pre></td></tr></table></figure><p>将以上脚本复制保存为 getpass.py</p><p>然后通过cmd命令行<a href="https://so.csdn.net/so/search?q=%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC&spm=1001.2101.3001.7020">执行脚本</a></p><p>python.exe getpass.py</p><p><img src="http://cdn.882227.xyz/9da3a765b9bff25867a255fbc607bf25.png"></p><p>执行脚本后，在password：后面输入你要设置的密码，然后就会生成一串加密的密码串，记录下该密码串，后面配置会使用到。</p><h4 id="二、服务端配置"><a href="#二、服务端配置" class="headerlink" title="二、服务端配置"></a>二、服务端配置</h4><p>以我配置习惯为例，Prometheus服务端我默认将配置存放在 &#x2F;etc&#x2F;prometheus目录下</p><p>在该目录下新建文件 web.yml，然后添加步骤一生成的密码加密串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">basic_auth_users:    admin: $2b$12$/cUMX6b8JAu9onTddMfHAetdlOJS9XU....................<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/d33347f22ab682ec17b78737cb6eae45.png"></p><p>保存文件后，使用promtool工具对文件进行校验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">promtool check web-config /etc/prometheus/web.yml<br></code></pre></td></tr></table></figure><p><img src="http://cdn.882227.xyz/b53fc10d2f0ccbe546317b3346b30c62.png"></p><p> 输出SUCCESS表示校验通过</p><p>以上准备工作完成后，最后在启动的命令脚本中，需加入web.config.file的配置参数</p><p><img src="http://cdn.882227.xyz/0a6621366e2069dfec7505ccd094e636.png"></p><p>我本地是将启动脚本配置成服务启动，所以在服务脚本中加入参数即可</p><p><img src="http://cdn.882227.xyz/f6a5451059eb5f740c2c7ffac2c05660.png"></p><p>然后重新加载服务脚本：systemctl daemon-reload</p><p>再重启服务：systemctl restart prometheus</p><p> 最后再进行验证</p><p><img src="http://cdn.882227.xyz/f737a40933cccda8307b440d1c6e44b2.png"></p><p>现在就需要输入账号密码验证</p><p>登录后，查看target会发现，Prometheus的自检节点无法通过校验</p><p><img src="http://cdn.882227.xyz/da5f0305e15ed11769d994f4b0923460.png"></p><p>这是因为节点在获取metrics接口时未配置basic auth认证校验，只需要在服务端将账号密码配置上就行</p><p><img src="http://cdn.882227.xyz/ded3201d4cfd6d50c28710b05855b6f6.png"></p><p>注意的是，密码是加密前的明文密码，配置完成后重启服务就正常了。</p><p>本文转自 <a href="https://blog.csdn.net/Hu_wen/article/details/136869252">https://blog.csdn.net/Hu_wen/article/details/136869252</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s-面试题</title>
    <link href="/2025/06/18/k8s%20%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2025/06/18/k8s%20%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="k8s-面试题"><a href="#k8s-面试题" class="headerlink" title="k8s-面试题"></a>k8s-面试题</h1><h3 id="1、简述etcd及其特点？"><a href="#1、简述etcd及其特点？" class="headerlink" title="1、简述etcd及其特点？"></a>1、简述etcd及其特点？</h3><p>答：</p><p>etcd 是 CoreOS 团队发起的开源项目，是一个管理配置信息和服务发现（service discovery）的项目，它的目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。<br>特点：</p><ul><li>简单：支持 REST 风格的 HTTP+JSON API</li><li>安全：支持 HTTPS 方式的访问</li><li>快速：支持并发 1k&#x2F;s 的写操作</li><li>可靠：支持分布式结构，基于 Raft 的一致性算法，Raft 是一套通过选举主节点来实现分布式系统一致性的算法</li></ul><h3 id="2、简述etcd适应的场景？"><a href="#2、简述etcd适应的场景？" class="headerlink" title="2、简述etcd适应的场景？"></a>2、简述etcd适应的场景？</h3><p>答：</p><p>etcd基于其优秀的特点，可广泛的应用于以下场景：</p><ul><li>服务发现(Service Discovery)：服务发现主要解决在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听udp或tcp端口，并且通过名字就可以查找和连接。</li><li>消息发布与订阅：在分布式系统中，最适用的一种组件间通信方式就是消息发布与订阅。即构建一个配置共享中心，数据提供者在这个配置中心发布消息，而消息使用者则订阅他们关心的主题，一旦主题有消息发布，就会实时通知订阅者。通过这种方式可以做到分布式系统配置的集中式管理与动态更新。应用中用到的一些配置信息放到etcd上进行集中管理。</li><li>负载均衡：在分布式系统中，为了保证服务的高可用以及数据的一致性，通常都会把数据和服务部署多份，以此达到对等服务，即使其中的某一个服务失效了，也不影响使用。etcd本身分布式架构存储的信息访问支持负载均衡。etcd集群化以后，每个etcd的核心节点都可以处理用户的请求。所以，把数据量小但是访问频繁的消息数据直接存储到etcd中也可以实现负载均衡的效果。</li><li>分布式通知与协调：与消息发布和订阅类似，都用到了etcd 中的Watcher 机制，通过注册与异步通知机制，实现分布式环境下不同系统之间的通知与协调，从而对数据变更做到实时处理。</li><li>分布式锁：因为etcd使用Raft算法保持了数据的强一致性，某次操作存储到集群中的值必然是全局一致的，所以很容易实现分布式锁。锁服务有两种使用方式，一是保持独占，二是控制时序。</li><li>集群监控与Leader 竞选：通过etcd 来进行监控实现起来非常简单并且实时性强。</li></ul><h3 id="3、简述什么是Kubernetes？"><a href="#3、简述什么是Kubernetes？" class="headerlink" title="3、简述什么是Kubernetes？"></a>3、简述什么是Kubernetes？</h3><p>答：</p><p>Kubernetes是一个全新的基于容器技术的分布式系统支撑平台。是Google开源的容器集群管理系统（谷歌内部:Borg）。在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等一系列完整功能，提高了大规模容器集群管理的便捷性。并且具有完备的集群管理能力，多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和发现机制、內建智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制以及多粒度的资源配额管理能力。</p><h3 id="4、简述Kubernetes和Docker的关系？"><a href="#4、简述Kubernetes和Docker的关系？" class="headerlink" title="4、简述Kubernetes和Docker的关系？"></a>4、简述Kubernetes和Docker的关系？</h3><p>答：</p><p>Docker 提供容器的生命周期管理和，Docker 镜像构建运行时容器。它的主要优点是将将软件&#x2F;应用程序运行所需的设置和依赖项打包到一个容器中，从而实现了可移植性等优点。<br>Kubernetes 用于关联和编排在多个主机上运行的容器。</p><h3 id="5、简述Kubernetes中什么是Minikube、Kubectl、Kubelet？"><a href="#5、简述Kubernetes中什么是Minikube、Kubectl、Kubelet？" class="headerlink" title="5、简述Kubernetes中什么是Minikube、Kubectl、Kubelet？"></a>5、简述Kubernetes中什么是Minikube、Kubectl、Kubelet？</h3><p>答：</p><ul><li>Minikube 是一种可以在本地轻松运行一个单节点 Kubernetes 群集的工具。</li><li>Kubectl 是一个命令行工具，可以使用该工具控制Kubernetes集群管理器，如检查群集资源，创建、删除和更新组件，查看应用程序。</li><li>Kubelet 是一个代理服务，它在每个节点上运行，并使从服务器与主服务器通信。</li></ul><h3 id="6、简述Kubernetes常见的部署方式？"><a href="#6、简述Kubernetes常见的部署方式？" class="headerlink" title="6、简述Kubernetes常见的部署方式？"></a>6、简述Kubernetes常见的部署方式？</h3><p>答：</p><p>常见的Kubernetes部署方式有：</p><ul><li>kubeadm：也是推荐的一种部署方式；</li><li>二进制：较深入的部署方式；</li><li>minikube：在本地轻松运行一个单节点 Kubernetes 群集的工具；</li><li>kubekey：由青云开源的，第三方式部署方式，封闭kubeadm;</li><li>kubease：使用ansible部署方式；</li><li>sealos：极速部署Kubernetes集群方式，封装kubeadm</li></ul><h3 id="7、简述Kubernetes如何实现集群管理？"><a href="#7、简述Kubernetes如何实现集群管理？" class="headerlink" title="7、简述Kubernetes如何实现集群管理？"></a>7、简述Kubernetes如何实现集群管理？</h3><p>答：</p><p>在集群管理方面，Kubernetes将集群中的机器划分为一个Master节点和一群工作节点Node。</p><p>其中，在Master节点运行着集群管理相关的一组进程kubeapiserver、kube-controller-manager和kube-scheduler，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理能力，并且都是全自动完成的。</p><h3 id="8、简述Kubernetes的优势、适应场景及其特点？"><a href="#8、简述Kubernetes的优势、适应场景及其特点？" class="headerlink" title="8、简述Kubernetes的优势、适应场景及其特点？"></a>8、简述Kubernetes的优势、适应场景及其特点？</h3><p>答：<br>Kubernetes作为一个完备的分布式系统支撑平台，其主要优势：</p><ul><li><p>容器编排</p></li><li><p>轻量级</p></li><li><p>开源</p></li><li><p>弹性伸缩</p></li><li><p>负载均衡</p></li></ul><p>Kubernetes常见场景：</p><ul><li><p>快速部署应用</p></li><li><p>快速扩展应用</p></li><li><p>无缝对接新的应用功能</p></li><li><p>节省资源，优化硬件资源的使用</p></li></ul><p>Kubernetes相关特点：</p><ul><li>可移植: 支持公有云、私有云、混合云、多重云（multi-cloud）。</li><li>可扩展: 模块化,、插件化、可挂载、可组合。</li><li>自动化: 自动部署、自动重启、自动复制、自动伸缩&#x2F;扩展。</li></ul><h3 id="9、简述Kubernetes的缺点或当前的不足之处？"><a href="#9、简述Kubernetes的缺点或当前的不足之处？" class="headerlink" title="9、简述Kubernetes的缺点或当前的不足之处？"></a>9、简述Kubernetes的缺点或当前的不足之处？</h3><p>Kubernetes当前存在的缺点（不足）如下：</p><ul><li>安装过程和配置相对困难复杂。</li><li>管理服务相对繁琐。</li><li>运行和编译需要很多时间。</li><li>它比其他替代品更昂贵。</li><li>对于简单的应用程序来说，可能不需要涉及Kubernetes即可满足。</li></ul><h3 id="10、简述Kubernetes相关基础概念？"><a href="#10、简述Kubernetes相关基础概念？" class="headerlink" title="10、简述Kubernetes相关基础概念？"></a>10、简述Kubernetes相关基础概念？</h3><p>答：</p><ul><li>master：k8s集群的管理节点，负责管理集群，提供集群的资源数据访问入口。拥有Etcd存储服务（可选），运行Api Server进程，Controller Manager服务进程及Scheduler服务进程。</li><li>node（worker）：Node（worker）是Kubernetes集群架构中运行Pod的服务节点，是Kubernetes集群操作的单元，用来承载被分配Pod的运行，是Pod<br>运行的宿主机。运行docker eninge服务，守护进程kunelet及负载均衡器kube-proxy。</li><li>pod：运行于Node节点上，若干相关容器的组合。Pod内包含的容器运行在同一宿主机上，使用相同的网络命名空间、IP地址和端口，能够通过localhost进<br>  行通信。Pod是Kurbernetes进行创建、调度和管理的最小单位，它提供了比容器更高层次的抽象，使得部署和管理更加灵活。一个Pod可以包含一个容器或者多个相关容器。</li><li>label：Kubernetes中的Label实质是一系列的Key&#x2F;Value键值对，其中key与value可自定义。Label可以附加到各种资源对象上，如Node、Pod、Service、<br>  RC等。一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上去。Kubernetes通过Label Selector（标签选择器）查询<br>  和筛选资源对象。</li><li>Replication Controller：Replication Controller用来管理Pod的副本，保证集群中存在指定数量的Pod副本。集群中副本的数量大于指定数量，则会停止指定<br>数量之外的多余容器数量。反之，则会启动少于指定数量个数的容器，保证数量不变。Replication Controller是实现弹性伸缩、动态扩容和滚动升级的核心。</li><li>Deployment：Deployment在内部使用了RS来实现目的，Deployment相当于RC的一次升级，其最大的特色为可以随时获知当前Pod的部署进度。</li><li>HPA（Horizontal Pod Autoscaler）：Pod的横向自动扩容，也是Kubernetes的一种资源，通过追踪分析RC控制的所有Pod目标的负载变化情况，来确定是<br>  否需要针对性的调整Pod副本数量。</li><li>Service：Service定义了Pod的逻辑集合和访问该集合的策略，是真实服务的抽象。Service提供了一个统一的服务访问入口以及服务代理和发现机制，关联多个相同Label的Pod，用户不需要了解后台Pod是如何运行。</li><li>Volume：Volume是Pod中能够被多个容器访问的共享目录，Kubernetes中的Volume是定义在Pod上，可以被一个或多个Pod中的容器挂载到某个目录下。</li><li>Namespace：Namespace用于实现多租户的资源隔离，可将集群内部的资源对象分配到不同的Namespace中，形成逻辑上的不同项目、小组或用户组，便于不同的Namespace在共享使用整个集群的资源的同时还能被分别管理。</li></ul><h3 id="11、简述Kubernetes集群相关组件？"><a href="#11、简述Kubernetes集群相关组件？" class="headerlink" title="11、简述Kubernetes集群相关组件？"></a>11、简述Kubernetes集群相关组件？</h3><p>答：</p><p>Kubernetes Master控制组件，调度管理整个系统（集群），包含如下组件:</p><ul><li>Kubernetes API Server：作为Kubernetes系统的入口，其封装了核心对象的增删改查操作，以RESTful API接口方式提供给外部客户和内部组件调用，集群内<br>各个功能模块之间数据交互和通信的中心枢纽。</li><li>Kubernetes Scheduler：为新建立的Pod进行节点(node)选择(即分配机器)，负责集群的资源调度。</li><li>Kubernetes Controller：负责执行各种控制器，目前已经提供了很多控制器来保证Kubernetes的正常运行。</li><li>Replication Controller：管理维护Replication Controller，关联ReplicationController和Pod，保证Replication Controller定义的副本数量与实际运行<br>  Pod数量一致。</li><li>Node Controller：管理维护Node，定期检查Node的健康状态，标识出(失效|未失效)的Node节点。</li><li>Namespace Controller：管理维护Namespace，定期清理无效的Namespace，包括Namesapce下的API对象，比如Pod、Service等。</li><li>Service Controller：管理维护Service，提供负载以及服务代理。</li><li>EndPoints Controller：管理维护Endpoints，关联Service和Pod，创建Endpoints为Service的后端，当Pod发生变化时，实时更新Endpoints。</li><li>Service Account Controller：管理维护Service Account，为每个Namespace创建默认的Service Account，同时为Service Account创建Service Account<br>  Secret。</li><li>Persistent Volume Controller：管理维护Persistent Volume和Persistent Volume Claim，为新的Persistent Volume Claim分配Persistent Volume进<br>  行绑定，为释放的Persistent Volume执行清理回收。</li><li>Daemon Set Controller：管理维护Daemon Set，负责创建Daemon Pod，保证指定的Node上正常的运行Daemon Pod。</li><li>Deployment Controller：管理维护Deployment，关联Deployment和Replication Controller，保证运行指定数量的Pod。当Deployment更新时，<br>控制实现Replication Controller和Pod的更新。</li><li>Job Controller：管理维护Job，为Jod创建一次性任务Pod，保证完成Job指定完成的任务数目</li><li>Pod Autoscaler Controller：实现Pod的自动伸缩，定时获取监控数据，进行策略匹配，当满足条件时执行Pod的伸缩动作。</li></ul><h3 id="12、简述Kubernetes-RC的机制？"><a href="#12、简述Kubernetes-RC的机制？" class="headerlink" title="12、简述Kubernetes RC的机制？"></a>12、简述Kubernetes RC的机制？</h3><p>答：</p><p>Replication Controller用来管理Pod的副本，保证集群中存在指定数量的Pod副本。当定义了RC并提交至Kubernetes集群中之后，Master节点上的Controller<br>Manager组件获悉，并同时巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于此RC的期望值，若存在过多的Pod副本在运行，系统会停止一些<br>Pod，反之则自动创建一些Pod。</p><h3 id="13、简述Kubernetes-Replica-Set-和-Replication-Controller-之间有什么区别？"><a href="#13、简述Kubernetes-Replica-Set-和-Replication-Controller-之间有什么区别？" class="headerlink" title="13、简述Kubernetes Replica Set 和 Replication Controller 之间有什么区别？"></a>13、简述Kubernetes Replica Set 和 Replication Controller 之间有什么区别？</h3><p>答：</p><p>Replica Set 和 Replication Controller 类似，都是确保在任何给定时间运行指定数量的 Pod 副本。不同之处在于RS 使用基于集合的选择器，而 Replication<br>Controller 使用基于权限的选择器。</p><h3 id="14、简述kube-proxy作用？"><a href="#14、简述kube-proxy作用？" class="headerlink" title="14、简述kube-proxy作用？"></a>14、简述kube-proxy作用？</h3><p>答：kube-proxy 运行在所有节点上，它监听 apiserver 中 service 和 endpoint 的变化情况，创建路由规则以提供服务 IP 和负载均衡功能。简单理解此进程是Service的透明代理兼负载均衡器，其核心功能是将到某个Service的访问请求转发到后端的多个Pod实例上。</p><h3 id="15、简述kube-proxy-iptables原理？"><a href="#15、简述kube-proxy-iptables原理？" class="headerlink" title="15、简述kube-proxy iptables原理？"></a>15、简述kube-proxy iptables原理？</h3><p>答：</p><p>Kubernetes从1.2版本开始，将iptables作为kube-proxy的默认模式。iptables模式下的kube-proxy不再起到Proxy的作用，其核心功能：通过API<br>Server的Watch接口实时跟踪Service与Endpoint的变更信息，并更新对应的iptables规则，Client的请求流量则通过iptables的NAT机制“直接路由”到目标<br>Pod。</p><h3 id="16、简述kube-proxy-ipvs原理？"><a href="#16、简述kube-proxy-ipvs原理？" class="headerlink" title="16、简述kube-proxy ipvs原理？"></a>16、简述kube-proxy ipvs原理？</h3><p>答：</p><p>IPVS 在Kubernetes1.11 中升级为GA 稳定版。IPVS 则专门用于高性能负载均衡，并使用更高效的数据结构（Hash表），允许几乎无限的规模扩张，因此被kubeproxy采纳为最新模式。<br>在IPVS模式下，使用iptables的扩展ipset，而不是直接调用iptables来生成规则链。iptables规则链是一个线性的数据结构，ipset则引入了带索引的数据结构，因此当规则很多时，也可以很高效地查找和匹配。<br>可以将ipset简单理解为一个IP（段）的集合，这个集合的内容可以是IP地址、IP网段、端口等，iptables可以直接添加规则对这个“可变的集合”进行操作，这样做的好处在于可以大大减少iptables规则的数量，从而减少性能损耗。</p><h3 id="17、简述kube-proxy-ipvs和iptables的异同？"><a href="#17、简述kube-proxy-ipvs和iptables的异同？" class="headerlink" title="17、简述kube-proxy ipvs和iptables的异同？"></a>17、简述kube-proxy ipvs和iptables的异同？</h3><p>答：</p><p>iptables与IPVS都是基于Netfilter 实现的，但因为定位不同，二者有着本质的差别：iptables是为防火墙而设计的；IPVS则专门用于高性能负载均衡，并使用更高<br>效的数据结构（Hash表），允许几乎无限的规模扩张。<br>与iptables相比，IPVS拥有以下明显优势：</p><ul><li>1、为大型集群提供了更好的可扩展性和性能；</li><li>2、支持比iptables更复杂的复制均衡算法（最小负载、最少连接、加权等）；</li><li>3、支持服务器健康检查和连接重试等功能；</li><li>4、可以动态修改ipset的集合，即使iptables的规则正在使用这个集合。</li></ul><h3 id="18、简述Kubernetes中什么是静态Pod？"><a href="#18、简述Kubernetes中什么是静态Pod？" class="headerlink" title="18、简述Kubernetes中什么是静态Pod？"></a>18、简述Kubernetes中什么是静态Pod？</h3><p>答：</p><p>静态pod是由kubelet进行管理的仅存在于特定Node的Pod上，他们不能通过API Server进行管理，无法与ReplicationController、Deployment或者<br>DaemonSet进行关联，并且kubelet无法对他们进行健康检查。静态Pod总是由kubelet进行创建，并且总是在kubelet所在的Node上运行。</p><h3 id="19、简述Kubernetes中Pod可能位于的状态？"><a href="#19、简述Kubernetes中Pod可能位于的状态？" class="headerlink" title="19、简述Kubernetes中Pod可能位于的状态？"></a>19、简述Kubernetes中Pod可能位于的状态？</h3><p>答：</p><ul><li>Pending：API Server已经创建该Pod，且Pod内还有一个或多个容器的镜像没有创建，包括正在下载镜像的过程。</li><li>Running：Pod内所有容器均已创建，且至少有一个容器处于运行状态、正在启动状态或正在重启状态。</li><li>Succeeded：Pod内所有容器均成功执行退出，且不会重启。</li><li>Failed：Pod内所有容器均已退出，但至少有一个容器退出为失败状态。</li><li>Unknown：由于某种原因无法获取该Pod状态，可能由于网络通信不畅导致。</li></ul><h3 id="20、简述Kubernetes创建一个Pod的主要流程？"><a href="#20、简述Kubernetes创建一个Pod的主要流程？" class="headerlink" title="20、简述Kubernetes创建一个Pod的主要流程？"></a>20、简述Kubernetes创建一个Pod的主要流程？</h3><p>答：</p><p>Kubernetes中创建一个Pod涉及多个组件之间联动，主要流程如下：</p><ul><li>1、客户端提交Pod的配置信息（可以是yaml文件定义的信息）到kubeapiserver。</li><li>2、Apiserver收到指令后，通知给controller-manager创建一个资源对象。</li><li>3、Controller-manager通过api-server将pod的配置信息存储到ETCD数据中心中。</li><li>4、Kube-scheduler检测到pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行pod 的节点，然后将pod的资源配置单发送到node节点上的kubelet组件上。</li><li>5、Kubelet根据scheduler发来的资源配置单运行pod，运行成功后，将pod的运行信息返回给scheduler，scheduler将返回的pod运行状况的信息存储到<br>  etcd数据中心。</li></ul><h3 id="21、简述Kubernetes中Pod的重启策略？"><a href="#21、简述Kubernetes中Pod的重启策略？" class="headerlink" title="21、简述Kubernetes中Pod的重启策略？"></a>21、简述Kubernetes中Pod的重启策略？</h3><p>答：</p><p>Pod重启策略（RestartPolicy）应用于Pod内的所有容器，并且仅在Pod所处的Node上由kubelet进行判断和重启操作。当某个容器异常退出或者健康检查失败<br>时，kubelet将根据RestartPolicy的设置来进行相应操作。</p><p>Pod的重启策略包括Always、OnFailure和Never，默认值为Always。</p><ul><li>Always：当容器失效时，由kubelet自动重启该容器；</li><li>OnFailure：当容器终止运行且退出码不为0时，由kubelet自动重启该容器；</li><li>Never：不论容器运行状态如何，kubelet都不会重启该容器。</li></ul><p>同时Pod的重启策略与控制方式关联，当前可用于管理Pod的控制器包括ReplicationController、Job、DaemonSet 及直接管理kubelet 管理（静态Pod）。<br>不同控制器的重启策略限制如下：</p><ul><li>RC和DaemonSet：必须设置为Always，需要保证该容器持续运行；</li><li>Job：OnFailure或Never，确保容器执行完成后不再重启；</li><li>kubelet：在Pod失效时重启，不论将RestartPolicy设置为何值，也不会对Pod进行健康检查。</li></ul><h3 id="22、简述Kubernetes中Pod的健康检查方式？"><a href="#22、简述Kubernetes中Pod的健康检查方式？" class="headerlink" title="22、简述Kubernetes中Pod的健康检查方式？"></a>22、简述Kubernetes中Pod的健康检查方式？</h3><p>答：</p><p>对Pod的健康检查可以通过两类探针来检查：LivenessProbe和ReadinessProbe。</p><ul><li>LivenessProbe探针：用于判断容器是否存活（running状态），如果LivenessProbe探针探测到容器不健康，则kubelet将杀掉该容器，并根据容器<br>的重启策略做相应处理。若一个容器不包含LivenessProbe探针，kubelet认为该容器的LivenessProbe探针返回值用于是“Success”。</li><li>ReadineeProbe探针：用于判断容器是否启动完成（ready状态）。如果ReadinessProbe探针探测到失败，则Pod的状态将被修改。Endpoint<br>Controller将从Service的Endpoint中删除包含该容器所在Pod的Eenpoint。</li><li>startupProbe探针：启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉。</li></ul><h3 id="23、简述Kubernetes-Pod的LivenessProbe探针的常见方式？"><a href="#23、简述Kubernetes-Pod的LivenessProbe探针的常见方式？" class="headerlink" title="23、简述Kubernetes Pod的LivenessProbe探针的常见方式？"></a>23、简述Kubernetes Pod的LivenessProbe探针的常见方式？</h3><p>答：</p><p>kubelet定期执行LivenessProbe探针来诊断容器的健康状态，通常有以下三种方式：</p><ul><li>ExecAction：在容器内执行一个命令，若返回码为0，则表明容器健康。</li><li>TCPSocketAction：通过容器的IP地址和端口号执行TCP检查，若能建立TCP连接，则表明容器健康。</li><li>HTTPGetAction：通过容器的IP地址、端口号及路径调用HTTP Get方法，若响应的状态码大于等于200且小于400，则表明容器健康。</li></ul><h3 id="24、简述Kubernetes-Pod的常见调度方式？"><a href="#24、简述Kubernetes-Pod的常见调度方式？" class="headerlink" title="24、简述Kubernetes Pod的常见调度方式？"></a>24、简述Kubernetes Pod的常见调度方式？</h3><p>答：</p><p>Kubernetes中，Pod通常是容器的载体，主要有如下常见调度方式：</p><ul><li>Deployment 或RC：该调度策略主要功能就是自动部署一个容器应用的多份副本，以及持续监控副本的数量，在集群内始终维持用户指定的副本数量。</li><li>NodeSelector：定向调度，当需要手动指定将Pod调度到特定Node上，可以通过Node的标签（Label）和Pod的nodeSelector 属性相匹配。</li><li>NodeAffinity 亲和性调度：亲和性调度机制极大的扩展了Pod的调度能力，目前有两种节点亲和力表达：</li><li>requiredDuringSchedulingIgnoredDuringExecution：硬规则，必须满足指定的规则，调度器才可以调度Pod 至Node 上（类似nodeSelector，语法不同）。</li><li>preferredDuringSchedulingIgnoredDuringExecution：软规则，优先调度至满足的Node的节点，但不强求，多个优先级规则还可以设置权重值。</li><li>Taints和Tolerations（污点和容忍）：<ul><li>Taint：使Node拒绝特定Pod运行；</li><li>Toleration：为Pod的属性，表示Pod能容忍（运行）标注了Taint的Node。</li></ul></li></ul><h3 id="25、简述Kubernetes初始化容器（init-container）？"><a href="#25、简述Kubernetes初始化容器（init-container）？" class="headerlink" title="25、简述Kubernetes初始化容器（init container）？"></a>25、简述Kubernetes初始化容器（init container）？</h3><p>答：</p><p>init container的运行方式与应用容器不同，它们必须先于应用容器执行完成，当设置了多个init container时，将按顺序逐个运行，并且只有前一个init container运行成功后才能运行后一个init container。当所有init container都成功运行后，Kubernetes才会初始化Pod的各种信息，并开始创建和运行应用容器。</p><h3 id="26、简述Kubernetes-deployment升级过程？"><a href="#26、简述Kubernetes-deployment升级过程？" class="headerlink" title="26、简述Kubernetes deployment升级过程？"></a>26、简述Kubernetes deployment升级过程？</h3><p>答：</p><ul><li>初始创建Deployment时，系统创建了一个ReplicaSet，并按用户的需求创建了对应数量的Pod副本。</li><li>当更新Deployment时，系统创建了一个新的ReplicaSet，并将其副本数量扩展到1，然后将旧ReplicaSet缩减为2。</li><li>之后，系统继续按照相同的更新策略对新旧两个ReplicaSet进行逐个调整。</li><li>最后，新的ReplicaSet运行了对应个新版本Pod副本，旧的ReplicaSet副本数量则缩减为0。</li></ul><h3 id="27、简述Kubernetes-deployment升级策略？"><a href="#27、简述Kubernetes-deployment升级策略？" class="headerlink" title="27、简述Kubernetes deployment升级策略？"></a>27、简述Kubernetes deployment升级策略？</h3><p>答：<br>在Deployment的定义中，可以通过spec.strategy指定Pod更新的策略，目前支持<br>两种策略：Recreate（重建）和RollingUpdate（滚动更新），默认值为RollingUpdate。</p><ul><li>Recreate：设置spec.strategy.type&#x3D;Recreate，表示Deployment在更新Pod时，会先杀掉所有正在运行的Pod，然后创建新的Pod。</li><li>RollingUpdate：设置spec.strategy.type&#x3D;RollingUpdate，表示Deployment会以滚动更新的方式来逐个更新Pod。同时，可以通过设置<br>spec.strategy.rollingUpdate下的两个参数（maxUnavailable和maxSurge）来控制滚动更新的过程。</li></ul><h3 id="28、简述Kubernetes-DaemonSet类型的资源特性？"><a href="#28、简述Kubernetes-DaemonSet类型的资源特性？" class="headerlink" title="28、简述Kubernetes DaemonSet类型的资源特性？"></a>28、简述Kubernetes DaemonSet类型的资源特性？</h3><p>答：</p><p>DaemonSet资源对象会在每个Kubernetes集群中的节点上运行，并且每个节只能运行一个pod，这是它和deployment 资源对象的最大也是唯一的区别。因此，<br>在定义yaml文件中，不支持定义replicas。<br>它的一般使用场景如下：</p><ul><li>在去做每个节点的日志收集工作。</li><li>监控每个节点的的运行状态。</li></ul><h3 id="29、简述Kubernetes自动扩容机制？"><a href="#29、简述Kubernetes自动扩容机制？" class="headerlink" title="29、简述Kubernetes自动扩容机制？"></a>29、简述Kubernetes自动扩容机制？</h3><p>答：</p><p>Kubernetes使用Horizontal Pod Autoscaler（HPA）的控制器实现基于CPU使用率进行自动Pod扩缩容的功能。HPA控制器周期性地监测目标Pod的资源性能<br>指标，并与HPA资源对象中的扩缩容条件进行对比，在满足条件时对Pod副本数量进行调整。</p><p><strong>HPA原理</strong><br>Kubernetes中的某个Metrics Server（Heapster或自定义Metrics Server）持续采集所有Pod副本的指标数据。HPA控制器通过Metrics Server的API（Heapster的API或聚合API）获取这些数据，基于用户定义的扩缩容规则进行计算，得到目标Pod副本数量。当目标Pod副本数量与当前副本数量不同时，HPA控制器就向Pod的副本控制器（Deployment、RC或ReplicaSet）发起scale操作，调整Pod的副本数量，完成扩缩容操作。</p><h3 id="30、简述Kubernetes-Service类型？"><a href="#30、简述Kubernetes-Service类型？" class="headerlink" title="30、简述Kubernetes Service类型？"></a>30、简述Kubernetes Service类型？</h3><p>答：</p><p>通过创建Service，可以为一组具有相同功能的容器应用提供一个统一的入口地址，并且将请求负载分发到后端的各个容器应用上。其主要类型有：</p><ul><li>ClusterIP：虚拟的服务IP 地址，该地址用于Kubernetes 集群内部的Pod 访问，在Node上kube-proxy通过设置的iptables规则进行转发；</li><li>NodePort：使用宿主机的端口，使能够访问各Node的外部客户端通过Node的IP地址和端口号就能访问服务；</li><li>LoadBalancer：使用外接负载均衡器完成到服务的负载分发，需要在spec.status.loadBalancer 字段指定外部负载均衡器的IP 地址，通常用于公有云。</li><li>external：把kubernetes集群外的服务引入到kubernetes集群内</li></ul><h3 id="31、简述Kubernetes-Service分发后端的策略？"><a href="#31、简述Kubernetes-Service分发后端的策略？" class="headerlink" title="31、简述Kubernetes Service分发后端的策略？"></a>31、简述Kubernetes Service分发后端的策略？</h3><p>答：</p><p>Service负载分发的策略有：RoundRobin和SessionAffinity</p><ul><li>RoundRobin：默认为轮询模式，即轮询将请求转发到后端的各个Pod上。</li><li>SessionAffinity：基于客户端IP地址进行会话保持的模式，即第1次将某个客户端发起的请求转发到后端的某个Pod上，之后从相同的客户端发起的请求都将被<br>转发到后端相同的Pod上。</li></ul><h3 id="32、简述Kubernetes-Headless-Service？"><a href="#32、简述Kubernetes-Headless-Service？" class="headerlink" title="32、简述Kubernetes Headless Service？"></a>32、简述Kubernetes Headless Service？</h3><p>答：</p><p>在某些应用场景中，若需要人为指定负载均衡器，不使用Service提供的默认负载均衡的功能，或者应用程序希望知道属于同组服务的其他实例。Kubernetes提供了Headless Service 来实现这种功能，即不为Service 设置ClusterIP（入口IP 地址），仅通过Label Selector将后端的Pod列表返回给调用的客户端。</p><h3 id="33、简述Kubernetes外部如何访问集群内的服务？"><a href="#33、简述Kubernetes外部如何访问集群内的服务？" class="headerlink" title="33、简述Kubernetes外部如何访问集群内的服务？"></a>33、简述Kubernetes外部如何访问集群内的服务？</h3><p>答：</p><p>对于Kubernetes，集群外的客户端默认情况，无法通过Pod的IP地址或者Service的虚拟IP地址:虚拟端口号进行访问。通常可以通过以下方式进行访问<br>Kubernetes集群内的服务：</p><ul><li>映射Pod到物理机：将Pod端口号映射到宿主机，即在Pod中采用hostPort方式，以使客户端应用能够通过物理机访问容器应用。</li><li>映射Service到物理机：将Service端口号映射到宿主机，即在Service中采用nodePort方式，以使客户端应用能够通过物理机访问容器应用。</li><li>映射Service到LoadBalancer：通过设置LoadBalancer映射到云服务商提供的LoadBalancer地址。这种用法仅用于在公有云服务提供商的云平台上设置<br>Service的场景。</li></ul><h3 id="34、简述Kubernetes-ingress？"><a href="#34、简述Kubernetes-ingress？" class="headerlink" title="34、简述Kubernetes ingress？"></a>34、简述Kubernetes ingress？</h3><p>答：</p><p>Kubernetes的Ingress资源对象，用于将不同URL的访问请求转发到后端不同的Service，以实现HTTP层的业务路由机制。Kubernetes使用了Ingress策略和Ingress Controller，两者结合并实现了一个完整的Ingress负载均衡器。使用Ingress进行负载分发时，Ingress Controller 基于Ingress规则将客户端请求直接转发到Service对应的后端Endpoint（Pod）上，从而跳过kube-proxy的转发功能，kube-proxy不再起作用，全过程为：ingress controller + ingress 规则 —-&gt; services。同时当Ingress Controller 提供的是对外服务，则实际上实现的是边缘路由器的功能。</p><h3 id="35、简述Kubernetes镜像的下载策略？"><a href="#35、简述Kubernetes镜像的下载策略？" class="headerlink" title="35、简述Kubernetes镜像的下载策略？"></a>35、简述Kubernetes镜像的下载策略？</h3><p>答：</p><p>K8s的镜像下载策略有三种：Always、Never、IFNotPresent。</p><ul><li>Always：镜像标签为latest时，总是从指定的仓库中获取镜像。</li><li>Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像。</li><li>IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。</li></ul><h3 id="36、简述Kubernetes的负载均衡器？"><a href="#36、简述Kubernetes的负载均衡器？" class="headerlink" title="36、简述Kubernetes的负载均衡器？"></a>36、简述Kubernetes的负载均衡器？</h3><p>答：</p><p>负载均衡器是暴露服务的最常见和标准方式之一。<br>根据工作环境使用两种类型的负载均衡器，即内部负载均衡器或外部负载均衡器。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。</p><h3 id="37、简述Kubernetes各模块如何与API-Server通信？"><a href="#37、简述Kubernetes各模块如何与API-Server通信？" class="headerlink" title="37、简述Kubernetes各模块如何与API Server通信？"></a>37、简述Kubernetes各模块如何与API Server通信？</h3><p>答：</p><p>Kubernetes API Server作为集群的核心，负责集群各功能模块之间的通信。集群内的各个功能模块通过API Server将信息存入etcd，当需要获取和操作这些数据<br>时，则通过API Server 提供的REST 接口（用GET、LIST 或WATCH 方法）来实现，从而实现各模块之间的信息交互。如kubelet进程与API Server的交互：每个Node上的kubelet每隔一个时间周期，就会调用一次API Server的REST接口报告自身状态，API Server在接收到这些信息后，会将节点状态信息更新到etcd中。如kube-controller-manager进程与API Server的交互：kube-controllermanager中的Node Controller 模块通过API Server提供的Watch接口实时监控Node的信息，并做相应处理。如kube-scheduler进程与API Server的交互：Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑，在调度成功后将Pod绑定到目标节点上。</p><h3 id="38、简述Kubernetes-Scheduler作用及实现原理？"><a href="#38、简述Kubernetes-Scheduler作用及实现原理？" class="headerlink" title="38、简述Kubernetes Scheduler作用及实现原理？"></a>38、简述Kubernetes Scheduler作用及实现原理？</h3><p>答：</p><p>Kubernetes Scheduler是负责Pod调度的重要功能模块，KubernetesScheduler在整个系统中承担了“承上启下”的重要功能，“承上”是指它负责接收Controller Manager创建的新Pod，为其调度至目标Node；“启下”是指调度完成后，目标Node上的kubelet服务进程接管后继工作，负责Pod接下来生命周期。Kubernetes Scheduler的作用是将待调度的Pod（API新创建的Pod、ControllerManager为补足副本而创建的Pod等）按照特定的调度算法和调度策略绑定（Binding）到集群中某个合适的Node上，并将绑定信息写入etcd中。在整个调度过程中涉及三个对象，分别是待调度Pod列表、可用Node列表，以及调度算法和策略。Kubernetes Scheduler通过调度算法调度为待调度Pod列表中的每个Pod从Node列表中选择一个最适合的Node来实现Pod的调度。随后，目标节点上的kubelet通过API Server监听到Kubernetes Scheduler产生的Pod绑定事件，然后获取对应的Pod清单，下载Image镜像并启动容器。</p><h3 id="39、简述Kubernetes-Scheduler使用哪两种算法将Pod绑定到worker节点？"><a href="#39、简述Kubernetes-Scheduler使用哪两种算法将Pod绑定到worker节点？" class="headerlink" title="39、简述Kubernetes Scheduler使用哪两种算法将Pod绑定到worker节点？"></a>39、简述Kubernetes Scheduler使用哪两种算法将Pod绑定到worker节点？</h3><p>答：</p><p>Kubernetes Scheduler根据如下两种调度算法将 Pod 绑定到最合适的工作节点：</p><ul><li>预选（Predicates）：输入是所有节点，输出是满足预选条件的节点。kubescheduler根据预选策略过滤掉不满足策略的Nodes。如果某节点的资源不足或<br>  者不满足预选策略的条件则无法通过预选。如“Node的label必须与Pod的Selector一致”。</li><li>优选（Priorities）：输入是预选阶段筛选出的节点，优选会根据优先策略为通过预选的Nodes进行打分排名，选择得分最高的Node。例如，资源越富裕、负载越小的Node可能具有越高的排名。</li></ul><h3 id="40、简述Kubernetes-kubelet的作用？"><a href="#40、简述Kubernetes-kubelet的作用？" class="headerlink" title="40、简述Kubernetes kubelet的作用？"></a>40、简述Kubernetes kubelet的作用？</h3><p>答：</p><p>在Kubernetes集群中，在每个Node（又称Worker）上都会启动一个kubelet服务进程。该进程用于处理Master 下发到本节点的任务，管理Pod 及Pod 中的容器。每个kubelet进程都会在API Server上注册节点自身的信息，定期向Master汇报节点资源的使用情况，并通过cAdvisor监控容器和节点资源。</p><h3 id="41、简述Kubernetes-kubelet监控Worker节点资源是使用什么组件来实现的？"><a href="#41、简述Kubernetes-kubelet监控Worker节点资源是使用什么组件来实现的？" class="headerlink" title="41、简述Kubernetes kubelet监控Worker节点资源是使用什么组件来实现的？"></a>41、简述Kubernetes kubelet监控Worker节点资源是使用什么组件来实现的？</h3><p>答：</p><p>kubelet使用cAdvisor对worker节点资源进行监控。在 Kubernetes 系统中，cAdvisor 已被默认集成到 kubelet 组件内，当 kubelet 服务启动时，它会自动启动cAdvisor 服务，然后 cAdvisor 会实时采集所在节点的性能指标及在节点上运行的容器的性能指标。</p><h3 id="42、简述Kubernetes如何保证集群的安全性？"><a href="#42、简述Kubernetes如何保证集群的安全性？" class="headerlink" title="42、简述Kubernetes如何保证集群的安全性？"></a>42、简述Kubernetes如何保证集群的安全性？</h3><p>答：</p><p>Kubernetes通过一系列机制来实现集群的安全控制，主要有如下不同的维度：</p><ul><li>基础设施方面：保证容器与其所在宿主机的隔离；</li><li>权限方面：<ul><li>最小权限原则：合理限制所有组件的权限，确保组件只执行它被授权的行为，<br>通过限制单个组件的能力来限制它的权限范围。</li><li>用户权限：划分普通用户和管理员的角色。</li></ul></li><li>集群方面：<ul><li>API Server的认证授权：Kubernetes集群中所有资源的访问和变更都是通过Kubernetes API Server来实现的，因此需要建议采用更安全的HTTPS或<br>  Token来识别和认证客户端身份（Authentication），以及随后访问权限的授权（Authorization）环节。</li><li>API Server的授权管理：通过授权策略来决定一个API调用是否合法。对合法用户进行授权并且随后在用户访问时进行鉴权，建议采用更安全的RBAC<br>方式来提升集群安全授权。</li><li>敏感数据引入Secret机制：对于集群敏感数据建议使用Secret方式进行保护。</li><li>AdmissionControl（准入机制）：对kubernetes api的请求过程中，顺序为：先经过认证 &amp; 授权，然后执行准入操作，最后对目标对象进行操作。</li></ul></li></ul><h3 id="43、简述Kubernetes准入机制？"><a href="#43、简述Kubernetes准入机制？" class="headerlink" title="43、简述Kubernetes准入机制？"></a>43、简述Kubernetes准入机制？</h3><p>答：</p><p>在对集群进行请求时，每个准入控制代码都按照一定顺序执行。如果有一个准入控制拒绝了此次请求，那么整个请求的结果将会立即返回，并提示用户相应的error信息。</p><p>准入控制（AdmissionControl）准入控制本质上为一段准入代码，在对kubernetesapi的请求过程中，顺序为：先经过认证 &amp; 授权，然后执行准入操作，最后对目标对象进行操作。常用组件（控制代码）如下：</p><ul><li>AlwaysAdmit：允许所有请求</li><li>AlwaysDeny：禁止所有请求，多用于测试环境。</li><li>ServiceAccount：它将serviceAccounts实现了自动化，它会辅助serviceAccount做一些事情，比如如果pod没有serviceAccount属性，它会自动添加一个default，并确保pod的serviceAccount始终存在。</li><li>LimitRanger：观察所有的请求，确保没有违反已经定义好的约束条件，这些条件定义在namespace中LimitRange对象中。</li><li>NamespaceExists：观察所有的请求，如果请求尝试创建一个不存在的namespace，则这个请求被拒绝。</li></ul><h3 id="44、简述Kubernetes-RBAC及其特点（优势）？"><a href="#44、简述Kubernetes-RBAC及其特点（优势）？" class="headerlink" title="44、简述Kubernetes RBAC及其特点（优势）？"></a>44、简述Kubernetes RBAC及其特点（优势）？</h3><p>答：</p><p>RBAC是基于角色的访问控制，是一种基于个人用户的角色来管理对计算机或网络资源的访问的方法。<br>相对于其他授权模式，RBAC具有如下优势：</p><ul><li>对集群中的资源和非资源权限均有完整的覆盖。</li><li>整个RBAC完全由几个API对象完成， 同其他API对象一样， 可以用kubectl或API进行操作。</li><li>可以在运行时进行调整，无须重新启动API Server。</li></ul><h3 id="45、简述Kubernetes-Secret作用？"><a href="#45、简述Kubernetes-Secret作用？" class="headerlink" title="45、简述Kubernetes Secret作用？"></a>45、简述Kubernetes Secret作用？</h3><p>答：</p><p>Secret对象，主要作用是保管私密数据，比如密码、OAuth Tokens、SSH Keys等信息。将这些私密信息放在Secret对象中比直接放在Pod或Docker Image中更安全，也更便于使用和分发。</p><h3 id="46、简述Kubernetes-Secret有哪些使用方式？"><a href="#46、简述Kubernetes-Secret有哪些使用方式？" class="headerlink" title="46、简述Kubernetes Secret有哪些使用方式？"></a>46、简述Kubernetes Secret有哪些使用方式？</h3><p>答：</p><p>创建完secret之后，可通过如下三种方式使用：</p><ul><li>在创建Pod时，通过为Pod指定Service Account来自动使用该Secret。</li><li>通过挂载该Secret到Pod来使用它。</li><li>在Docker镜像下载时使用，通过指定Pod的spc.ImagePullSecrets来引用它。</li></ul><h3 id="47、简述Kubernetes-PodSecurityPolicy机制？"><a href="#47、简述Kubernetes-PodSecurityPolicy机制？" class="headerlink" title="47、简述Kubernetes PodSecurityPolicy机制？"></a>47、简述Kubernetes PodSecurityPolicy机制？</h3><p>答：</p><p>Kubernetes PodSecurityPolicy是为了更精细地控制Pod对资源的使用方式以及提升安全策略。在开启PodSecurityPolicy准入控制器后，Kubernetes默认不允许<br>创建任何Pod，需要创建PodSecurityPolicy策略和相应的RBAC授权策略（Authorizing Policies），Pod才能创建成功。</p><h3 id="48、简述Kubernetes-PodSecurityPolicy机制能实现哪些安全策略？"><a href="#48、简述Kubernetes-PodSecurityPolicy机制能实现哪些安全策略？" class="headerlink" title="48、简述Kubernetes PodSecurityPolicy机制能实现哪些安全策略？"></a>48、简述Kubernetes PodSecurityPolicy机制能实现哪些安全策略？</h3><p>答：<br>在PodSecurityPolicy对象中可以设置不同字段来控制Pod运行时的各种安全策略，<br>常见的有：</p><ul><li>特权模式：privileged是否允许Pod以特权模式运行。</li><li>宿主机资源：控制Pod对宿主机资源的控制，如hostPID：是否允许Pod共享宿主机的进程空间。</li><li>用户和组：设置运行容器的用户ID（范围）或组（范围）。</li><li>提升权限：AllowPrivilegeEscalation：设置容器内的子进程是否可以提升权限，通常在设置非root用户（MustRunAsNonRoot）时进行设置。</li><li>SELinux：进行SELinux的相关配置。</li></ul><h3 id="49、简述Kubernetes网络模型？"><a href="#49、简述Kubernetes网络模型？" class="headerlink" title="49、简述Kubernetes网络模型？"></a>49、简述Kubernetes网络模型？</h3><p>答：</p><p>Kubernetes网络模型中每个Pod都拥有一个独立的IP地址，并假定所有Pod都在一个可以直接连通的、扁平的网络空间中。所以不管它们是否运行在同一个<br>Node（宿主机）中，都要求它们可以直接通过对方的IP进行访问。设计这个原则的原因是，用户不需要额外考虑如何建立Pod之间的连接，也不需要考虑如何将容器端口映射到主机端口等问题。<br>同时为每个Pod都设置一个IP地址的模型使得同一个Pod内的不同容器会共享同一个网络命名空间，也就是同一个Linux网络协议栈。这就意味着同一个Pod内的容器可以通过localhost来连接对方的端口。<br>在Kubernetes的集群里，IP是以Pod为单位进行分配的。一个Pod内部的所有容器共享一个网络堆栈（相当于一个网络命名空间，它们的IP地址、网络设备、配置等都是共享的）。</p><h3 id="50、简述Kubernetes-CNI模型？"><a href="#50、简述Kubernetes-CNI模型？" class="headerlink" title="50、简述Kubernetes CNI模型？"></a>50、简述Kubernetes CNI模型？</h3><p>答：</p><p>CNI提供了一种应用容器的插件化网络解决方案，定义对容器网络进行操作和配置的规范，通过插件的形式对CNI接口进行实现。CNI仅关注在创建容器时分配网络<br>资源，和在销毁容器时删除网络资源。</p><p>在CNI模型中只涉及两个概念：容器和网络。</p><ul><li>容器（Container）：是拥有独立Linux网络命名空间的环境，例如使用Docker或rkt创建的容器。容器需要拥有自己的Linux网络命名空间，这是加入网络的必<br>要条件。</li><li>网络（Network）：表示可以互连的一组实体，这些实体拥有各自独立、唯一的IP地址，可以是容器、物理机或者其他网络设备（比如路由器）等。<br>  对容器网络的设置和操作都通过插件（Plugin）进行具体实现，CNI插件包括两种类型：CNI Plugin和IPAM（IP Address Management）Plugin。</li><li>CNI Plugin负责为容器配置网络资源</li><li>IPAM Plugin负责对容器的IP地址进行分配和管理。</li><li>IPAM Plugin作为CNI Plugin的一部分，与CNI Plugin协同工作。</li></ul><h3 id="51、简述Kubernetes网络策略？"><a href="#51、简述Kubernetes网络策略？" class="headerlink" title="51、简述Kubernetes网络策略？"></a>51、简述Kubernetes网络策略？</h3><p>答：</p><p>为实现细粒度的容器间网络访问隔离策略，Kubernetes引入Network Policy。</p><p>Network Policy的主要功能是对Pod间的网络通信进行限制和准入控制，设置允许访问或禁止访问的客户端Pod列表。Network Policy定义网络策略，配合策略控制器（Policy Controller）进行策略的实现。</p><h3 id="52、简述Kubernetes网络策略原理？"><a href="#52、简述Kubernetes网络策略原理？" class="headerlink" title="52、简述Kubernetes网络策略原理？"></a>52、简述Kubernetes网络策略原理？</h3><p>答：</p><p>Network Policy的工作原理主要为：policy controller需要实现一个APIListener，监听用户设置的Network Policy定义，并将网络访问规则通过各Node的<br>Agent进行实际设置（Agent则需要通过CNI网络插件实现）。</p><h3 id="53、简述Kubernetes中flannel的作用？"><a href="#53、简述Kubernetes中flannel的作用？" class="headerlink" title="53、简述Kubernetes中flannel的作用？"></a>53、简述Kubernetes中flannel的作用？</h3><p>答：</p><p>Flannel可以用于Kubernetes底层网络的实现，主要作用有：</p><ul><li>它能协助Kubernetes，给每一个Node上的Docker容器都分配互相不冲突的IP地址。</li><li>它能在这些IP地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内。</li></ul><h3 id="54、简述Kubernetes-Calico网络组件实现原理？"><a href="#54、简述Kubernetes-Calico网络组件实现原理？" class="headerlink" title="54、简述Kubernetes Calico网络组件实现原理？"></a>54、简述Kubernetes Calico网络组件实现原理？</h3><p>答：<br>Calico 是一个基于BGP 的纯三层的网络方案，与OpenStack、Kubernetes、AWS、GCE等云平台都能够良好地集成。<br>Calico在每个计算节点都利用Linux Kernel实现了一个高效的vRouter来负责数据转发。每个vRouter都通过BGP协议把在本节点上运行的容器的路由信息向整个<br>Calico网络广播，并自动设置到达其他节点的路由转发规则。<br>Calico保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico节点组网时可以直接利用数据中心的网络结构（L2或者L3），不需要额外的NAT、隧道或者Overlay Network，没有额外的封包解包，能够节约CPU运算，提高网络效率。</p><h3 id="55、简述Kubernetes共享存储的作用？"><a href="#55、简述Kubernetes共享存储的作用？" class="headerlink" title="55、简述Kubernetes共享存储的作用？"></a>55、简述Kubernetes共享存储的作用？</h3><p>答：</p><p>Kubernetes对于有状态的容器应用或者对数据需要持久化的应用，因此需要更加可靠的存储来保存应用产生的重要数据，以便容器应用在重建之后仍然可以使用之前的数据。因此需要使用共享存储。</p><h3 id="56、简述Kubernetes数据持久化的方式有哪些？"><a href="#56、简述Kubernetes数据持久化的方式有哪些？" class="headerlink" title="56、简述Kubernetes数据持久化的方式有哪些？"></a>56、简述Kubernetes数据持久化的方式有哪些？</h3><p>答：</p><p>Kubernetes通过数据持久化来持久化保存重要数据，常见的方式有：</p><ul><li>EmptyDir（空目录）：没有指定要挂载宿主机上的某个目录，直接由Pod内保部映射到宿主机上。类似于docker中的manager volume。<ul><li>场景：</li><li>只需要临时将数据保存在磁盘上，比如在合并&#x2F;排序算法中；</li><li>作为两个容器的共享存储。</li><li>特性：</li><li>同个pod里面的不同容器，共享同一个持久化目录，当pod节点删除时，volume的数据也会被删除。</li><li>emptyDir的数据持久化的生命周期和使用的pod一致，一般是作为临时存储使用。</li></ul></li><li>Hostpath：将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式。<ul><li>特性：增加了pod与节点之间的耦合。</li></ul></li><li>PersistentVolume（简称PV）：如基于NFS服务的PV，也可以基于GlusterFS的PV。它的作用是统一数据持久化目录，方便管理。</li></ul><h3 id="57、简述Kubernetes-PV和PVC？"><a href="#57、简述Kubernetes-PV和PVC？" class="headerlink" title="57、简述Kubernetes PV和PVC？"></a>57、简述Kubernetes PV和PVC？</h3><p>答：</p><ul><li>PV是对底层网络共享存储的抽象，将共享存储定义为一种“资源”。</li><li>PVC则是用户对存储资源的一个“申请”。</li></ul><h3 id="58、简述Kubernetes-PV生命周期内的阶段？"><a href="#58、简述Kubernetes-PV生命周期内的阶段？" class="headerlink" title="58、简述Kubernetes PV生命周期内的阶段？"></a>58、简述Kubernetes PV生命周期内的阶段？</h3><p>答：</p><p>某个PV在生命周期中可能处于以下4个阶段（Phaes）之一。</p><ul><li>Available：可用状态，还未与某个PVC绑定。</li><li>Bound：已与某个PVC绑定。</li><li>Released：绑定的PVC已经删除，资源已释放，但没有被集群回收。</li><li>Failed：自动资源回收失败。</li></ul><h3 id="59、简述Kubernetes所支持的存储供应模式？"><a href="#59、简述Kubernetes所支持的存储供应模式？" class="headerlink" title="59、简述Kubernetes所支持的存储供应模式？"></a>59、简述Kubernetes所支持的存储供应模式？</h3><p>答：</p><p>Kubernetes支持两种资源的存储供应模式：静态模式（Static）和动态模式（Dynamic）。</p><ul><li>静态模式：集群管理员手工创建许多PV，在定义PV时需要将后端存储的特性进行设置。</li><li>动态模式：集群管理员无须手工创建PV，而是通过StorageClass的设置对后端存储进行描述，标记为某种类型。此时要求PVC对存储的类型进行声明，系统将自动完成PV的创建及与PVC的绑定。</li></ul><h3 id="60、简述Kubernetes-CSI模型？"><a href="#60、简述Kubernetes-CSI模型？" class="headerlink" title="60、简述Kubernetes CSI模型？"></a>60、简述Kubernetes CSI模型？</h3><p>答：</p><p>Kubernetes CSI是Kubernetes推出与容器对接的存储接口标准，存储提供方只需要基于标准接口进行存储插件的实现，就能使用Kubernetes的原生存储机制为容器提供存储服务。CSI使得存储提供方的代码能和Kubernetes代码彻底解耦，部署也与Kubernetes核心组件分离，显然，存储插件的开发由提供方自行维护，就能为Kubernetes用户提供更多的存储功能，也更加安全可靠。</p><p>CSI包括CSI Controller和CSI Node：</p><ul><li>CSI Controller的主要功能是提供存储服务视角对存储资源和存储卷进行管理和<br>操作。</li><li>CSI Node的主要功能是对主机（Node）上的Volume进行管理和操作。</li></ul><h3 id="61、简述Kubernetes-Worker节点加入集群的过程？"><a href="#61、简述Kubernetes-Worker节点加入集群的过程？" class="headerlink" title="61、简述Kubernetes Worker节点加入集群的过程？"></a>61、简述Kubernetes Worker节点加入集群的过程？</h3><p>答：</p><p>通常需要对Worker节点进行扩容，从而将应用系统进行水平扩展。主要过程如下：</p><ul><li>1、在该Node上安装Docker、kubelet和kube-proxy服务；</li><li>2、然后配置kubelet和kubeproxy的启动参数，将Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务；</li><li>3、通过kubelet默认的自动注册机制，新的Worker将会自动加入现有的Kubernetes集群中；</li><li>4、Kubernetes Master在接受了新Worker的注册之后，会自动将其纳入当前集群的调度范围。</li></ul><h3 id="62、简述Kubernetes-Pod如何实现对节点的资源控制？"><a href="#62、简述Kubernetes-Pod如何实现对节点的资源控制？" class="headerlink" title="62、简述Kubernetes Pod如何实现对节点的资源控制？"></a>62、简述Kubernetes Pod如何实现对节点的资源控制？</h3><p>答：</p><p>Kubernetes集群里的节点提供的资源主要是计算资源，计算资源是可计量的能被申请、分配和使用的基础资源。当前Kubernetes集群中的计算资源主要包括CPU、GPU及Memory。CPU与Memory是被Pod使用的，因此在配置Pod时可以通过参数CPU Request及Memory Request为其中的每个容器指定所需使用的CPU与Memory量，Kubernetes会根据Request的值去查找有足够资源的Node来调度此Pod。通常，一个程序所使用的CPU 与Memory 是一个动态的量，确切地说，是一个范围，跟它的负载密切相关：负载增加时，CPU和Memory的使用量也会增加。</p><h3 id="63、简述Kubernetes-Requests和Limits如何影响Pod的调度？"><a href="#63、简述Kubernetes-Requests和Limits如何影响Pod的调度？" class="headerlink" title="63、简述Kubernetes Requests和Limits如何影响Pod的调度？"></a>63、简述Kubernetes Requests和Limits如何影响Pod的调度？</h3><p>答：</p><p>当一个Pod创建成功时，Kubernetes调度器（Scheduler）会为该Pod选择一个节点来执行。对于每种计算资源（CPU和Memory）而言，每个节点都有一个能用于运行Pod的最大容量值。调度器在调度时，首先要确保调度后该节点上所有Pod的CPU和内存的Requests总和，不超过该节点能提供给Pod使用的CPU和Memory的最大容量值。</p><h3 id="64、简述Kubernetes-Metric-Service？"><a href="#64、简述Kubernetes-Metric-Service？" class="headerlink" title="64、简述Kubernetes Metric Service？"></a>64、简述Kubernetes Metric Service？</h3><p>答：</p><p>在Kubernetes从1.10版本后采用Metrics Server作为默认的性能数据采集和监控，主要用于提供核心指标（Core Metrics），包括Node、Pod的CPU和内存使<br>用指标。对其他自定义指标（Custom Metrics）的监控则由Prometheus等组件来完成。</p><h3 id="65、简述Kubernetes中，如何使用EFK实现日志的统一管理？"><a href="#65、简述Kubernetes中，如何使用EFK实现日志的统一管理？" class="headerlink" title="65、简述Kubernetes中，如何使用EFK实现日志的统一管理？"></a>65、简述Kubernetes中，如何使用EFK实现日志的统一管理？</h3><p>答：</p><p>在Kubernetes集群环境中，通常一个完整的应用或服务涉及组件过多，建议对日志系统进行集中化管理，通常采用EFK实现。<br>EFK是 Elasticsearch、Fluentd 和 Kibana 的组合，其各组件功能如下：</p><ul><li>Elasticsearch：是一个搜索引擎，负责存储日志并提供查询接口；</li><li>Fluentd：负责从 Kubernetes 搜集日志，每个node节点上面的fluentd监控并收集该节点上面的系统日志，并将处理过后的日志信息发送给Elasticsearch；</li><li>Kibana：提供了一个 Web GUI，用户可以浏览和搜索存储在 Elasticsearch 中的日志。</li></ul><p>通过在每台node上部署一个以DaemonSet方式运行的fluentd来收集每台node上的日志。Fluentd将docker日志目录&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers和&#x2F;var&#x2F;log目录<br>挂载到Pod中，然后Pod会在node节点的&#x2F;var&#x2F;log&#x2F;pods目录中创建新的目录，可以区别不同的容器日志输出，该目录下有一个日志文件链接到&#x2F;var&#x2F;lib&#x2F;docker&#x2F;contianers目录下的容器日志输出。</p><h3 id="66、简述Kubernetes如何进行优雅的节点关机维护？"><a href="#66、简述Kubernetes如何进行优雅的节点关机维护？" class="headerlink" title="66、简述Kubernetes如何进行优雅的节点关机维护？"></a>66、简述Kubernetes如何进行优雅的节点关机维护？</h3><p>答：</p><p>由于Kubernetes节点运行大量Pod，因此在进行关机维护之前，建议先使用kubectl drain将该节点的Pod进行驱逐，然后进行关机维护。</p><h3 id="67、简述Kubernetes集群联邦？"><a href="#67、简述Kubernetes集群联邦？" class="headerlink" title="67、简述Kubernetes集群联邦？"></a>67、简述Kubernetes集群联邦？</h3><p>答：</p><p>Kubernetes 集群联邦可以将多个Kubernetes 集群作为一个集群进行管理。因此，可以在一个数据中心&#x2F;云中创建多个Kubernetes集群，并使用集群联邦在一个地方控制&#x2F;管理所有集群。</p><h3 id="68、简述Helm及其优势？"><a href="#68、简述Helm及其优势？" class="headerlink" title="68、简述Helm及其优势？"></a>68、简述Helm及其优势？</h3><p>答：<br>Helm 是 Kubernetes 的软件包管理工具。类似 Ubuntu 中使用的apt、Centos中使用的yum 或者Python中的 pip 一样。<br>Helm能够将一组K8S资源打包统一管理, 是查找、共享和使用为Kubernetes构建的软件的最佳方式。<br>Helm中通常每个包称为一个Chart，一个Chart是一个目录（一般情况下会将目录进行打包压缩，形成name-version.tgz格式的单一文件，方便传输和存储）</p><ul><li>Helm优势<br>  在 Kubernetes中部署一个可以使用的应用，需要涉及到很多的 Kubernetes 资源的<br>  共同协作。使用helm则具有如下优势：</li><li>统一管理、配置和更新这些分散的 k8s 的应用资源文件；</li><li>分发和复用一套应用模板；</li><li>将应用的一系列资源当做一个软件包管理。<br>对于应用发布者而言，可以通过 Helm 打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。</li><li>对于使用者而言，使用 Helm 后不用需要编写复杂的应用部署文件，可以以简单<br>的方式在 Kubernetes 上查找、安装、升级、回滚、卸载应用程序。</li></ul>]]></content>
    
    
    <categories>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prometheus联邦集群配置</title>
    <link href="/2025/06/10/prometheus%E8%81%94%E9%82%A6%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/06/10/prometheus%E8%81%94%E9%82%A6%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>对于大部分监控规模而言，我们只需要在每一个数据中心安装一个Prometheus Server实例，就可以在各个数据中心处理上千规模的集群。同时将Prometheus Server部署到不同的数据中心可以避免网络配置的复杂性。</p><p>在每个数据中心部署单独的Prometheus Server，用于采集当前数据中心监控数据。并由一个中心的Prometheus Server负责聚合多个数据中心的监控数据。这一特性在Promthues中称为联邦集群。</p><p>联邦集群的核心在于每一个Prometheus Server都包含一个用于获取当前实例中监控样本的接口&#x2F;federate。对于中心Prometheus Server而言，无论是从其他的Prometheus实例还是Exporter实例中获取数据实际上并没有任何差异。</p><h4 id="集群部署架构"><a href="#集群部署架构" class="headerlink" title="集群部署架构"></a>集群部署架构</h4><p><img src="http://cdn.882227.xyz/911490-20240924144456377-1208190196.png" alt="911490-20240924144456377-1208190196"></p><h3 id="三、部署prometheus联邦集群并抓取对应节点数据"><a href="#三、部署prometheus联邦集群并抓取对应节点数据" class="headerlink" title="三、部署prometheus联邦集群并抓取对应节点数据"></a>三、部署prometheus联邦集群并抓取对应节点数据</h3><h4 id="1-中心及联邦prometheus节点部署prometheus"><a href="#1-中心及联邦prometheus节点部署prometheus" class="headerlink" title="1.中心及联邦prometheus节点部署prometheus"></a>1.中心及联邦prometheus节点部署prometheus</h4><p>在 100.131 100.132 100.133三台服务器上安装prometheus,二进制部署，部署步骤略，可参考：<a href="https://www.cnblogs.com/panwenbin-logs/p/18370049">https://www.cnblogs.com/panwenbin-logs/p/18370049</a>  ，各节点版本保持一致</p><h4 id="2-被采集节点安装node-exporter"><a href="#2-被采集节点安装node-exporter" class="headerlink" title="2.被采集节点安装node-exporter"></a>2.被采集节点安装node-exporter</h4><p>在 10.134 100.135 2台服务器上二进制部署node-exporter，部署步骤略，参考:参考：<a href="https://www.cnblogs.com/panwenbin-logs/p/18370049">https://www.cnblogs.com/panwenbin-logs/p/18370049</a></p><h4 id="3-配置prometheus联邦节点采集数据"><a href="#3-配置prometheus联邦节点采集数据" class="headerlink" title="3.配置prometheus联邦节点采集数据"></a>3.配置prometheus联邦节点采集数据</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment">#联邦节点1</span><br><span class="hljs-params">scrape_configs:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">job_name:</span> <span class="hljs-string">&quot;prod-app01&quot;</span><br>    <span class="hljs-params">static_configs:</span><br>      <span class="hljs-operator">-</span> <span class="hljs-params">targets:</span> [<span class="hljs-string">&quot;192.168.100.134:9100&quot;</span>]<br><br><br><span class="hljs-comment">#联邦节点2</span><br><span class="hljs-params">scrape_configs:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">job_name:</span> <span class="hljs-string">&quot;prod-app02&quot;</span><br>    <span class="hljs-params">static_configs:</span><br>      <span class="hljs-operator">-</span> <span class="hljs-params">targets:</span> [<span class="hljs-string">&quot;192.168.100.135:9100&quot;</span>]<br></code></pre></td></tr></table></figure><p>是否抓取数据正常</p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/911490-20240924153302339-1297263141.png"></p><p><img src="http://cdn.882227.xyz/911490-20240924153314462-2046999070.png" alt="911490-20240924153314462-2046999070"></p><h4 id="4-配置中心prometheus-server-抓取联邦节点prometheus"><a href="#4-配置中心prometheus-server-抓取联邦节点prometheus" class="headerlink" title="4.配置中心prometheus server 抓取联邦节点prometheus"></a>4.配置中心prometheus server 抓取联邦节点prometheus</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment">#在100.131上操作</span><br>vim prometheus.yml<br> <span class="hljs-operator">-</span> <span class="hljs-params">job_name:</span> &#x27;prometheus-federate-<span class="hljs-number">100.132</span>&#x27;<br>   <span class="hljs-params">scrape_interval:</span> <span class="hljs-number">10</span>s<br>   <span class="hljs-params">honor_labels:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-params">metrics_path:</span> &#x27;<span class="hljs-operator">/</span>federate&#x27;<br>   <span class="hljs-params">params:</span><br>    &#x27;match[]&#x27;:<br>      <span class="hljs-operator">-</span> &#x27;&#123;<span class="hljs-attr">job</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;prometheus&quot;</span>&#125;&#x27;  <span class="hljs-comment"># &#123;job=&quot;prometheus&quot;&#125; → 匹配 up（因为它的 job 标签是 &quot;prometheus&quot;）</span><br>      <span class="hljs-operator">-</span> &#x27;&#123;<span class="hljs-attr">__name__</span><span class="hljs-operator">=</span>~<span class="hljs-string">&quot;job:.*&quot;</span>&#125;&#x27;   <span class="hljs-comment"># &#123;__name__=\~&quot;job:.*&quot;&#125; → 匹配 job:api_requests</span><br>      <span class="hljs-operator">-</span> &#x27;&#123;<span class="hljs-attr">__name__</span><span class="hljs-operator">=</span>~<span class="hljs-string">&quot;node.*&quot;</span>&#125;&#x27;   <span class="hljs-comment"># &#123;__name__=\~&quot;node.*&quot;&#125; → 匹配 node_cpu_seconds_total</span><br>   <span class="hljs-params">static_configs:</span><br>     <span class="hljs-operator">-</span> <span class="hljs-params">targets:</span><br>       <span class="hljs-operator">-</span> &#x27;<span class="hljs-number">192.168</span>.<span class="hljs-number">100.132</span>:<span class="hljs-number">9090</span>&#x27;  <span class="hljs-comment">#下面的也可以不写，把133写在此处也是可以的</span><br><br> <span class="hljs-operator">-</span> <span class="hljs-params">job_name:</span> &#x27;prometheus-federate-<span class="hljs-number">100.133</span>&#x27;<br>   <span class="hljs-params">scrape_interval:</span> <span class="hljs-number">10</span>s<br>   <span class="hljs-params">honor_labels:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-params">metrics_path:</span> &#x27;<span class="hljs-operator">/</span>federate&#x27;<br>   <span class="hljs-params">params:</span><br>    &#x27;match[]&#x27;:<br>      <span class="hljs-operator">-</span> &#x27;&#123;<span class="hljs-attr">job</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;prometheus&quot;</span>&#125;&#x27;<br>      <span class="hljs-operator">-</span> &#x27;&#123;<span class="hljs-attr">__name__</span><span class="hljs-operator">=</span>~<span class="hljs-string">&quot;job:.*&quot;</span>&#125;&#x27;<br>      <span class="hljs-operator">-</span> &#x27;&#123;<span class="hljs-attr">__name__</span><span class="hljs-operator">=</span>~<span class="hljs-string">&quot;node.*&quot;</span>&#125;&#x27;<br>   <span class="hljs-params">static_configs:</span><br>     <span class="hljs-operator">-</span> <span class="hljs-params">targets:</span><br>       <span class="hljs-operator">-</span> &#x27;<span class="hljs-number">192.168</span>.<span class="hljs-number">100.133</span>:<span class="hljs-number">9090</span>&#x27;<br><br><span class="hljs-comment"># 重启Prometheus</span><br>systemctl restart prometheus<br></code></pre></td></tr></table></figure><p>web端验证</p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/911490-20240924154408692-1271488005.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/911490-20240924154934172-2143060460.png"></p><p>grafana图标验证</p><p><img src="http://cdn.882227.xyz/911490-20240924155321767-653618831.png" alt="911490-20240924155321767-653618831"></p><p>可以看到数据可以正常抓取及展示 </p><p>参考文档：<a href="https://prometheus.io/docs/prometheus/latest/federation/">https://prometheus.io/docs/prometheus/latest/federation/</a></p><p>本文转自 <a href="https://www.cnblogs.com/panwenbin-logs/p/18429140">https://www.cnblogs.com/panwenbin-logs/p/18429140</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <categories>
      
      <category>service</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>consul报错离线集群</title>
    <link href="/2025/05/26/consul%E6%8A%A5%E9%94%99%E7%A6%BB%E7%BA%BF%E9%9B%86%E7%BE%A4/"/>
    <url>/2025/05/26/consul%E6%8A%A5%E9%94%99%E7%A6%BB%E7%BA%BF%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>报错提示：agent: startup error: error&#x3D;”refusing to rejoin cluster because server has been offline for more than the configured server_rejoin_age_max (168h0m0s) - consider wiping your data dir”</p><p> Consul 服务器因为离线时间超过了配置的 <code>server_rejoin_age_max</code>（默认为168小时&#x2F;7天）而拒绝重新加入集群。</p><h4 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h4><p>Consul 出于数据一致性和安全考虑，会阻止长时间离线的服务器重新加入集群，以防止潜在的数据不一致问题。</p></blockquote><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="方法1：清除数据目录（推荐用于测试环境）"><a href="#方法1：清除数据目录（推荐用于测试环境）" class="headerlink" title="方法1：清除数据目录（推荐用于测试环境）"></a>方法1：清除数据目录（推荐用于测试环境）</h5><ol><li>停止 Consul 服务</li><li>删除 Consul 的数据目录（默认位于 <code>/var/lib/consul</code> 或 <code>./consul/data</code>）</li><li>重新启动 Consul 服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl stop consul<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/consul/*<br><span class="hljs-built_in">sudo</span> systemctl start consul<br></code></pre></td></tr></table></figure><h5 id="方法2：临时调整配置（适用于生产环境）"><a href="#方法2：临时调整配置（适用于生产环境）" class="headerlink" title="方法2：临时调整配置（适用于生产环境）"></a>方法2：临时调整配置（适用于生产环境）</h5><ol><li>修改 Consul 配置文件，增加或修改以下参数：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;server_rejoin_age_max&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;720h&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;rejoin_after_leave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol><li>重新启动 Consul 服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart consul<br></code></pre></td></tr></table></figure><h5 id="方法3：强制重新加入（不推荐）"><a href="#方法3：强制重新加入（不推荐）" class="headerlink" title="方法3：强制重新加入（不推荐）"></a>方法3：强制重新加入（不推荐）</h5><p>如果必须保留原有数据，可以尝试强制重新加入：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">consul <span class="hljs-literal">force</span>-<span class="hljs-literal">leave</span> &lt;节点名称&gt;<br></code></pre></td></tr></table></figure><h5 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h5><ol><li>对于生产环境，建议：<ul><li>设置监控，及时发现节点离线情况</li><li>定期备份 Consul 数据</li><li>考虑使用 Consul 的自动修复功能</li></ul></li><li>对于长时间维护计划：<ul><li>提前使用 <code>consul leave</code> 命令优雅退出</li><li>维护完成后使用 <code>consul join</code> 重新加入</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes高可用集群二进制部署（Runtime Containerd）</title>
    <link href="/2025/05/14/Kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2%EF%BC%88Runtime%20Containerd%EF%BC%89/"/>
    <url>/2025/05/14/Kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2%EF%BC%88Runtime%20Containerd%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes高可用集群二进制部署（Runtime-Containerd）"><a href="#Kubernetes高可用集群二进制部署（Runtime-Containerd）" class="headerlink" title="Kubernetes高可用集群二进制部署（Runtime Containerd）"></a>Kubernetes高可用集群二进制部署（Runtime Containerd）</h1><p>Kubernetes（简称为：k8s）是Google在2014年6月开源的一个容器集群管理系统，使用Go语言开发，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效,Kubernetes提供了资源调度、部署管理、服务发现、扩容缩容、监控，维护等一整套功能，努力成为跨主机集群的自动部署、扩展以及运行应用程序容器的平台。 它支持一系列容器工具, 包括Docker、Containerd等。</p><h1 id="一、集群环境准备"><a href="#一、集群环境准备" class="headerlink" title="一、集群环境准备"></a>一、集群环境准备</h1><h2 id="1-1-主机规划"><a href="#1-1-主机规划" class="headerlink" title="1.1 主机规划"></a>1.1 主机规划</h2><table><thead><tr><th>主机IP地址</th><th>主机名</th><th>主机配置</th><th>主机角色</th><th>软件列表</th></tr></thead><tbody><tr><td>192.168.10.12</td><td>k8s-master1</td><td>2C4G</td><td>master</td><td>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、Containerd、runc</td></tr><tr><td>192.168.10.13</td><td>k8s-master2</td><td>2C4G</td><td>master</td><td>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、Containerd、runc</td></tr><tr><td>192.168.10.14</td><td>k8s-master3</td><td>2C4G</td><td>master</td><td>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、Containerd、runc</td></tr><tr><td>192.168.10.15</td><td>k8s-worker1</td><td>2C4G</td><td>worker</td><td>kubelet、kube-proxy、Containerd、runc</td></tr><tr><td>192.168.10.10</td><td>ha1</td><td>1C2G</td><td>LB</td><td>haproxy、keepalived</td></tr><tr><td>192.168.10.11</td><td>ha2</td><td>1C2G</td><td>LB</td><td>haproxy、keepalived</td></tr><tr><td>192.168.10.100</td><td>&#x2F;</td><td>&#x2F;</td><td>VIP(虚拟IP)</td><td></td></tr></tbody></table><h2 id="1-2-软件版本"><a href="#1-2-软件版本" class="headerlink" title="1.2 软件版本"></a>1.2 软件版本</h2><table><thead><tr><th>软件名称</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>CentOS7</td><td>kernel版本：5.17</td><td></td></tr><tr><td>kubernetes</td><td>v1.21.10</td><td></td></tr><tr><td>etcd</td><td>v3.5.2</td><td>最新版本</td></tr><tr><td>calico</td><td>v3.19.4</td><td></td></tr><tr><td>coredns</td><td>v1.8.4</td><td></td></tr><tr><td>containerd</td><td>1.6.1</td><td></td></tr><tr><td>runc</td><td>1.1.0</td><td></td></tr><tr><td>haproxy</td><td>5.18</td><td>YUM源默认</td></tr><tr><td>keepalived</td><td>3.5</td><td>YUM源默认</td></tr></tbody></table><h2 id="1-3-网络分配"><a href="#1-3-网络分配" class="headerlink" title="1.3 网络分配"></a>1.3 网络分配</h2><table><thead><tr><th>网络名称</th><th>网段</th><th>备注</th></tr></thead><tbody><tr><td>Node网络</td><td>192.168.10.0&#x2F;24</td><td></td></tr><tr><td>Service网络</td><td>10.96.0.0&#x2F;16</td><td></td></tr><tr><td>Pod网络</td><td>10.244.0.0&#x2F;16</td><td></td></tr></tbody></table><h1 id="二、集群部署"><a href="#二、集群部署" class="headerlink" title="二、集群部署"></a>二、集群部署</h1><h2 id="2-1主机准备"><a href="#2-1主机准备" class="headerlink" title="2.1主机准备"></a>2.1主机准备</h2><h3 id="2-1-1-主机名设置"><a href="#2-1-1-主机名设置" class="headerlink" title="2.1.1 主机名设置"></a>2.1.1 主机名设置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hostnamectl <span class="hljs-built_in">set-hostname</span> xxx<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">关于主机名参见<span class="hljs-number">1.1</span>小节主机规划表<br></code></pre></td></tr></table></figure><h3 id="2-1-2-主机与IP地址解析"><a href="#2-1-2-主机与IP地址解析" class="headerlink" title="2.1.2 主机与IP地址解析"></a>2.1.2 主机与IP地址解析</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; EOF<br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.10</span> ha1<br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.11</span> ha2<br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span> k8s<span class="hljs-literal">-master1</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span> k8s<span class="hljs-literal">-master2</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span> k8s<span class="hljs-literal">-master3</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">10.15</span> k8s<span class="hljs-literal">-worker1</span><br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-1-3-主机安全设置"><a href="#2-1-3-主机安全设置" class="headerlink" title="2.1.3 主机安全设置"></a>2.1.3 主机安全设置</h3><h4 id="2-1-3-1-关闭防火墙"><a href="#2-1-3-1-关闭防火墙" class="headerlink" title="2.1.3.1 关闭防火墙"></a>2.1.3.1 关闭防火墙</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl stop firewalld<br>systmctl disable firewalld<br>firewall<span class="hljs-literal">-cmd</span> <span class="hljs-literal">--state</span><br></code></pre></td></tr></table></figure><h4 id="2-1-3-2-关闭selinux"><a href="#2-1-3-2-关闭selinux" class="headerlink" title="2.1.3.2 关闭selinux"></a>2.1.3.2 关闭selinux</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">setenforce <span class="hljs-number">0</span><br>sed <span class="hljs-literal">-ri</span> <span class="hljs-string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config<br>sestatus<br></code></pre></td></tr></table></figure><h3 id="2-1-4-交换分区设置"><a href="#2-1-4-交换分区设置" class="headerlink" title="2.1.4 交换分区设置"></a>2.1.4 交换分区设置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">swapoff <span class="hljs-literal">-a</span><br>sed <span class="hljs-literal">-ri</span> <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;vm.swappiness=0&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sysctl <span class="hljs-literal">-p</span><br></code></pre></td></tr></table></figure><h3 id="2-1-5-主机系统时间同步"><a href="#2-1-5-主机系统时间同步" class="headerlink" title="2.1.5 主机系统时间同步"></a>2.1.5 主机系统时间同步</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">安装软件<br>yum <span class="hljs-literal">-y</span> install ntpdate<br><br>制定时间同步计划任务<br>crontab <span class="hljs-literal">-e</span><br><span class="hljs-number">0</span> */<span class="hljs-number">1</span> * * * ntpdate time1.aliyun.com<br></code></pre></td></tr></table></figure><h3 id="2-1-6-主机系统优化"><a href="#2-1-6-主机系统优化" class="headerlink" title="2.1.6 主机系统优化"></a>2.1.6 主机系统优化</h3><blockquote><p>limit优化</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ulimit <span class="hljs-literal">-SHn</span> <span class="hljs-number">65535</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &lt;&lt;EOF &gt;&gt; /etc/security/limits.conf<br>* soft nofile <span class="hljs-number">655360</span><br>* hard nofile <span class="hljs-number">131072</span><br>* soft nproc <span class="hljs-number">655350</span><br>* hard nproc <span class="hljs-number">655350</span><br>* soft memlock unlimited<br>* hard memlock unlimited<br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-1-7-ipvs管理工具安装及模块加载"><a href="#2-1-7-ipvs管理工具安装及模块加载" class="headerlink" title="2.1.7 ipvs管理工具安装及模块加载"></a>2.1.7 ipvs管理工具安装及模块加载</h3><blockquote><p>为集群节点安装，负载均衡节点不用安装</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">yum <span class="hljs-literal">-y</span> install ipvsadm ipset sysstat conntrack libseccomp<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">所有节点配置ipvs模块，在内核<span class="hljs-number">4.19</span>+版本nf_conntrack_ipv4已经改为nf_conntrack， <span class="hljs-number">4.18</span>以下使用nf_conntrack_ipv4即可： <br> <br>modprobe <span class="hljs-literal">--</span> ip_vs <br>modprobe <span class="hljs-literal">--</span> ip_vs_rr <br>modprobe <span class="hljs-literal">--</span> ip_vs_wrr <br>modprobe <span class="hljs-literal">--</span> ip_vs_sh <br>modprobe <span class="hljs-literal">--</span> nf_conntrack <br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs powershell">创建 /etc/modules<span class="hljs-literal">-load</span>.d/ipvs.conf 并加入以下内容： <br><span class="hljs-built_in">cat</span> &gt;/etc/modules<span class="hljs-literal">-load</span>.d/ipvs.conf &lt;&lt;EOF <br>ip_vs <br>ip_vs_lc <br>ip_vs_wlc <br>ip_vs_rr <br>ip_vs_wrr <br>ip_vs_lblc <br>ip_vs_lblcr <br>ip_vs_dh <br>ip_vs_sh <br>ip_vs_fo <br>ip_vs_nq <br>ip_vs_sed <br>ip_vs_ftp <br>ip_vs_sh <br>nf_conntrack <br>ip_tables <br>ip_set <br>xt_set <br>ipt_set <br>ipt_rpfilter <br>ipt_REJECT <br>ipip <br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-1-8-加载containerd相关内核模块"><a href="#2-1-8-加载containerd相关内核模块" class="headerlink" title="2.1.8 加载containerd相关内核模块"></a>2.1.8 加载containerd相关内核模块</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">临时加载模块<br><br>modprobe overlay<br>modprobe br_netfilter<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">永久性加载模块<br><br><span class="hljs-built_in">cat</span> &gt; /etc/modules<span class="hljs-literal">-load</span>.d/containerd.conf &lt;&lt; EOF<br>overlay<br>br_netfilter<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">设置为开机启动<br>systemctl enable <span class="hljs-literal">--now</span> systemd<span class="hljs-literal">-modules-load</span>.service<br></code></pre></td></tr></table></figure><h3 id="2-1-9-Linux内核升级"><a href="#2-1-9-Linux内核升级" class="headerlink" title="2.1.9 Linux内核升级"></a>2.1.9 Linux内核升级</h3><blockquote><p>在所有节点中安装,需要重新操作系统更换内核。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># yum -y install perl</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># yum -y install https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># yum  --enablerepo=&quot;elrepo-kernel&quot;  -y install kernel-ml.x86_64</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># grub2-set-default 0</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></code></pre></td></tr></table></figure><h3 id="2-1-10-Linux内核优化"><a href="#2-1-10-Linux内核优化" class="headerlink" title="2.1.10 Linux内核优化"></a>2.1.10 Linux内核优化</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf<br>net.ipv4.ip_forward = <span class="hljs-number">1</span><br>net.bridge.bridge<span class="hljs-literal">-nf-call-iptables</span> = <span class="hljs-number">1</span><br>net.bridge.bridge<span class="hljs-literal">-nf-call-ip6tables</span> = <span class="hljs-number">1</span><br>fs.may_detach_mounts = <span class="hljs-number">1</span><br>vm.overcommit_memory=<span class="hljs-number">1</span><br>vm.panic_on_oom=<span class="hljs-number">0</span><br>fs.inotify.max_user_watches=<span class="hljs-number">89100</span><br>fs.file<span class="hljs-literal">-max</span>=<span class="hljs-number">52706963</span><br>fs.nr_open=<span class="hljs-number">52706963</span><br>net.netfilter.nf_conntrack_max=<span class="hljs-number">2310720</span><br><br>net.ipv4.tcp_keepalive_time = <span class="hljs-number">600</span><br>net.ipv4.tcp_keepalive_probes = <span class="hljs-number">3</span><br>net.ipv4.tcp_keepalive_intvl =<span class="hljs-number">15</span><br>net.ipv4.tcp_max_tw_buckets = <span class="hljs-number">36000</span><br>net.ipv4.tcp_tw_reuse = <span class="hljs-number">1</span><br>net.ipv4.tcp_max_orphans = <span class="hljs-number">327680</span><br>net.ipv4.tcp_orphan_retries = <span class="hljs-number">3</span><br>net.ipv4.tcp_syncookies = <span class="hljs-number">1</span><br>net.ipv4.tcp_max_syn_backlog = <span class="hljs-number">16384</span><br>net.ipv4.ip_conntrack_max = <span class="hljs-number">131072</span><br>net.ipv4.tcp_max_syn_backlog = <span class="hljs-number">16384</span><br>net.ipv4.tcp_timestamps = <span class="hljs-number">0</span><br>net.core.somaxconn = <span class="hljs-number">16384</span><br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sysctl <span class="hljs-literal">--system</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">所有节点配置完内核后，重启服务器，保证重启后内核依旧加载<br>reboot <span class="hljs-literal">-h</span> now<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">重启后查看ipvs模块加载情况：<br>lsmod | grep <span class="hljs-literal">--color</span>=auto <span class="hljs-literal">-e</span> ip_vs <span class="hljs-literal">-e</span> nf_conntrack<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">重启后查看containerd相关模块加载情况：<br>lsmod | egrep <span class="hljs-string">&#x27;br_netfilter | overlay&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-1-11-其它工具安装-选装"><a href="#2-1-11-其它工具安装-选装" class="headerlink" title="2.1.11 其它工具安装(选装)"></a>2.1.11 其它工具安装(选装)</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">yum install <span class="hljs-built_in">wget</span> jq psmisc vim net<span class="hljs-literal">-tools</span> telnet yum<span class="hljs-literal">-utils</span> device<span class="hljs-literal">-mapper-persistent-data</span> lvm2 git lrzsz <span class="hljs-literal">-y</span><br></code></pre></td></tr></table></figure><h2 id="2-2-负载均衡器准备"><a href="#2-2-负载均衡器准备" class="headerlink" title="2.2 负载均衡器准备"></a>2.2 负载均衡器准备</h2><h3 id="2-2-1-安装haproxy与keepalived"><a href="#2-2-1-安装haproxy与keepalived" class="headerlink" title="2.2.1 安装haproxy与keepalived"></a>2.2.1 安装haproxy与keepalived</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">yum <span class="hljs-literal">-y</span> install haproxy keepalived<br></code></pre></td></tr></table></figure><h3 id="2-2-2-HAProxy配置"><a href="#2-2-2-HAProxy配置" class="headerlink" title="2.2.2 HAProxy配置"></a>2.2.2 HAProxy配置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt;/etc/haproxy/haproxy.cfg&lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br>global<br> maxconn <span class="hljs-number">2000</span><br> u<span class="hljs-built_in">limit-n</span> <span class="hljs-number">16384</span><br> log <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> local0 err<br> stats timeout <span class="hljs-number">30</span>s<br><br>defaults<br> log global<br> mode http<br> option httplog<br> timeout connect <span class="hljs-number">5000</span><br> timeout client <span class="hljs-number">50000</span><br> timeout server <span class="hljs-number">50000</span><br> timeout http<span class="hljs-literal">-request</span> <span class="hljs-number">15</span>s<br> timeout http<span class="hljs-literal">-keep-alive</span> <span class="hljs-number">15</span>s<br><br>frontend monitor<span class="hljs-operator">-in</span><br> bind *:<span class="hljs-number">33305</span><br> mode http<br> option httplog<br> monitor<span class="hljs-literal">-uri</span> /monitor<br><br>frontend k8s<span class="hljs-literal">-master</span><br> bind <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">6443</span><br> bind <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6443</span><br> mode tcp<br> option tcplog<br> tcp<span class="hljs-literal">-request</span> inspect<span class="hljs-literal">-delay</span> <span class="hljs-number">5</span>s<br> default_backend k8s<span class="hljs-literal">-master</span><br><br>backend k8s<span class="hljs-literal">-master</span><br> mode tcp<br> option tcplog<br> option tcp<span class="hljs-literal">-check</span><br> balance roundrobin<br> default<span class="hljs-literal">-server</span> inter <span class="hljs-number">10</span>s downinter <span class="hljs-number">5</span>s rise <span class="hljs-number">2</span> fall <span class="hljs-number">2</span> slowstart <span class="hljs-number">60</span>s maxconn <span class="hljs-number">250</span> maxqueue <span class="hljs-number">256</span> weight <span class="hljs-number">100</span><br> server  k8s<span class="hljs-literal">-master1</span>  <span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">6443</span> check<br> server  k8s<span class="hljs-literal">-master2</span>  <span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">6443</span> check<br> server  k8s<span class="hljs-literal">-master3</span>  <span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">6443</span> check<br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-2-3-KeepAlived"><a href="#2-2-3-KeepAlived" class="headerlink" title="2.2.3 KeepAlived"></a>2.2.3 KeepAlived</h3><blockquote><p>主从配置不一致，需要注意。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ha1:<br><br><span class="hljs-built_in">cat</span> &gt;/etc/keepalived/keepalived.conf&lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br>   router_id LVS_DEVEL<br>script_user root<br>   enable_script_security<br>&#125;<br>vrrp_script chk_apiserver &#123;<br>   script <span class="hljs-string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span><br>   interval <span class="hljs-number">5</span><br>   weight <span class="hljs-literal">-5</span><br>   fall <span class="hljs-number">2</span> <br>rise <span class="hljs-number">1</span><br>&#125;<br>vrrp_instance VI_1 &#123;<br>   state MASTER<br>   interface ens33<br>   mcast_src_ip <span class="hljs-number">192.168</span>.<span class="hljs-number">10.10</span><br>   virtual_router_id <span class="hljs-number">51</span><br>   priority <span class="hljs-number">100</span><br>   advert_int <span class="hljs-number">2</span><br>   authentication &#123;<br>       auth_type PASS<br>       auth_pass K8SHA_KA_AUTH<br>   &#125;<br>   virtual_ipaddress &#123;<br>       <span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span><br>   &#125;<br>   track_script &#123;<br>      chk_apiserver<br>   &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ha2:<br><br><span class="hljs-built_in">cat</span> &gt;/etc/keepalived/keepalived.conf&lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br>   router_id LVS_DEVEL<br>script_user root<br>   enable_script_security<br>&#125;<br>vrrp_script chk_apiserver &#123;<br>   script <span class="hljs-string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span><br>  interval <span class="hljs-number">5</span><br>   weight <span class="hljs-literal">-5</span><br>   fall <span class="hljs-number">2</span> <br>rise <span class="hljs-number">1</span><br>&#125;<br>vrrp_instance VI_1 &#123;<br>   state BACKUP<br>   interface ens33<br>   mcast_src_ip <span class="hljs-number">192.168</span>.<span class="hljs-number">10.11</span><br>   virtual_router_id <span class="hljs-number">51</span><br>   priority <span class="hljs-number">99</span><br>   advert_int <span class="hljs-number">2</span><br>   authentication &#123;<br>       auth_type PASS<br>       auth_pass K8SHA_KA_AUTH<br>   &#125;<br>   virtual_ipaddress &#123;<br>       <span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span><br>   &#125;<br>   track_script &#123;<br>      chk_apiserver<br>   &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-2-4-健康检查脚本"><a href="#2-2-4-健康检查脚本" class="headerlink" title="2.2.4 健康检查脚本"></a>2.2.4 健康检查脚本</h3><blockquote><p>ha1及ha2均要配置</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; /etc/keepalived/check_apiserver.sh &lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br><span class="hljs-comment">#!/bin/bash</span><br>err=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-variable">$</span>(seq <span class="hljs-number">1</span> <span class="hljs-number">3</span>)<br><span class="hljs-keyword">do</span><br>   check_code=<span class="hljs-variable">$</span>(pgrep haproxy)<br>   <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$check_code</span> == <span class="hljs-string">&quot;&quot;</span> ]]; then<br>       err=<span class="hljs-variable">$</span>(expr <span class="hljs-variable">$err</span> + <span class="hljs-number">1</span>)<br>       <span class="hljs-built_in">sleep</span> <span class="hljs-number">1</span><br>       <span class="hljs-keyword">continue</span><br>   <span class="hljs-keyword">else</span><br>       err=<span class="hljs-number">0</span><br>       <span class="hljs-keyword">break</span><br>   fi<br>done<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$err</span> != <span class="hljs-string">&quot;0&quot;</span> ]]; then<br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;systemctl stop keepalived&quot;</span><br>   /usr/bin/systemctl stop keepalived<br>   <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>fi<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">chmod +x /etc/keepalived/check_apiserver.sh<br></code></pre></td></tr></table></figure><h3 id="2-2-5-启动服务并验证"><a href="#2-2-5-启动服务并验证" class="headerlink" title="2.2.5 启动服务并验证"></a>2.2.5 启动服务并验证</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl daemon<span class="hljs-literal">-reload</span><br>systemctl enable <span class="hljs-literal">--now</span> haproxy<br>systemctl enable <span class="hljs-literal">--now</span> keepalived<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ip address show<br></code></pre></td></tr></table></figure><h2 id="2-3-配置免密登录"><a href="#2-3-配置免密登录" class="headerlink" title="2.3 配置免密登录"></a>2.3 配置免密登录</h2><blockquote><p>在k8s-master1上操作</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh<span class="hljs-literal">-keygen</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh<span class="hljs-literal">-copy-id</span> root@k8s<span class="hljs-literal">-master1</span><br>ssh<span class="hljs-literal">-copy-id</span> root@k8s<span class="hljs-literal">-master2</span><br>ssh<span class="hljs-literal">-copy-id</span> root@k8s<span class="hljs-literal">-master3</span><br>ssh<span class="hljs-literal">-copy-id</span> root@k8s<span class="hljs-literal">-worker1</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh root@k8s<span class="hljs-literal">-master1</span><br></code></pre></td></tr></table></figure><h2 id="2-4-部署ETCD集群"><a href="#2-4-部署ETCD集群" class="headerlink" title="2.4 部署ETCD集群"></a>2.4 部署ETCD集群</h2><blockquote><p>在k8s-master1上操作。</p></blockquote><h3 id="2-4-1-创建工作目录"><a href="#2-4-1-创建工作目录" class="headerlink" title="2.4.1 创建工作目录"></a>2.4.1 创建工作目录</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir <span class="hljs-literal">-p</span> /<span class="hljs-keyword">data</span>/k8s<span class="hljs-literal">-work</span><br></code></pre></td></tr></table></figure><h3 id="2-4-2-获取cfssl工具"><a href="#2-4-2-获取cfssl工具" class="headerlink" title="2.4.2 获取cfssl工具"></a>2.4.2 获取cfssl工具</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> /<span class="hljs-keyword">data</span>/k8s<span class="hljs-literal">-work</span><br><span class="hljs-built_in">wget</span> https://pkg.cfssl.org/R1.<span class="hljs-number">2</span>/cfssl_linux<span class="hljs-literal">-amd64</span><br><span class="hljs-built_in">wget</span> https://pkg.cfssl.org/R1.<span class="hljs-number">2</span>/cfssljson_linux<span class="hljs-literal">-amd64</span><br><span class="hljs-built_in">wget</span> https://pkg.cfssl.org/R1.<span class="hljs-number">2</span>/cfssl<span class="hljs-literal">-certinfo_linux-amd64</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br>cfssl是使用go编写，由CloudFlare开源的一款PKI/TLS工具。主要程序有：<br><br>- cfssl，是CFSSL的命令行工具<br>- cfssljson用来从cfssl程序获取JSON输出，并将证书，密钥，CSR和bundle写入文件中。<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">chmod +x cfssl*<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">mv</span> cfssl_linux<span class="hljs-literal">-amd64</span> /usr/local/bin/cfssl<br><span class="hljs-built_in">mv</span> cfssljson_linux<span class="hljs-literal">-amd64</span> /usr/local/bin/cfssljson<br><span class="hljs-built_in">mv</span> cfssl<span class="hljs-literal">-certinfo_linux-amd64</span> /usr/local/bin/cfssl<span class="hljs-literal">-certinfo</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># cfssl version</span><br>Version: <span class="hljs-number">1.2</span>.<span class="hljs-number">0</span><br>Revision: dev<br>Runtime: go1.<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="2-4-3-创建CA证书"><a href="#2-4-3-创建CA证书" class="headerlink" title="2.4.3 创建CA证书"></a>2.4.3 创建CA证书</h3><h4 id="2-4-3-1-配置ca证书请求文件"><a href="#2-4-3-1-配置ca证书请求文件" class="headerlink" title="2.4.3.1 配置ca证书请求文件"></a>2.4.3.1 配置ca证书请求文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; ca<span class="hljs-literal">-csr</span>.json &lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>      <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;kubemsb&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;ca&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-4-3-2-创建ca证书"><a href="#2-4-3-2-创建ca证书" class="headerlink" title="2.4.3.2 创建ca证书"></a>2.4.3.2 创建ca证书</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cfssl gencert <span class="hljs-literal">-initca</span> ca<span class="hljs-literal">-csr</span>.json | cfssljson <span class="hljs-literal">-bare</span> ca<br></code></pre></td></tr></table></figure><h4 id="2-4-3-3-配置ca证书策略"><a href="#2-4-3-3-配置ca证书策略" class="headerlink" title="2.4.3.3 配置ca证书策略"></a>2.4.3.3 配置ca证书策略</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cfssl print<span class="hljs-literal">-defaults</span> config &gt; ca<span class="hljs-literal">-config</span>.json<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; ca<span class="hljs-literal">-config</span>.json &lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>        &#125;,<br>      <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;usages&quot;</span>: [<br>                  <span class="hljs-string">&quot;signing&quot;</span>,<br>                  <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>                  <span class="hljs-string">&quot;server auth&quot;</span>,<br>                  <span class="hljs-string">&quot;client auth&quot;</span><br>              ],<br>              <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;87600h&quot;</span><br>          &#125;<br>      &#125;<br>  &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">server auth 表示client可以对使用该ca对server提供的证书进行验证<br><br>client auth 表示server可以使用该ca对client提供的证书进行验证<br></code></pre></td></tr></table></figure><h3 id="2-4-4-创建etcd证书"><a href="#2-4-4-创建etcd证书" class="headerlink" title="2.4.4 创建etcd证书"></a>2.4.4 创建etcd证书</h3><h4 id="2-4-4-1-配置etcd请求文件"><a href="#2-4-4-1-配置etcd请求文件" class="headerlink" title="2.4.4.1 配置etcd请求文件"></a>2.4.4.1 配置etcd请求文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; etcd<span class="hljs-literal">-csr</span>.json &lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.12&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.13&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.14&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;kubemsb&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span><br>  &#125;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-4-4-2-生成etcd证书"><a href="#2-4-4-2-生成etcd证书" class="headerlink" title="2.4.4.2 生成etcd证书"></a>2.4.4.2 生成etcd证书</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cfssl gencert <span class="hljs-literal">-ca</span>=ca.pem <span class="hljs-literal">-ca-key</span>=ca<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">-config</span>=ca<span class="hljs-literal">-config</span>.json <span class="hljs-literal">-profile</span>=kubernetes etcd<span class="hljs-literal">-csr</span>.json | cfssljson  <span class="hljs-literal">-bare</span> etcd<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls</span><br>输出<br>ca<span class="hljs-literal">-config</span>.json  ca.csr  ca<span class="hljs-literal">-csr</span>.json  ca<span class="hljs-literal">-key</span>.pem  ca.pem  etcd.csr  etcd<span class="hljs-literal">-csr</span>.json  etcd<span class="hljs-literal">-key</span>.pem  etcd.pem<br></code></pre></td></tr></table></figure><h3 id="2-4-5-部署etcd集群"><a href="#2-4-5-部署etcd集群" class="headerlink" title="2.4.5  部署etcd集群"></a>2.4.5  部署etcd集群</h3><h4 id="2-4-5-1-下载etcd软件包"><a href="#2-4-5-1-下载etcd软件包" class="headerlink" title="2.4.5.1 下载etcd软件包"></a>2.4.5.1 下载etcd软件包</h4><p>![image-20220319090935574](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220319090935574.png)</p><p>![image-20220319091008943](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220319091008943.png)</p><p>![image-20220319091037753](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220319091037753.png)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> https://github.com/etcd<span class="hljs-literal">-io</span>/etcd/releases/download/v3.<span class="hljs-number">5.2</span>/etcd<span class="hljs-literal">-v3</span>.<span class="hljs-number">5.2</span><span class="hljs-literal">-linux-amd64</span>.tar.gz<br></code></pre></td></tr></table></figure><h4 id="2-4-5-2-安装etcd软件"><a href="#2-4-5-2-安装etcd软件" class="headerlink" title="2.4.5.2 安装etcd软件"></a>2.4.5.2 安装etcd软件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tar <span class="hljs-literal">-xvf</span> etcd<span class="hljs-literal">-v3</span>.<span class="hljs-number">5.2</span><span class="hljs-literal">-linux-amd64</span>.tar.gz<br><span class="hljs-built_in">cp</span> <span class="hljs-literal">-p</span> etcd<span class="hljs-literal">-v3</span>.<span class="hljs-number">5.2</span><span class="hljs-literal">-linux-amd64</span>/etcd* /usr/local/bin/<br></code></pre></td></tr></table></figure><h4 id="2-4-5-3-分发etcd软件"><a href="#2-4-5-3-分发etcd软件" class="headerlink" title="2.4.5.3 分发etcd软件"></a>2.4.5.3 分发etcd软件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp etcd<span class="hljs-literal">-v3</span>.<span class="hljs-number">5.2</span><span class="hljs-literal">-linux-amd64</span>/etcd* k8s<span class="hljs-literal">-master2</span>:/usr/local/bin/<br><br>scp etcd<span class="hljs-literal">-v3</span>.<span class="hljs-number">5.2</span><span class="hljs-literal">-linux-amd64</span>/etcd* k8s<span class="hljs-literal">-master3</span>:/usr/local/bin/<br></code></pre></td></tr></table></figure><h4 id="2-4-5-4-创建配置文件"><a href="#2-4-5-4-创建配置文件" class="headerlink" title="2.4.5.4 创建配置文件"></a>2.4.5.4 创建配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir /etc/etcd<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt;  /etc/etcd/etcd.conf &lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br><span class="hljs-comment">#[Member]</span><br>ETCD_NAME=<span class="hljs-string">&quot;etcd1&quot;</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/default.etcd&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.10.12:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.10.12:2379,http://127.0.0.1:2379&quot;</span><br><br><span class="hljs-comment">#[Clustering]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.10.12:2380&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.10.12:2379&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://192.168.10.12:2380,etcd2=https://192.168.10.13:2380,etcd3=https://192.168.10.14:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br>ETCD_NAME：节点名称，集群中唯一<br>ETCD_DATA_DIR：数据目录<br>ETCD_LISTEN_PEER_URLS：集群通信监听地址<br>ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址<br>ETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址<br>ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址<br>ETCD_INITIAL_CLUSTER：集群节点地址<br>ETCD_INITIAL_CLUSTER_TOKEN：集群Token<br>ETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群<br></code></pre></td></tr></table></figure><h4 id="2-4-5-5-创建服务配置文件"><a href="#2-4-5-5-创建服务配置文件" class="headerlink" title="2.4.5.5 创建服务配置文件"></a>2.4.5.5 创建服务配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir <span class="hljs-literal">-p</span> /etc/etcd/ssl<br>mkdir <span class="hljs-literal">-p</span> /var/lib/etcd/default.etcd<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> /<span class="hljs-keyword">data</span>/k8s<span class="hljs-literal">-work</span><br><span class="hljs-built_in">cp</span> ca*.pem /etc/etcd/ssl<br><span class="hljs-built_in">cp</span> etcd*.pem /etc/etcd/ssl<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; /etc/systemd/system/etcd.service &lt;&lt;<span class="hljs-string">&quot;EOF&quot;</span><br>[<span class="hljs-type">Unit</span>]<br>Description=Etcd Server<br>After=network.target<br>After=network<span class="hljs-literal">-online</span>.target<br>Wants=network<span class="hljs-literal">-online</span>.target<br><br>[<span class="hljs-type">Service</span>]<br><span class="hljs-built_in">Type</span>=notify<br>EnvironmentFile=-/etc/etcd/etcd.conf<br>WorkingDirectory=/var/lib/etcd/<br>ExecStart=/usr/local/bin/etcd \<br>  <span class="hljs-literal">--cert-file</span>=/etc/etcd/ssl/etcd.pem \<br>  <span class="hljs-literal">--key-file</span>=/etc/etcd/ssl/etcd<span class="hljs-literal">-key</span>.pem \<br>  <span class="hljs-literal">--trusted-ca-file</span>=/etc/etcd/ssl/ca.pem \<br>  <span class="hljs-literal">--peer-cert-file</span>=/etc/etcd/ssl/etcd.pem \<br>  <span class="hljs-literal">--peer-key-file</span>=/etc/etcd/ssl/etcd<span class="hljs-literal">-key</span>.pem \<br>  <span class="hljs-literal">--peer-trusted-ca-file</span>=/etc/etcd/ssl/ca.pem \<br>  <span class="hljs-literal">--peer-client-cert-auth</span> \<br>  <span class="hljs-literal">--client-cert-auth</span><br>Restart=on<span class="hljs-literal">-failure</span><br>RestartSec=<span class="hljs-number">5</span><br>LimitNOFILE=<span class="hljs-number">65536</span><br><br>[<span class="hljs-type">Install</span>]<br>WantedBy=multi<span class="hljs-literal">-user</span>.target<br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-4-5-6-同步etcd配置到集群其它master节点"><a href="#2-4-5-6-同步etcd配置到集群其它master节点" class="headerlink" title="2.4.5.6 同步etcd配置到集群其它master节点"></a>2.4.5.6 同步etcd配置到集群其它master节点</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">创建目录<br>mkdir <span class="hljs-literal">-p</span> /etc/etcd<br>mkdir <span class="hljs-literal">-p</span> /etc/etcd/ssl<br>mkdir <span class="hljs-literal">-p</span> /var/lib/etcd/default.etcd<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">服务配置文件,需要修改etcd节点名称及IP地址<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k8s<span class="hljs-literal">-master2</span> k8s<span class="hljs-literal">-master3</span> \<br><span class="hljs-keyword">do</span> \<br>scp /etc/etcd/etcd.conf <span class="hljs-variable">$i:</span>/etc/etcd/ \<br>done<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell">k8s<span class="hljs-literal">-master2</span>:<br><br><span class="hljs-built_in">cat</span> /etc/etcd/etcd.conf<br><span class="hljs-comment">#[Member]</span><br>ETCD_NAME=<span class="hljs-string">&quot;etcd2&quot;</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/default.etcd&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.10.13:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.10.13:2379,http://127.0.0.1:2379&quot;</span><br><br><span class="hljs-comment">#[Clustering]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.10.13:2380&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.10.13:2379&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://192.168.10.12:2380,etcd2=https://192.168.10.13:2380,etcd3=https://192.168.10.14:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell">k8s<span class="hljs-literal">-master3</span>:<br><br><span class="hljs-built_in">cat</span> /etc/etcd/etcd.conf<br><span class="hljs-comment">#[Member]</span><br>ETCD_NAME=<span class="hljs-string">&quot;etcd3&quot;</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/default.etcd&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://192.168.10.14:2380&quot;</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.10.14:2379,http://127.0.0.1:2379&quot;</span><br><br><span class="hljs-comment">#[Clustering]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://192.168.10.14:2380&quot;</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://192.168.10.14:2379&quot;</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd1=https://192.168.10.12:2380,etcd2=https://192.168.10.13:2380,etcd3=https://192.168.10.14:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">证书文件<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k8s<span class="hljs-literal">-master2</span> k8s<span class="hljs-literal">-master3</span> \<br><span class="hljs-keyword">do</span> \<br>scp /etc/etcd/ssl/* <span class="hljs-variable">$i:</span>/etc/etcd/ssl \<br>done<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">服务启动配置文件<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k8s<span class="hljs-literal">-master2</span> k8s<span class="hljs-literal">-master3</span> \<br><span class="hljs-keyword">do</span> \<br>scp /etc/systemd/system/etcd.service <span class="hljs-variable">$i:</span>/etc/systemd/system/ \<br>done<br></code></pre></td></tr></table></figure><h4 id="2-4-5-7-启动etcd集群"><a href="#2-4-5-7-启动etcd集群" class="headerlink" title="2.4.5.7 启动etcd集群"></a>2.4.5.7 启动etcd集群</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl daemon<span class="hljs-literal">-reload</span><br>systemctl enable <span class="hljs-literal">--now</span> etcd.service<br>systemctl status etcd<br></code></pre></td></tr></table></figure><h4 id="2-4-5-8-验证集群状态"><a href="#2-4-5-8-验证集群状态" class="headerlink" title="2.4.5.8 验证集群状态"></a>2.4.5.8 验证集群状态</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ETCDCTL_API=<span class="hljs-number">3</span> /usr/local/bin/etcdctl <span class="hljs-literal">--write-out</span>=table <span class="hljs-literal">--cacert</span>=/etc/etcd/ssl/ca.pem <span class="hljs-literal">--cert</span>=/etc/etcd/ssl/etcd.pem <span class="hljs-literal">--key</span>=/etc/etcd/ssl/etcd<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">--endpoints</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">2379</span> endpoint health<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">--------</span>+<span class="hljs-literal">-------------</span>+<span class="hljs-literal">-------</span>+<br>|          ENDPOINT          | HEALTH |    TOOK     | ERROR |<br>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">--------</span>+<span class="hljs-literal">-------------</span>+<span class="hljs-literal">-------</span>+<br>| https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">2379</span> |   true | <span class="hljs-number">10.393062</span>ms |       |<br>| https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">2379</span> |   true |  <span class="hljs-number">15.70437</span>ms |       |<br>| https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">2379</span> |   true | <span class="hljs-number">15.871684</span>ms |       |<br>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">--------</span>+<span class="hljs-literal">-------------</span>+<span class="hljs-literal">-------</span>+<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">检查ETCD数据库性能<br>ETCDCTL_API=<span class="hljs-number">3</span> /usr/local/bin/etcdctl <span class="hljs-literal">--write-out</span>=table <span class="hljs-literal">--cacert</span>=/etc/etcd/ssl/ca.pem <span class="hljs-literal">--cert</span>=/etc/etcd/ssl/etcd.pem <span class="hljs-literal">--key</span>=/etc/etcd/ssl/etcd<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">--endpoints</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">2379</span> check perf<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">59</span> / <span class="hljs-number">60</span> Boooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooom  !  <span class="hljs-number">98.33</span>%<br>PASS: Throughput is <span class="hljs-number">151</span> writes/s<br>PASS: Slowest request took <span class="hljs-number">0.066478</span>s<br>PASS: Stddev is <span class="hljs-number">0.002354</span>s<br>PASS<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ETCDCTL_API=<span class="hljs-number">3</span> /usr/local/bin/etcdctl <span class="hljs-literal">--write-out</span>=table <span class="hljs-literal">--cacert</span>=/etc/etcd/ssl/ca.pem <span class="hljs-literal">--cert</span>=/etc/etcd/ssl/etcd.pem <span class="hljs-literal">--key</span>=/etc/etcd/ssl/etcd<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">--endpoints</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">2379</span> member list<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">+<span class="hljs-literal">------------------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">-------</span>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">------------</span>+<br>|        ID        | STATUS  | NAME  |         PEER ADDRS         |        CLIENT ADDRS        | IS LEARNER |<br>+<span class="hljs-literal">------------------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">-------</span>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">------------</span>+<br>| <span class="hljs-number">9</span>b449b0ff1d4c375 | started | etcd1 | https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">2380</span> | https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">2379</span> |      false |<br>| d1fbb74bc6a61e5c | started | etcd2 | https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">2380</span> | https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">2379</span> |      false |<br>| f60b205fb02fe23c | started | etcd3 | https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">2380</span> | https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">2379</span> |      false |<br>+<span class="hljs-literal">------------------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">-------</span>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">------------</span>+<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ETCDCTL_API=<span class="hljs-number">3</span> /usr/local/bin/etcdctl <span class="hljs-literal">--write-out</span>=table <span class="hljs-literal">--cacert</span>=/etc/etcd/ssl/ca.pem <span class="hljs-literal">--cert</span>=/etc/etcd/ssl/etcd.pem <span class="hljs-literal">--key</span>=/etc/etcd/ssl/etcd<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">--endpoints</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">2379</span>,https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">2379</span> endpoint status<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">------------------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">-----------</span>+<span class="hljs-literal">------------</span>+<span class="hljs-literal">-----------</span>+<span class="hljs-literal">------------</span>+<span class="hljs-literal">--------------------</span>+<span class="hljs-literal">--------</span>+<br>|          ENDPOINT          |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">------------------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">-----------</span>+<span class="hljs-literal">------------</span>+<span class="hljs-literal">-----------</span>+<span class="hljs-literal">------------</span>+<span class="hljs-literal">--------------------</span>+<span class="hljs-literal">--------</span>+<br>| https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">2379</span> | <span class="hljs-number">9</span>b449b0ff1d4c375 |   <span class="hljs-number">3.5</span>.<span class="hljs-number">2</span> |   <span class="hljs-number">24</span> MB |      true |      false |         <span class="hljs-number">2</span> |     <span class="hljs-number">403774</span> |             <span class="hljs-number">403774</span> |        |<br>| https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">2379</span> | d1fbb74bc6a61e5c |   <span class="hljs-number">3.5</span>.<span class="hljs-number">2</span> |   <span class="hljs-number">24</span> MB |     false |      false |         <span class="hljs-number">2</span> |     <span class="hljs-number">403774</span> |             <span class="hljs-number">403774</span> |        |<br>| https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">2379</span> | f60b205fb02fe23c |   <span class="hljs-number">3.5</span>.<span class="hljs-number">2</span> |   <span class="hljs-number">24</span> MB |     false |      false |         <span class="hljs-number">2</span> |     <span class="hljs-number">403774</span> |             <span class="hljs-number">403774</span> |        |<br>+<span class="hljs-literal">----------------------------</span>+<span class="hljs-literal">------------------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">---------</span>+<span class="hljs-literal">-----------</span>+<span class="hljs-literal">------------</span>+<span class="hljs-literal">-----------</span>+<span class="hljs-literal">------------</span>+<span class="hljs-literal">--------------------</span>+<span class="hljs-literal">--------</span>+<br></code></pre></td></tr></table></figure><h2 id="2-5-Kubernetes集群部署"><a href="#2-5-Kubernetes集群部署" class="headerlink" title="2.5 Kubernetes集群部署"></a>2.5 Kubernetes集群部署</h2><h3 id="2-5-1-Kubernetes软件包下载"><a href="#2-5-1-Kubernetes软件包下载" class="headerlink" title="2.5.1 Kubernetes软件包下载"></a>2.5.1 Kubernetes软件包下载</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> https://dl.k8s.io/v1.<span class="hljs-number">21.10</span>/kubernetes<span class="hljs-literal">-server-linux-amd64</span>.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-5-2-Kubernetes软件包安装"><a href="#2-5-2-Kubernetes软件包安装" class="headerlink" title="2.5.2 Kubernetes软件包安装"></a>2.5.2 Kubernetes软件包安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tar <span class="hljs-literal">-xvf</span> kubernetes<span class="hljs-literal">-server-linux-amd64</span>.tar.gz<br><br><span class="hljs-built_in">cd</span> kubernetes/server/bin/<br><br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-apiserver</span> kube<span class="hljs-literal">-controller-manager</span> kube<span class="hljs-literal">-scheduler</span> kubectl /usr/local/bin/<br></code></pre></td></tr></table></figure><h3 id="2-5-3-Kubernetes软件分发"><a href="#2-5-3-Kubernetes软件分发" class="headerlink" title="2.5.3 Kubernetes软件分发"></a>2.5.3 Kubernetes软件分发</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp kube<span class="hljs-literal">-apiserver</span> kube<span class="hljs-literal">-controller-manager</span> kube<span class="hljs-literal">-scheduler</span> kubectl k8s<span class="hljs-literal">-master2</span>:/usr/local/bin/<br>scp kube<span class="hljs-literal">-apiserver</span> kube<span class="hljs-literal">-controller-manager</span> kube<span class="hljs-literal">-scheduler</span> kubectl k8s<span class="hljs-literal">-master3</span>:/usr/local/bin/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp kubelet kube<span class="hljs-literal">-proxy</span> k8s<span class="hljs-literal">-master1</span>:/usr/local/bin<br>scp kubelet kube<span class="hljs-literal">-proxy</span> k8s<span class="hljs-literal">-master2</span>:/usr/local/bin<br>scp kubelet kube<span class="hljs-literal">-proxy</span> k8s<span class="hljs-literal">-master3</span>:/usr/local/bin<br>scp kubelet kube<span class="hljs-literal">-proxy</span> k8s<span class="hljs-literal">-worker1</span>:/usr/local/bin<br></code></pre></td></tr></table></figure><h3 id="2-5-4-在集群节点上创建目录"><a href="#2-5-4-在集群节点上创建目录" class="headerlink" title="2.5.4 在集群节点上创建目录"></a>2.5.4 在集群节点上创建目录</h3><blockquote><p>所有节点</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir <span class="hljs-literal">-p</span> /etc/kubernetes/        <br>mkdir <span class="hljs-literal">-p</span> /etc/kubernetes/ssl     <br>mkdir <span class="hljs-literal">-p</span> /var/log/kubernetes <br></code></pre></td></tr></table></figure><h3 id="2-5-5-部署api-server"><a href="#2-5-5-部署api-server" class="headerlink" title="2.5.5 部署api-server"></a>2.5.5 部署api-server</h3><h4 id="2-5-5-1-创建apiserver证书请求文件"><a href="#2-5-5-1-创建apiserver证书请求文件" class="headerlink" title="2.5.5.1 创建apiserver证书请求文件"></a>2.5.5.1 创建apiserver证书请求文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-apiserver-csr</span>.json &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br><span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.12&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.13&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.14&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.15&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.16&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.17&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.18&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.19&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.20&quot;</span>,<br>    <span class="hljs-string">&quot;192.168.10.100&quot;</span>,<br>    <span class="hljs-string">&quot;10.96.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;kubemsb&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br>如果 hosts 字段不为空则需要指定授权使用该证书的 IP（含VIP） 或域名列表。由于该证书被 集群使用，需要将节点的IP都填上，为了方便后期扩容可以多写几个预留的IP。<br>同时还需要填写 service 网络的首个IP(一般是 kube<span class="hljs-literal">-apiserver</span> 指定的 service<span class="hljs-literal">-cluster-ip-range</span> 网段的第一个IP，如 <span class="hljs-number">10.96</span>.<span class="hljs-number">0.1</span>)。<br></code></pre></td></tr></table></figure><h4 id="2-5-5-2-生成apiserver证书及token文件"><a href="#2-5-5-2-生成apiserver证书及token文件" class="headerlink" title="2.5.5.2 生成apiserver证书及token文件"></a>2.5.5.2 生成apiserver证书及token文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cfssl gencert <span class="hljs-literal">-ca</span>=ca.pem <span class="hljs-literal">-ca-key</span>=ca<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">-config</span>=ca<span class="hljs-literal">-config</span>.json <span class="hljs-literal">-profile</span>=kubernetes kube<span class="hljs-literal">-apiserver-csr</span>.json | cfssljson <span class="hljs-literal">-bare</span> kube<span class="hljs-literal">-apiserver</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; token.csv &lt;&lt; EOF<br><span class="hljs-variable">$</span>(head <span class="hljs-literal">-c</span> <span class="hljs-number">16</span> /dev/urandom | od <span class="hljs-literal">-An</span> <span class="hljs-literal">-t</span> x | tr <span class="hljs-literal">-d</span> <span class="hljs-string">&#x27; &#x27;</span>),kubelet<span class="hljs-literal">-bootstrap</span>,<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;system:kubelet-bootstrap&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br>创建TLS机制所需TOKEN<br>TLS Bootstraping：Master apiserver启用TLS认证后，Node节点kubelet和kube<span class="hljs-literal">-proxy</span>与kube<span class="hljs-literal">-apiserver</span>进行通信，必须使用CA签发的有效证书才可以，当Node节点很多时，这种客户端证书颁发需要大量工作，同样也会增加集群扩展复杂度。为了简化流程，Kubernetes引入了TLS bootstraping机制来自动颁发客户端证书，kubelet会以一个低权限用户自动向apiserver申请证书，kubelet的证书由apiserver动态签署。所以强烈建议在Node上使用这种方式，目前主要用于kubelet，kube<span class="hljs-literal">-proxy</span>还是由我们统一颁发一个证书。<br></code></pre></td></tr></table></figure><h4 id="2-5-5-3-创建apiserver服务配置文件"><a href="#2-5-5-3-创建apiserver服务配置文件" class="headerlink" title="2.5.5.3 创建apiserver服务配置文件"></a>2.5.5.3 创建apiserver服务配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; /etc/kubernetes/kube<span class="hljs-literal">-apiserver</span>.conf &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>KUBE_APISERVER_OPTS=<span class="hljs-string">&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="hljs-string">  --anonymous-auth=false \</span><br><span class="hljs-string">  --bind-address=192.168.10.12 \</span><br><span class="hljs-string">  --secure-port=6443 \</span><br><span class="hljs-string">  --advertise-address=192.168.10.12 \</span><br><span class="hljs-string">  --insecure-port=0 \</span><br><span class="hljs-string">  --authorization-mode=Node,RBAC \</span><br><span class="hljs-string">  --runtime-config=api/all=true \</span><br><span class="hljs-string">  --enable-bootstrap-token-auth \</span><br><span class="hljs-string">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="hljs-string">  --token-auth-file=/etc/kubernetes/token.csv \</span><br><span class="hljs-string">  --service-node-port-range=30000-32767 \</span><br><span class="hljs-string">  --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="hljs-string">  --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="hljs-string">  --kubelet-client-certificate=/etc/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="hljs-string">  --kubelet-client-key=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">  --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="hljs-string">  --service-account-signing-key-file=/etc/kubernetes/ssl/ca-key.pem  \</span><br><span class="hljs-string">  --service-account-issuer=api \</span><br><span class="hljs-string">  --etcd-cafile=/etc/etcd/ssl/ca.pem \</span><br><span class="hljs-string">  --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span><br><span class="hljs-string">  --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="hljs-string">  --etcd-servers=https://192.168.10.12:2379,https://192.168.10.13:2379,https://192.168.10.14:2379 \</span><br><span class="hljs-string">  --enable-swagger-ui=true \</span><br><span class="hljs-string">  --allow-privileged=true \</span><br><span class="hljs-string">  --apiserver-count=3 \</span><br><span class="hljs-string">  --audit-log-maxage=30 \</span><br><span class="hljs-string">  --audit-log-maxbackup=3 \</span><br><span class="hljs-string">  --audit-log-maxsize=100 \</span><br><span class="hljs-string">  --audit-log-path=/var/log/kube-apiserver-audit.log \</span><br><span class="hljs-string">  --event-ttl=1h \</span><br><span class="hljs-string">  --alsologtostderr=true \</span><br><span class="hljs-string">  --logtostderr=false \</span><br><span class="hljs-string">  --log-dir=/var/log/kubernetes \</span><br><span class="hljs-string">  --v=4&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-5-5-4-创建apiserver服务管理配置文件"><a href="#2-5-5-4-创建apiserver服务管理配置文件" class="headerlink" title="2.5.5.4 创建apiserver服务管理配置文件"></a>2.5.5.4 创建apiserver服务管理配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; /etc/systemd/system/kube<span class="hljs-literal">-apiserver</span>.service &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>[<span class="hljs-type">Unit</span>]<br>Description=Kubernetes API Server<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=etcd.service<br>Wants=etcd.service<br><br>[<span class="hljs-type">Service</span>]<br>EnvironmentFile=-/etc/kubernetes/kube<span class="hljs-literal">-apiserver</span>.conf<br>ExecStart=/usr/local/bin/kube<span class="hljs-literal">-apiserver</span> <span class="hljs-variable">$KUBE_APISERVER_OPTS</span><br>Restart=on<span class="hljs-literal">-failure</span><br>RestartSec=<span class="hljs-number">5</span><br><span class="hljs-built_in">Type</span>=notify<br>LimitNOFILE=<span class="hljs-number">65536</span><br><br>[<span class="hljs-type">Install</span>]<br>WantedBy=multi<span class="hljs-literal">-user</span>.target<br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-5-5-5-同步文件到集群master节点"><a href="#2-5-5-5-同步文件到集群master节点" class="headerlink" title="2.5.5.5 同步文件到集群master节点"></a>2.5.5.5 同步文件到集群master节点</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> ca*.pem /etc/kubernetes/ssl/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-apiserver</span>*.pem /etc/kubernetes/ssl/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> token.csv /etc/kubernetes/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp /etc/kubernetes/token.csv k8s<span class="hljs-literal">-master2</span>:/etc/kubernetes<br>scp /etc/kubernetes/token.csv k8s<span class="hljs-literal">-master3</span>:/etc/kubernetes<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp /etc/kubernetes/ssl/kube<span class="hljs-literal">-apiserver</span>*.pem k8s<span class="hljs-literal">-master2</span>:/etc/kubernetes/ssl<br>scp /etc/kubernetes/ssl/kube<span class="hljs-literal">-apiserver</span>*.pem k8s<span class="hljs-literal">-master3</span>:/etc/kubernetes/ssl<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp /etc/kubernetes/ssl/ca*.pem k8s<span class="hljs-literal">-master2</span>:/etc/kubernetes/ssl<br>scp /etc/kubernetes/ssl/ca*.pem k8s<span class="hljs-literal">-master3</span>:/etc/kubernetes/ssl<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp /etc/kubernetes/kube<span class="hljs-literal">-apiserver</span>.conf k8s<span class="hljs-literal">-master2</span>:/etc/kubernetes/kube<span class="hljs-literal">-apiserver</span>.conf<br><br><span class="hljs-comment"># cat /etc/kubernetes/kube-apiserver.conf</span><br>KUBE_APISERVER_OPTS=<span class="hljs-string">&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="hljs-string">  --anonymous-auth=false \</span><br><span class="hljs-string">  --bind-address=192.168.10.13 \</span><br><span class="hljs-string">  --secure-port=6443 \</span><br><span class="hljs-string">  --advertise-address=192.168.10.13 \</span><br><span class="hljs-string">  --insecure-port=0 \</span><br><span class="hljs-string">  --authorization-mode=Node,RBAC \</span><br><span class="hljs-string">  --runtime-config=api/all=true \</span><br><span class="hljs-string">  --enable-bootstrap-token-auth \</span><br><span class="hljs-string">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="hljs-string">  --token-auth-file=/etc/kubernetes/token.csv \</span><br><span class="hljs-string">  --service-node-port-range=30000-32767 \</span><br><span class="hljs-string">  --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="hljs-string">  --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="hljs-string">  --kubelet-client-certificate=/etc/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="hljs-string">  --kubelet-client-key=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">  --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="hljs-string">  --service-account-signing-key-file=/etc/kubernetes/ssl/ca-key.pem  \</span><br><span class="hljs-string">  --service-account-issuer=api \</span><br><span class="hljs-string">  --etcd-cafile=/etc/etcd/ssl/ca.pem \</span><br><span class="hljs-string">  --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span><br><span class="hljs-string">  --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="hljs-string">  --etcd-servers=https://192.168.10.12:2379,https://192.168.10.13:2379,https://192.168.10.14:2379 \</span><br><span class="hljs-string">  --enable-swagger-ui=true \</span><br><span class="hljs-string">  --allow-privileged=true \</span><br><span class="hljs-string">  --apiserver-count=3 \</span><br><span class="hljs-string">  --audit-log-maxage=30 \</span><br><span class="hljs-string">  --audit-log-maxbackup=3 \</span><br><span class="hljs-string">  --audit-log-maxsize=100 \</span><br><span class="hljs-string">  --audit-log-path=/var/log/kube-apiserver-audit.log \</span><br><span class="hljs-string">  --event-ttl=1h \</span><br><span class="hljs-string">  --alsologtostderr=true \</span><br><span class="hljs-string">  --logtostderr=false \</span><br><span class="hljs-string">  --log-dir=/var/log/kubernetes \</span><br><span class="hljs-string">  --v=4&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> /etc/kubernetes/kube<span class="hljs-literal">-apiserver</span>.conf k8s<span class="hljs-literal">-master3</span>:/etc/kubernetes/kube<span class="hljs-literal">-apiserver</span>.conf<br><br><span class="hljs-comment"># cat /etc/kubernetes/kube-apiserver.conf</span><br>KUBE_APISERVER_OPTS=<span class="hljs-string">&quot;--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \</span><br><span class="hljs-string">  --anonymous-auth=false \</span><br><span class="hljs-string">  --bind-address=192.168.10.14 \</span><br><span class="hljs-string">  --secure-port=6443 \</span><br><span class="hljs-string">  --advertise-address=192.168.10.14 \</span><br><span class="hljs-string">  --insecure-port=0 \</span><br><span class="hljs-string">  --authorization-mode=Node,RBAC \</span><br><span class="hljs-string">  --runtime-config=api/all=true \</span><br><span class="hljs-string">  --enable-bootstrap-token-auth \</span><br><span class="hljs-string">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="hljs-string">  --token-auth-file=/etc/kubernetes/token.csv \</span><br><span class="hljs-string">  --service-node-port-range=30000-32767 \</span><br><span class="hljs-string">  --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem  \</span><br><span class="hljs-string">  --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="hljs-string">  --kubelet-client-certificate=/etc/kubernetes/ssl/kube-apiserver.pem \</span><br><span class="hljs-string">  --kubelet-client-key=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span><br><span class="hljs-string">  --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="hljs-string">  --service-account-signing-key-file=/etc/kubernetes/ssl/ca-key.pem  \</span><br><span class="hljs-string">  --service-account-issuer=api \</span><br><span class="hljs-string">  --etcd-cafile=/etc/etcd/ssl/ca.pem \</span><br><span class="hljs-string">  --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span><br><span class="hljs-string">  --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="hljs-string">  --etcd-servers=https://192.168.10.12:2379,https://192.168.10.13:2379,https://192.168.10.14:2379 \</span><br><span class="hljs-string">  --enable-swagger-ui=true \</span><br><span class="hljs-string">  --allow-privileged=true \</span><br><span class="hljs-string">  --apiserver-count=3 \</span><br><span class="hljs-string">  --audit-log-maxage=30 \</span><br><span class="hljs-string">  --audit-log-maxbackup=3 \</span><br><span class="hljs-string">  --audit-log-maxsize=100 \</span><br><span class="hljs-string">  --audit-log-path=/var/log/kube-apiserver-audit.log \</span><br><span class="hljs-string">  --event-ttl=1h \</span><br><span class="hljs-string">  --alsologtostderr=true \</span><br><span class="hljs-string">  --logtostderr=false \</span><br><span class="hljs-string">  --log-dir=/var/log/kubernetes \</span><br><span class="hljs-string">  --v=4&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp /etc/systemd/system/kube<span class="hljs-literal">-apiserver</span>.service k8s<span class="hljs-literal">-master2</span>:/etc/systemd/system/kube<span class="hljs-literal">-apiserver</span>.service<br><br>scp /etc/systemd/system/kube<span class="hljs-literal">-apiserver</span>.service k8s<span class="hljs-literal">-master3</span>:/etc/systemd/system/kube<span class="hljs-literal">-apiserver</span>.service<br></code></pre></td></tr></table></figure><h4 id="2-5-5-6-启动apiserver服务"><a href="#2-5-5-6-启动apiserver服务" class="headerlink" title="2.5.5.6 启动apiserver服务"></a>2.5.5.6 启动apiserver服务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl daemon<span class="hljs-literal">-reload</span><br>systemctl enable <span class="hljs-literal">--now</span> kube<span class="hljs-literal">-apiserver</span><br><br>systemctl status kube<span class="hljs-literal">-apiserver</span><br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-built_in">curl</span> <span class="hljs-literal">--insecure</span> https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">6443</span>/<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">--insecure</span> https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.13</span>:<span class="hljs-number">6443</span>/<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">--insecure</span> https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.14</span>:<span class="hljs-number">6443</span>/<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">--insecure</span> https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span>:<span class="hljs-number">6443</span>/<br></code></pre></td></tr></table></figure><h3 id="2-5-6-部署kubectl"><a href="#2-5-6-部署kubectl" class="headerlink" title="2.5.6 部署kubectl"></a>2.5.6 部署kubectl</h3><h4 id="2-5-6-1-创建kubectl证书请求文件"><a href="#2-5-6-1-创建kubectl证书请求文件" class="headerlink" title="2.5.6.1 创建kubectl证书请求文件"></a>2.5.6.1 创建kubectl证书请求文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; admin<span class="hljs-literal">-csr</span>.json &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:masters&quot;</span>,             <br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br><br>后续 kube<span class="hljs-literal">-apiserver</span> 使用 RBAC 对客户端(如 kubelet、kube<span class="hljs-literal">-proxy</span>、Pod)请求进行授权；<br>kube<span class="hljs-literal">-apiserver</span> 预定义了一些 RBAC 使用的 RoleBindings，如 cluster<span class="hljs-literal">-admin</span> 将 <span class="hljs-built_in">Group</span> system:masters 与 Role cluster<span class="hljs-literal">-admin</span> 绑定，该 Role 授予了调用kube<span class="hljs-literal">-apiserver</span> 的所有 API的权限；<br>O指定该证书的 <span class="hljs-built_in">Group</span> 为 system:masters，kubelet 使用该证书访问 kube<span class="hljs-literal">-apiserver</span> 时 ，由于证书被 CA 签名，所以认证通过，同时由于证书用户组为经过预授权的 system:masters，所以被授予访问所有 API 的权限；<br>注：<br>这个admin 证书，是将来生成管理员用的kubeconfig 配置文件用的，现在我们一般建议使用RBAC 来对kubernetes 进行角色权限控制， kubernetes 将证书中的CN 字段 作为User， O 字段作为 <span class="hljs-built_in">Group</span>；<br><span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:masters&quot;</span>, 必须是system:masters，否则后面kubectl create clusterrolebinding报错。<br></code></pre></td></tr></table></figure><h4 id="2-5-6-2-生成证书文件"><a href="#2-5-6-2-生成证书文件" class="headerlink" title="2.5.6.2 生成证书文件"></a>2.5.6.2 生成证书文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cfssl gencert <span class="hljs-literal">-ca</span>=ca.pem <span class="hljs-literal">-ca-key</span>=ca<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">-config</span>=ca<span class="hljs-literal">-config</span>.json <span class="hljs-literal">-profile</span>=kubernetes admin<span class="hljs-literal">-csr</span>.json | cfssljson <span class="hljs-literal">-bare</span> admin<br></code></pre></td></tr></table></figure><h4 id="2-5-6-3-复制文件到指定目录"><a href="#2-5-6-3-复制文件到指定目录" class="headerlink" title="2.5.6.3 复制文件到指定目录"></a>2.5.6.3 复制文件到指定目录</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> admin*.pem /etc/kubernetes/ssl/<br></code></pre></td></tr></table></figure><h4 id="2-5-6-4-生成kubeconfig配置文件"><a href="#2-5-6-4-生成kubeconfig配置文件" class="headerlink" title="2.5.6.4 生成kubeconfig配置文件"></a>2.5.6.4 生成kubeconfig配置文件</h4><p>kube.config 为 kubectl 的配置文件，包含访问 apiserver 的所有信息，如 apiserver 地址、CA 证书和自身使用的证书</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl config <span class="hljs-built_in">set-cluster</span> kubernetes <span class="hljs-literal">--certificate-authority</span>=ca.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--server</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span>:<span class="hljs-number">6443</span> <span class="hljs-literal">--kubeconfig</span>=kube.config<br><br>kubectl config <span class="hljs-built_in">set-credentials</span> admin <span class="hljs-literal">--client-certificate</span>=admin.pem <span class="hljs-literal">--client-key</span>=admin<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--kubeconfig</span>=kube.config<br><br>kubectl config <span class="hljs-built_in">set-context</span> kubernetes <span class="hljs-literal">--cluster</span>=kubernetes <span class="hljs-literal">--user</span>=admin <span class="hljs-literal">--kubeconfig</span>=kube.config<br><br>kubectl config <span class="hljs-built_in">use-context</span> kubernetes <span class="hljs-literal">--kubeconfig</span>=kube.config<br></code></pre></td></tr></table></figure><h4 id="2-5-6-5-准备kubectl配置文件并进行角色绑定"><a href="#2-5-6-5-准备kubectl配置文件并进行角色绑定" class="headerlink" title="2.5.6.5 准备kubectl配置文件并进行角色绑定"></a>2.5.6.5 准备kubectl配置文件并进行角色绑定</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir ~/.kube<br><span class="hljs-built_in">cp</span> kube.config ~/.kube/config<br>kubectl create clusterrolebinding kube<span class="hljs-literal">-apiserver</span>:kubelet<span class="hljs-literal">-apis</span> <span class="hljs-literal">--clusterrole</span>=system:kubelet<span class="hljs-literal">-api-admin</span> <span class="hljs-literal">--user</span> kubernetes <span class="hljs-literal">--kubeconfig</span>=/root/.kube/config<br></code></pre></td></tr></table></figure><h4 id="2-5-6-6-查看集群状态"><a href="#2-5-6-6-查看集群状态" class="headerlink" title="2.5.6.6 查看集群状态"></a>2.5.6.6 查看集群状态</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">export KUBECONFIG=<span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">查看集群信息<br>kubectl cluster<span class="hljs-literal">-info</span><br><br>查看集群组件状态<br>kubectl get componentstatuses<br><br>查看命名空间中资源对象<br>kubectl get all <span class="hljs-literal">--all-namespaces</span><br></code></pre></td></tr></table></figure><h4 id="2-5-6-7-同步kubectl配置文件到集群其它master节点"><a href="#2-5-6-7-同步kubectl配置文件到集群其它master节点" class="headerlink" title="2.5.6.7 同步kubectl配置文件到集群其它master节点"></a>2.5.6.7 同步kubectl配置文件到集群其它master节点</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">k8s<span class="hljs-literal">-master2</span>:<br>mkdir /root/.kube<br><br>k8s<span class="hljs-literal">-master3</span>:<br>mkdir /root/.kube<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp /root/.kube/config k8s<span class="hljs-literal">-master2</span>:/root/.kube/config<br>scp /root/.kube/config k8s<span class="hljs-literal">-master3</span>:/root/.kube/config<br></code></pre></td></tr></table></figure><h4 id="2-5-6-8-配置kubectl命令补全-可选"><a href="#2-5-6-8-配置kubectl命令补全-可选" class="headerlink" title="2.5.6.8 配置kubectl命令补全(可选)"></a>2.5.6.8 配置kubectl命令补全(可选)</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">yum install <span class="hljs-literal">-y</span> bash<span class="hljs-literal">-completion</span><br>source /usr/share/bash<span class="hljs-literal">-completion</span>/bash_completion<br>source &lt;(kubectl completion bash)<br>kubectl completion bash &gt; ~/.kube/completion.bash.inc<br>source <span class="hljs-string">&#x27;/root/.kube/completion.bash.inc&#x27;</span>  <br>source <span class="hljs-variable">$HOME</span>/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="2-5-7-部署kube-controller-manager"><a href="#2-5-7-部署kube-controller-manager" class="headerlink" title="2.5.7  部署kube-controller-manager"></a>2.5.7  部署kube-controller-manager</h3><h4 id="2-5-7-1-创建kube-controller-manager证书请求文件"><a href="#2-5-7-1-创建kube-controller-manager证书请求文件" class="headerlink" title="2.5.7.1 创建kube-controller-manager证书请求文件"></a>2.5.7.1 创建kube-controller-manager证书请求文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-controller-manager-csr</span>.json &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>    &#125;,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [<br>      <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.10.12&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.10.13&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.10.14&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>        <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>        <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>        <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>        <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>      &#125;<br>    ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br><br>hosts 列表包含所有 kube<span class="hljs-literal">-controller-manager</span> 节点 IP；<br>CN 为 system:kube<span class="hljs-literal">-controller-manager</span>;<br>O 为 system:kube<span class="hljs-literal">-controller-manager</span>，kubernetes 内置的 ClusterRoleBindings system:kube<span class="hljs-literal">-controller-manager</span> 赋予 kube<span class="hljs-literal">-controller-manager</span> 工作所需的权限<br></code></pre></td></tr></table></figure><h4 id="2-5-7-2-创建kube-controller-manager证书文件"><a href="#2-5-7-2-创建kube-controller-manager证书文件" class="headerlink" title="2.5.7.2 创建kube-controller-manager证书文件"></a>2.5.7.2 创建kube-controller-manager证书文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cfssl gencert <span class="hljs-literal">-ca</span>=ca.pem <span class="hljs-literal">-ca-key</span>=ca<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">-config</span>=ca<span class="hljs-literal">-config</span>.json <span class="hljs-literal">-profile</span>=kubernetes kube<span class="hljs-literal">-controller-manager-csr</span>.json | cfssljson <span class="hljs-literal">-bare</span> kube<span class="hljs-literal">-controller-manager</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls</span><br><br>kube<span class="hljs-literal">-controller-manager</span>.csr     <br>kube<span class="hljs-literal">-controller-manager-csr</span>.json<br>kube<span class="hljs-literal">-controller-manager-key</span>.pem<br>kube<span class="hljs-literal">-controller-manager</span>.pem<br></code></pre></td></tr></table></figure><h4 id="2-5-7-3-创建kube-controller-manager的kube-controller-manager-kubeconfig"><a href="#2-5-7-3-创建kube-controller-manager的kube-controller-manager-kubeconfig" class="headerlink" title="2.5.7.3  创建kube-controller-manager的kube-controller-manager.kubeconfig"></a>2.5.7.3  创建kube-controller-manager的kube-controller-manager.kubeconfig</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl config <span class="hljs-built_in">set-cluster</span> kubernetes <span class="hljs-literal">--certificate-authority</span>=ca.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--server</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span>:<span class="hljs-number">6443</span> <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-controller-manager</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">set-credentials</span> system:kube<span class="hljs-literal">-controller-manager</span> <span class="hljs-literal">--client-certificate</span>=kube<span class="hljs-literal">-controller-manager</span>.pem <span class="hljs-literal">--client-key</span>=kube<span class="hljs-literal">-controller-manager-key</span>.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-controller-manager</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">set-context</span> system:kube<span class="hljs-literal">-controller-manager</span> <span class="hljs-literal">--cluster</span>=kubernetes <span class="hljs-literal">--user</span>=system:kube<span class="hljs-literal">-controller-manager</span> <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-controller-manager</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">use-context</span> system:kube<span class="hljs-literal">-controller-manager</span> <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-controller-manager</span>.kubeconfig<br></code></pre></td></tr></table></figure><h4 id="2-5-7-4-创建kube-controller-manager配置文件"><a href="#2-5-7-4-创建kube-controller-manager配置文件" class="headerlink" title="2.5.7.4 创建kube-controller-manager配置文件"></a>2.5.7.4 创建kube-controller-manager配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-controller-manager</span>.conf &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>KUBE_CONTROLLER_MANAGER_OPTS=<span class="hljs-string">&quot;--port=10252 \</span><br><span class="hljs-string">  --secure-port=10257 \</span><br><span class="hljs-string">  --bind-address=127.0.0.1 \</span><br><span class="hljs-string">  --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="hljs-string">  --service-cluster-ip-range=10.96.0.0/16 \</span><br><span class="hljs-string">  --cluster-name=kubernetes \</span><br><span class="hljs-string">  --cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="hljs-string">  --cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="hljs-string">  --allocate-node-cidrs=true \</span><br><span class="hljs-string">  --cluster-cidr=10.244.0.0/16 \</span><br><span class="hljs-string">  --experimental-cluster-signing-duration=87600h \</span><br><span class="hljs-string">  --root-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="hljs-string">  --service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="hljs-string">  --leader-elect=true \</span><br><span class="hljs-string">  --feature-gates=RotateKubeletServerCertificate=true \</span><br><span class="hljs-string">  --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="hljs-string">  --horizontal-pod-autoscaler-use-rest-clients=true \</span><br><span class="hljs-string">  --horizontal-pod-autoscaler-sync-period=10s \</span><br><span class="hljs-string">  --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \</span><br><span class="hljs-string">  --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \</span><br><span class="hljs-string">  --use-service-account-credentials=true \</span><br><span class="hljs-string">  --alsologtostderr=true \</span><br><span class="hljs-string">  --logtostderr=false \</span><br><span class="hljs-string">  --log-dir=/var/log/kubernetes \</span><br><span class="hljs-string">  --v=2&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-5-7-5-创建服务启动文件"><a href="#2-5-7-5-创建服务启动文件" class="headerlink" title="2.5.7.5 创建服务启动文件"></a>2.5.7.5 创建服务启动文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-controller-manager</span>.service &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>[<span class="hljs-type">Unit</span>]<br>Description=Kubernetes Controller Manager<br>Documentation=https://github.com/kubernetes/kubernetes<br><br>[<span class="hljs-type">Service</span>]<br>EnvironmentFile=-/etc/kubernetes/kube<span class="hljs-literal">-controller-manager</span>.conf<br>ExecStart=/usr/local/bin/kube<span class="hljs-literal">-controller-manager</span> <span class="hljs-variable">$KUBE_CONTROLLER_MANAGER_OPTS</span><br>Restart=on<span class="hljs-literal">-failure</span><br>RestartSec=<span class="hljs-number">5</span><br><br>[<span class="hljs-type">Install</span>]<br>WantedBy=multi<span class="hljs-literal">-user</span>.target<br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-5-7-6-同步文件到集群master节点"><a href="#2-5-7-6-同步文件到集群master节点" class="headerlink" title="2.5.7.6 同步文件到集群master节点"></a>2.5.7.6 同步文件到集群master节点</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-controller-manager</span>*.pem /etc/kubernetes/ssl/<br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-controller-manager</span>.kubeconfig /etc/kubernetes/<br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-controller-manager</span>.conf /etc/kubernetes/<br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-controller-manager</span>.service /usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp  kube<span class="hljs-literal">-controller-manager</span>*.pem k8s<span class="hljs-literal">-master2</span>:/etc/kubernetes/ssl/<br>scp  kube<span class="hljs-literal">-controller-manager</span>*.pem k8s<span class="hljs-literal">-master3</span>:/etc/kubernetes/ssl/<br>scp  kube<span class="hljs-literal">-controller-manager</span>.kubeconfig kube<span class="hljs-literal">-controller-manager</span>.conf k8s<span class="hljs-literal">-master2</span>:/etc/kubernetes/<br>scp  kube<span class="hljs-literal">-controller-manager</span>.kubeconfig kube<span class="hljs-literal">-controller-manager</span>.conf k8s<span class="hljs-literal">-master3</span>:/etc/kubernetes/<br>scp  kube<span class="hljs-literal">-controller-manager</span>.service k8s<span class="hljs-literal">-master2</span>:/usr/lib/systemd/system/<br>scp  kube<span class="hljs-literal">-controller-manager</span>.service k8s<span class="hljs-literal">-master3</span>:/usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#查看证书</span><br>openssl x509 <span class="hljs-operator">-in</span> /etc/kubernetes/ssl/kube<span class="hljs-literal">-controller-manager</span>.pem <span class="hljs-literal">-noout</span> <span class="hljs-literal">-text</span><br></code></pre></td></tr></table></figure><h4 id="2-5-7-7-启动服务"><a href="#2-5-7-7-启动服务" class="headerlink" title="2.5.7.7 启动服务"></a>2.5.7.7 启动服务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl daemon<span class="hljs-literal">-reload</span> <br>systemctl enable <span class="hljs-literal">--now</span> kube<span class="hljs-literal">-controller-manager</span><br>systemctl status kube<span class="hljs-literal">-controller-manager</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl get componentstatuses<br></code></pre></td></tr></table></figure><h3 id="2-5-8-部署kube-scheduler"><a href="#2-5-8-部署kube-scheduler" class="headerlink" title="2.5.8 部署kube-scheduler"></a>2.5.8 部署kube-scheduler</h3><h4 id="2-5-8-1-创建kube-scheduler证书请求文件"><a href="#2-5-8-1-创建kube-scheduler证书请求文件" class="headerlink" title="2.5.8.1 创建kube-scheduler证书请求文件"></a>2.5.8.1 创建kube-scheduler证书请求文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-scheduler-csr</span>.json &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>: [<br>      <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.10.12&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.10.13&quot;</span>,<br>      <span class="hljs-string">&quot;192.168.10.14&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>        <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>        <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>        <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>        <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;system&quot;</span><br>      &#125;<br>    ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-5-8-2-生成kube-scheduler证书"><a href="#2-5-8-2-生成kube-scheduler证书" class="headerlink" title="2.5.8.2 生成kube-scheduler证书"></a>2.5.8.2 生成kube-scheduler证书</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cfssl gencert <span class="hljs-literal">-ca</span>=ca.pem <span class="hljs-literal">-ca-key</span>=ca<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">-config</span>=ca<span class="hljs-literal">-config</span>.json <span class="hljs-literal">-profile</span>=kubernetes kube<span class="hljs-literal">-scheduler-csr</span>.json | cfssljson <span class="hljs-literal">-bare</span> kube<span class="hljs-literal">-scheduler</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls</span><br>kube<span class="hljs-literal">-scheduler</span>.csr<br>kube<span class="hljs-literal">-scheduler-csr</span>.json<br>kube<span class="hljs-literal">-scheduler-key</span>.pem<br>kube<span class="hljs-literal">-scheduler</span>.pem<br></code></pre></td></tr></table></figure><h4 id="2-5-8-3-创建kube-scheduler的kubeconfig"><a href="#2-5-8-3-创建kube-scheduler的kubeconfig" class="headerlink" title="2.5.8.3 创建kube-scheduler的kubeconfig"></a>2.5.8.3 创建kube-scheduler的kubeconfig</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl config <span class="hljs-built_in">set-cluster</span> kubernetes <span class="hljs-literal">--certificate-authority</span>=ca.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--server</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span>:<span class="hljs-number">6443</span> <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-scheduler</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">set-credentials</span> system:kube<span class="hljs-literal">-scheduler</span> <span class="hljs-literal">--client-certificate</span>=kube<span class="hljs-literal">-scheduler</span>.pem <span class="hljs-literal">--client-key</span>=kube<span class="hljs-literal">-scheduler-key</span>.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-scheduler</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">set-context</span> system:kube<span class="hljs-literal">-scheduler</span> <span class="hljs-literal">--cluster</span>=kubernetes <span class="hljs-literal">--user</span>=system:kube<span class="hljs-literal">-scheduler</span> <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-scheduler</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">use-context</span> system:kube<span class="hljs-literal">-scheduler</span> <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-scheduler</span>.kubeconfig<br></code></pre></td></tr></table></figure><h4 id="2-5-8-4-创建服务配置文件"><a href="#2-5-8-4-创建服务配置文件" class="headerlink" title="2.5.8.4 创建服务配置文件"></a>2.5.8.4 创建服务配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-scheduler</span>.conf &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>KUBE_SCHEDULER_OPTS=<span class="hljs-string">&quot;--address=127.0.0.1 \</span><br><span class="hljs-string">--kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="hljs-string">--leader-elect=true \</span><br><span class="hljs-string">--alsologtostderr=true \</span><br><span class="hljs-string">--logtostderr=false \</span><br><span class="hljs-string">--log-dir=/var/log/kubernetes \</span><br><span class="hljs-string">--v=2&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-5-8-5创建服务启动配置文件"><a href="#2-5-8-5创建服务启动配置文件" class="headerlink" title="2.5.8.5创建服务启动配置文件"></a>2.5.8.5创建服务启动配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-scheduler</span>.service &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>[<span class="hljs-type">Unit</span>]<br>Description=Kubernetes Scheduler<br>Documentation=https://github.com/kubernetes/kubernetes<br><br>[<span class="hljs-type">Service</span>]<br>EnvironmentFile=-/etc/kubernetes/kube<span class="hljs-literal">-scheduler</span>.conf<br>ExecStart=/usr/local/bin/kube<span class="hljs-literal">-scheduler</span> <span class="hljs-variable">$KUBE_SCHEDULER_OPTS</span><br>Restart=on<span class="hljs-literal">-failure</span><br>RestartSec=<span class="hljs-number">5</span><br><br>[<span class="hljs-type">Install</span>]<br>WantedBy=multi<span class="hljs-literal">-user</span>.target<br>EOF<br></code></pre></td></tr></table></figure><h4 id="2-5-8-6-同步文件至集群master节点"><a href="#2-5-8-6-同步文件至集群master节点" class="headerlink" title="2.5.8.6 同步文件至集群master节点"></a>2.5.8.6 同步文件至集群master节点</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-scheduler</span>*.pem /etc/kubernetes/ssl/<br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-scheduler</span>.kubeconfig /etc/kubernetes/<br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-scheduler</span>.conf /etc/kubernetes/<br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-scheduler</span>.service /usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">scp  kube<span class="hljs-literal">-scheduler</span>*.pem k8s<span class="hljs-literal">-master2</span>:/etc/kubernetes/ssl/<br>scp  kube<span class="hljs-literal">-scheduler</span>*.pem k8s<span class="hljs-literal">-master3</span>:/etc/kubernetes/ssl/<br>scp  kube<span class="hljs-literal">-scheduler</span>.kubeconfig kube<span class="hljs-literal">-scheduler</span>.conf k8s<span class="hljs-literal">-master2</span>:/etc/kubernetes/<br>scp  kube<span class="hljs-literal">-scheduler</span>.kubeconfig kube<span class="hljs-literal">-scheduler</span>.conf k8s<span class="hljs-literal">-master3</span>:/etc/kubernetes/<br>scp  kube<span class="hljs-literal">-scheduler</span>.service k8s<span class="hljs-literal">-master2</span>:/usr/lib/systemd/system/<br>scp  kube<span class="hljs-literal">-scheduler</span>.service k8s<span class="hljs-literal">-master3</span>:/usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><h4 id="2-5-8-7-启动服务"><a href="#2-5-8-7-启动服务" class="headerlink" title="2.5.8.7 启动服务"></a>2.5.8.7 启动服务</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl daemon<span class="hljs-literal">-reload</span><br>systemctl enable <span class="hljs-literal">--now</span> kube<span class="hljs-literal">-scheduler</span><br>systemctl status kube<span class="hljs-literal">-scheduler</span><br></code></pre></td></tr></table></figure><h3 id="2-5-9-工作节点（worker-node）部署"><a href="#2-5-9-工作节点（worker-node）部署" class="headerlink" title="2.5.9 工作节点（worker node）部署"></a>2.5.9 工作节点（worker node）部署</h3><h4 id="2-5-9-1-Containerd安装及配置"><a href="#2-5-9-1-Containerd安装及配置" class="headerlink" title="2.5.9.1 Containerd安装及配置"></a>2.5.9.1 Containerd安装及配置</h4><h5 id="2-5-9-1-1-获取软件包"><a href="#2-5-9-1-1-获取软件包" class="headerlink" title="2.5.9.1.1 获取软件包"></a>2.5.9.1.1 获取软件包</h5><p>![image-20220321233643232](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220321233643232.png)</p><p>![image-20220321233718744](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220321233718744.png)</p><p>![image-20220321233751488](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220321233751488.png)</p><p>![image-20220321233903747](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220321233903747.png)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> https://github.com/containerd/containerd/releases/download/v1.<span class="hljs-number">6.1</span>/cri<span class="hljs-literal">-containerd-cni-1</span>.<span class="hljs-number">6.1</span><span class="hljs-literal">-linux-amd64</span>.tar.gz<br></code></pre></td></tr></table></figure><h5 id="2-5-9-1-2-安装containerd"><a href="#2-5-9-1-2-安装containerd" class="headerlink" title="2.5.9.1.2 安装containerd"></a>2.5.9.1.2 安装containerd</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tar <span class="hljs-literal">-xf</span> cri<span class="hljs-literal">-containerd-cni-1</span>.<span class="hljs-number">6.1</span><span class="hljs-literal">-linux-amd64</span>.tar.gz <span class="hljs-literal">-C</span> /<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">默认解压后会有如下目录：<br>etc<br>opt<br>usr<br>会把对应的目解压到/下对应目录中，这样就省去复制文件步骤。<br></code></pre></td></tr></table></figure><h5 id="2-5-9-1-3-生成配置文件并修改"><a href="#2-5-9-1-3-生成配置文件并修改" class="headerlink" title="2.5.9.1.3 生成配置文件并修改"></a>2.5.9.1.3 生成配置文件并修改</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir /etc/containerd<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">containerd config default &gt;/etc/containerd/config.toml<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls /etc/containerd/</span><br>config.toml<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">下面的配置文件中已修改，可不执行，仅修改默认时执行。<br>sed <span class="hljs-literal">-i</span> <span class="hljs-string">&#x27;s@systemd_cgroup = false@systemd_cgroup = true@&#x27;</span> /etc/containerd/config.toml<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">下面的配置文件中已修改，可不执行，仅修改默认时执行。<br>sed <span class="hljs-literal">-i</span> <span class="hljs-string">&#x27;s@k8s.gcr.io/pause:3.6@registry.aliyuncs.com/google_containers/pause:3.6@&#x27;</span> /etc/containerd/config.toml<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># cat &gt;/etc/containerd/config.toml&lt;&lt;EOF</span><br>root = <span class="hljs-string">&quot;/var/lib/containerd&quot;</span><br>state = <span class="hljs-string">&quot;/run/containerd&quot;</span><br>oom_score = <span class="hljs-literal">-999</span><br><br>[<span class="hljs-type">grpc</span>]<br>  address = <span class="hljs-string">&quot;/run/containerd/containerd.sock&quot;</span><br>  uid = <span class="hljs-number">0</span><br>  gid = <span class="hljs-number">0</span><br>  max_recv_message_size = <span class="hljs-number">16777216</span><br>  max_send_message_size = <span class="hljs-number">16777216</span><br><br>[<span class="hljs-type">debug</span>]<br>  address = <span class="hljs-string">&quot;&quot;</span><br>  uid = <span class="hljs-number">0</span><br>  gid = <span class="hljs-number">0</span><br>  level = <span class="hljs-string">&quot;&quot;</span><br><br>[<span class="hljs-type">metrics</span>]<br>  address = <span class="hljs-string">&quot;&quot;</span><br>  grpc_histogram = false<br><br>[<span class="hljs-type">cgroup</span>]<br>  path = <span class="hljs-string">&quot;&quot;</span><br><br>[<span class="hljs-type">plugins</span>]<br>  [<span class="hljs-type">plugins.cgroups</span>]<br>    no_prometheus = false<br>  [<span class="hljs-type">plugins.cri</span>]<br>    stream_server_address = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>    stream_server_port = <span class="hljs-string">&quot;0&quot;</span><br>    enable_selinux = false<br>    sandbox_image = <span class="hljs-string">&quot;registry.aliyuncs.com/google_containers/pause:3.6&quot;</span><br>    stats_collect_period = <span class="hljs-number">10</span><br>    systemd_cgroup = true<br>    enable_tls_streaming = false<br>    max_container_log_line_size = <span class="hljs-number">16384</span><br>    [<span class="hljs-type">plugins.cri.containerd</span>]<br>      snapshotter = <span class="hljs-string">&quot;overlayfs&quot;</span><br>      no_pivot = false<br>      [<span class="hljs-type">plugins.cri.containerd.default_runtime</span>]<br>        runtime_type = <span class="hljs-string">&quot;io.containerd.runtime.v1.linux&quot;</span><br>        runtime_engine = <span class="hljs-string">&quot;&quot;</span><br>        runtime_root = <span class="hljs-string">&quot;&quot;</span><br>      [<span class="hljs-type">plugins.cri.containerd.untrusted_workload_runtime</span>]<br>        runtime_type = <span class="hljs-string">&quot;&quot;</span><br>        runtime_engine = <span class="hljs-string">&quot;&quot;</span><br>        runtime_root = <span class="hljs-string">&quot;&quot;</span><br>    [<span class="hljs-type">plugins.cri.cni</span>]<br>      bin_dir = <span class="hljs-string">&quot;/opt/cni/bin&quot;</span><br>      conf_dir = <span class="hljs-string">&quot;/etc/cni/net.d&quot;</span><br>      conf_template = <span class="hljs-string">&quot;/etc/cni/net.d/10-default.conf&quot;</span><br>    [<span class="hljs-type">plugins.cri.registry</span>]<br>      [<span class="hljs-type">plugins.cri.registry.mirrors</span>]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;docker.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>            <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;gcr.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://gcr.mirrors.ustc.edu.cn&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;k8s.gcr.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://gcr.mirrors.ustc.edu.cn/google-containers/&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;quay.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://quay.mirrors.ustc.edu.cn&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;harbor.kubemsb.com&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;http://harbor.kubemsb.com&quot;</span><br>          ]<br>    [<span class="hljs-type">plugins.cri.x509_key_pair_streaming</span>]<br>      tls_cert_file = <span class="hljs-string">&quot;&quot;</span><br>      tls_key_file = <span class="hljs-string">&quot;&quot;</span><br>  [<span class="hljs-type">plugins.diff</span>-<span class="hljs-type">service</span>]<br>    default = [<span class="hljs-string">&quot;walking&quot;</span>]<br>  [<span class="hljs-type">plugins.linux</span>]<br>    shim = <span class="hljs-string">&quot;containerd-shim&quot;</span><br>    runtime = <span class="hljs-string">&quot;runc&quot;</span><br>    runtime_root = <span class="hljs-string">&quot;&quot;</span><br>    no_shim = false<br>    shim_debug = false<br>  [<span class="hljs-type">plugins.opt</span>]<br>    path = <span class="hljs-string">&quot;/opt/containerd&quot;</span><br>  [<span class="hljs-type">plugins.restart</span>]<br>    interval = <span class="hljs-string">&quot;10s&quot;</span><br>  [<span class="hljs-type">plugins.scheduler</span>]<br>    pause_threshold = <span class="hljs-number">0.02</span><br>    deletion_threshold = <span class="hljs-number">0</span><br>    mutation_threshold = <span class="hljs-number">100</span><br>    schedule_delay = <span class="hljs-string">&quot;0s&quot;</span><br>    startup_delay = <span class="hljs-string">&quot;100ms&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><h5 id="2-5-9-1-4-安装runc"><a href="#2-5-9-1-4-安装runc" class="headerlink" title="2.5.9.1.4 安装runc"></a>2.5.9.1.4 安装runc</h5><blockquote><p>由于上述软件包中包含的runc对系统依赖过多，所以建议单独下载安装。</p><p>默认runc执行时提示：runc: symbol lookup error: runc: undefined symbol: seccomp_notify_respond</p></blockquote><p>![image-20220322003721996](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220322003721996.png)</p><p>![image-20220322003759560](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220322003759560.png)</p><p>![image-20220322003823362](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220322003823362.png)</p><p>![image-20220322003942106](Kubernetes高可用集群二进制部署（Runtime Containerd）.assets&#x2F;image-20220322003942106.png)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> https://github.com/opencontainers/runc/releases/download/v1.<span class="hljs-number">1.0</span>/runc.amd64<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">chmod +x runc.amd64<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">替换掉原软件包中的runc<br><br><span class="hljs-built_in">mv</span> runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># runc -v</span><br>runc version <span class="hljs-number">1.1</span>.<span class="hljs-number">0</span><br>commit: v1.<span class="hljs-number">1.0</span><span class="hljs-literal">-0-g067aaf85</span><br>spec: <span class="hljs-number">1.0</span>.<span class="hljs-number">2</span><span class="hljs-literal">-dev</span><br>go: go1.<span class="hljs-number">17.6</span><br>libseccomp: <span class="hljs-number">2.5</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl enable containerd<br>systemctl <span class="hljs-built_in">start</span> containerd<br></code></pre></td></tr></table></figure><h4 id="2-5-9-2-部署kubelet"><a href="#2-5-9-2-部署kubelet" class="headerlink" title="2.5.9.2 部署kubelet"></a>2.5.9.2 部署kubelet</h4><blockquote><p>在k8s-master1上操作</p></blockquote><h5 id="2-5-9-2-1-创建kubelet-bootstrap-kubeconfig"><a href="#2-5-9-2-1-创建kubelet-bootstrap-kubeconfig" class="headerlink" title="2.5.9.2.1 创建kubelet-bootstrap.kubeconfig"></a>2.5.9.2.1 创建kubelet-bootstrap.kubeconfig</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">BOOTSTRAP_TOKEN=<span class="hljs-variable">$</span>(awk <span class="hljs-operator">-F</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> /etc/kubernetes/token.csv)<br><br>kubectl config <span class="hljs-built_in">set-cluster</span> kubernetes <span class="hljs-literal">--certificate-authority</span>=ca.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--server</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span>:<span class="hljs-number">6443</span> <span class="hljs-literal">--kubeconfig</span>=kubelet<span class="hljs-literal">-bootstrap</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">set-credentials</span> kubelet<span class="hljs-literal">-bootstrap</span> <span class="hljs-literal">--token</span>=<span class="hljs-variable">$</span>&#123;BOOTSTRAP_TOKEN&#125; <span class="hljs-literal">--kubeconfig</span>=kubelet<span class="hljs-literal">-bootstrap</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">set-context</span> default <span class="hljs-literal">--cluster</span>=kubernetes <span class="hljs-literal">--user</span>=kubelet<span class="hljs-literal">-bootstrap</span> <span class="hljs-literal">--kubeconfig</span>=kubelet<span class="hljs-literal">-bootstrap</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">use-context</span> default <span class="hljs-literal">--kubeconfig</span>=kubelet<span class="hljs-literal">-bootstrap</span>.kubeconfig<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl create clusterrolebinding cluster<span class="hljs-literal">-system-anonymous</span> <span class="hljs-literal">--clusterrole</span>=cluster<span class="hljs-literal">-admin</span> <span class="hljs-literal">--user</span>=kubelet<span class="hljs-literal">-bootstrap</span><br><br>kubectl create clusterrolebinding kubelet<span class="hljs-literal">-bootstrap</span> <span class="hljs-literal">--clusterrole</span>=system:node<span class="hljs-literal">-bootstrapper</span> <span class="hljs-literal">--user</span>=kubelet<span class="hljs-literal">-bootstrap</span> <span class="hljs-literal">--kubeconfig</span>=kubelet<span class="hljs-literal">-bootstrap</span>.kubeconfig<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl describe clusterrolebinding cluster<span class="hljs-literal">-system-anonymous</span><br><br>kubectl describe clusterrolebinding kubelet<span class="hljs-literal">-bootstrap</span><br></code></pre></td></tr></table></figure><h5 id="2-5-9-2-2-创建kubelet配置文件"><a href="#2-5-9-2-2-创建kubelet配置文件" class="headerlink" title="2.5.9.2.2 创建kubelet配置文件"></a>2.5.9.2.2 创建kubelet配置文件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kubelet.json &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;KubeletConfiguration&quot;</span>,<br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;kubelet.config.k8s.io/v1beta1&quot;</span>,<br>  <span class="hljs-string">&quot;authentication&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;x509&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;clientCAFile&quot;</span>: <span class="hljs-string">&quot;/etc/kubernetes/ssl/ca.pem&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;webhook&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;enabled&quot;</span>: true,<br>      <span class="hljs-string">&quot;cacheTTL&quot;</span>: <span class="hljs-string">&quot;2m0s&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;anonymous&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;enabled&quot;</span>: false<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;authorization&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;mode&quot;</span>: <span class="hljs-string">&quot;Webhook&quot;</span>,<br>    <span class="hljs-string">&quot;webhook&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;cacheAuthorizedTTL&quot;</span>: <span class="hljs-string">&quot;5m0s&quot;</span>,<br>      <span class="hljs-string">&quot;cacheUnauthorizedTTL&quot;</span>: <span class="hljs-string">&quot;30s&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;192.168.10.12&quot;</span>,<br>  <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">10250</span>,<br>  <span class="hljs-string">&quot;readOnlyPort&quot;</span>: <span class="hljs-number">10255</span>,<br>  <span class="hljs-string">&quot;cgroupDriver&quot;</span>: <span class="hljs-string">&quot;systemd&quot;</span>,                    <br>  <span class="hljs-string">&quot;hairpinMode&quot;</span>: <span class="hljs-string">&quot;promiscuous-bridge&quot;</span>,<br>  <span class="hljs-string">&quot;serializeImagePulls&quot;</span>: false,<br>  <span class="hljs-string">&quot;clusterDomain&quot;</span>: <span class="hljs-string">&quot;cluster.local.&quot;</span>,<br>  <span class="hljs-string">&quot;clusterDNS&quot;</span>: [<span class="hljs-string">&quot;10.96.0.2&quot;</span>]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h5 id="2-5-9-2-3-创建kubelet服务启动管理文件"><a href="#2-5-9-2-3-创建kubelet服务启动管理文件" class="headerlink" title="2.5.9.2.3 创建kubelet服务启动管理文件"></a>2.5.9.2.3 创建kubelet服务启动管理文件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kubelet.service &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>[<span class="hljs-type">Unit</span>]<br>Description=Kubernetes Kubelet<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=docker.service<br>Requires=docker.service<br><br>[<span class="hljs-type">Service</span>]<br>WorkingDirectory=/var/lib/kubelet<br>ExecStart=/usr/local/bin/kubelet \<br>  <span class="hljs-literal">--bootstrap-kubeconfig</span>=/etc/kubernetes/kubelet<span class="hljs-literal">-bootstrap</span>.kubeconfig \<br>  <span class="hljs-literal">--cert-dir</span>=/etc/kubernetes/ssl \<br>  <span class="hljs-literal">--kubeconfig</span>=/etc/kubernetes/kubelet.kubeconfig \<br>  <span class="hljs-literal">--config</span>=/etc/kubernetes/kubelet.json \<br>  <span class="hljs-literal">--cni-bin-dir</span>=/opt/cni/bin \<br>  <span class="hljs-literal">--cni-conf-dir</span>=/etc/cni/net.d \<br>  <span class="hljs-literal">--container-runtime</span>=remote \<br>  <span class="hljs-literal">--container-runtime-endpoint</span>=unix:///run/containerd/containerd.sock \<br>  <span class="hljs-literal">--network-plugin</span>=cni \<br>  <span class="hljs-literal">--rotate-certificates</span> \<br>  <span class="hljs-literal">--pod-infra-container-image</span>=registry.aliyuncs.com/google_containers/pause:<span class="hljs-number">3.2</span> \<br>  <span class="hljs-literal">--root-dir</span>=/etc/cni/net.d \<br>  <span class="hljs-literal">--alsologtostderr</span>=true \<br>  <span class="hljs-literal">--logtostderr</span>=false \<br>  <span class="hljs-literal">--log-dir</span>=/var/log/kubernetes \<br>  <span class="hljs-literal">--v</span>=<span class="hljs-number">2</span><br>Restart=on<span class="hljs-literal">-failure</span><br>RestartSec=<span class="hljs-number">5</span><br><br>[<span class="hljs-type">Install</span>]<br>WantedBy=multi<span class="hljs-literal">-user</span>.target<br>EOF<br></code></pre></td></tr></table></figure><h5 id="2-5-9-2-4-同步文件到集群节点"><a href="#2-5-9-2-4-同步文件到集群节点" class="headerlink" title="2.5.9.2.4 同步文件到集群节点"></a>2.5.9.2.4 同步文件到集群节点</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> kubelet<span class="hljs-literal">-bootstrap</span>.kubeconfig /etc/kubernetes/<br><span class="hljs-built_in">cp</span> kubelet.json /etc/kubernetes/<br><span class="hljs-built_in">cp</span> kubelet.service /usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  k8s<span class="hljs-literal">-master2</span> k8s<span class="hljs-literal">-master3</span> k8s<span class="hljs-literal">-worker1</span>;<span class="hljs-keyword">do</span> scp kubelet<span class="hljs-literal">-bootstrap</span>.kubeconfig kubelet.json <span class="hljs-variable">$i:</span>/etc/kubernetes/;done<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  k8s<span class="hljs-literal">-master2</span> k8s<span class="hljs-literal">-master3</span> k8s<span class="hljs-literal">-worker1</span>;<span class="hljs-keyword">do</span> scp ca.pem <span class="hljs-variable">$i:</span>/etc/kubernetes/ssl/;done<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k8s<span class="hljs-literal">-master2</span> k8s<span class="hljs-literal">-master3</span> k8s<span class="hljs-literal">-worker1</span>;<span class="hljs-keyword">do</span> scp kubelet.service <span class="hljs-variable">$i:</span>/usr/lib/systemd/system/;done<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br>kubelet.json中address需要修改为当前主机IP地址。<br></code></pre></td></tr></table></figure><h5 id="2-5-9-2-5-创建目录及启动服务"><a href="#2-5-9-2-5-创建目录及启动服务" class="headerlink" title="2.5.9.2.5 创建目录及启动服务"></a>2.5.9.2.5 创建目录及启动服务</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir <span class="hljs-literal">-p</span> /var/lib/kubelet<br>mkdir <span class="hljs-literal">-p</span> /var/log/kubernetes<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl daemon<span class="hljs-literal">-reload</span><br>systemctl enable <span class="hljs-literal">--now</span> kubelet<br><br>systemctl status kubelet<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get nodes</span><br>NAME          STATUS     ROLES    AGE     VERSION<br>k8s<span class="hljs-literal">-master1</span>   NotReady   &lt;none&gt;   <span class="hljs-number">2</span>m55s   v1.<span class="hljs-number">21.10</span><br>k8s<span class="hljs-literal">-master2</span>   NotReady   &lt;none&gt;   <span class="hljs-number">45</span>s     v1.<span class="hljs-number">21.10</span><br>k8s<span class="hljs-literal">-master3</span>   NotReady   &lt;none&gt;   <span class="hljs-number">39</span>s     v1.<span class="hljs-number">21.10</span><br>k8s<span class="hljs-literal">-worker1</span>   NotReady   &lt;none&gt;   <span class="hljs-number">5</span>m1s    v1.<span class="hljs-number">21.10</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get csr</span><br>NAME        AGE     SIGNERNAME                                    REQUESTOR           CONDITION<br>csr<span class="hljs-literal">-b949p</span>   <span class="hljs-number">7</span>m55s   kubernetes.io/kube<span class="hljs-literal">-apiserver-client-kubelet</span>   kubelet<span class="hljs-literal">-bootstrap</span>   Approved,Issued<br>csr<span class="hljs-literal">-c9hs4</span>   <span class="hljs-number">3</span>m34s   kubernetes.io/kube<span class="hljs-literal">-apiserver-client-kubelet</span>   kubelet<span class="hljs-literal">-bootstrap</span>   Approved,Issued<br>csr<span class="hljs-literal">-r8vhp</span>   <span class="hljs-number">5</span>m50s   kubernetes.io/kube<span class="hljs-literal">-apiserver-client-kubelet</span>   kubelet<span class="hljs-literal">-bootstrap</span>   Approved,Issued<br>csr<span class="hljs-literal">-zb4sr</span>   <span class="hljs-number">3</span>m40s   kubernetes.io/kube<span class="hljs-literal">-apiserver-client-kubelet</span>   kubelet<span class="hljs-literal">-bootstrap</span>   Approved,Issued<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br>确认kubelet服务启动成功后，接着到master上Approve一下bootstrap请求。<br></code></pre></td></tr></table></figure><h4 id="2-5-9-3-部署kube-proxy"><a href="#2-5-9-3-部署kube-proxy" class="headerlink" title="2.5.9.3 部署kube-proxy"></a>2.5.9.3 部署kube-proxy</h4><h5 id="2-5-9-3-1-创建kube-proxy证书请求文件"><a href="#2-5-9-3-1-创建kube-proxy证书请求文件" class="headerlink" title="2.5.9.3.1 创建kube-proxy证书请求文件"></a>2.5.9.3.1 创建kube-proxy证书请求文件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-proxy-csr</span>.json &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-proxy&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;kubemsb&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h5 id="2-5-9-3-2-生成证书"><a href="#2-5-9-3-2-生成证书" class="headerlink" title="2.5.9.3.2 生成证书"></a>2.5.9.3.2 生成证书</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cfssl gencert <span class="hljs-literal">-ca</span>=ca.pem <span class="hljs-literal">-ca-key</span>=ca<span class="hljs-literal">-key</span>.pem <span class="hljs-literal">-config</span>=ca<span class="hljs-literal">-config</span>.json <span class="hljs-literal">-profile</span>=kubernetes kube<span class="hljs-literal">-proxy-csr</span>.json | cfssljson <span class="hljs-literal">-bare</span> kube<span class="hljs-literal">-proxy</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># ls kube-proxy*</span><br>kube<span class="hljs-literal">-proxy</span>.csr  kube<span class="hljs-literal">-proxy-csr</span>.json  kube<span class="hljs-literal">-proxy-key</span>.pem  kube<span class="hljs-literal">-proxy</span>.pem<br></code></pre></td></tr></table></figure><h5 id="2-5-9-3-3-创建kubeconfig文件"><a href="#2-5-9-3-3-创建kubeconfig文件" class="headerlink" title="2.5.9.3.3 创建kubeconfig文件"></a>2.5.9.3.3 创建kubeconfig文件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl config <span class="hljs-built_in">set-cluster</span> kubernetes <span class="hljs-literal">--certificate-authority</span>=ca.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--server</span>=https://<span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span>:<span class="hljs-number">6443</span> <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-proxy</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">set-credentials</span> kube<span class="hljs-literal">-proxy</span> <span class="hljs-literal">--client-certificate</span>=kube<span class="hljs-literal">-proxy</span>.pem <span class="hljs-literal">--client-key</span>=kube<span class="hljs-literal">-proxy-key</span>.pem <span class="hljs-literal">--embed-certs</span>=true <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-proxy</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">set-context</span> default <span class="hljs-literal">--cluster</span>=kubernetes <span class="hljs-literal">--user</span>=kube<span class="hljs-literal">-proxy</span> <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-proxy</span>.kubeconfig<br><br>kubectl config <span class="hljs-built_in">use-context</span> default <span class="hljs-literal">--kubeconfig</span>=kube<span class="hljs-literal">-proxy</span>.kubeconfig<br></code></pre></td></tr></table></figure><h5 id="2-5-9-3-4-创建服务配置文件"><a href="#2-5-9-3-4-创建服务配置文件" class="headerlink" title="2.5.9.3.4 创建服务配置文件"></a>2.5.9.3.4 创建服务配置文件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt; kube<span class="hljs-literal">-proxy</span>.yaml &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>apiVersion: kubeproxy.config.k8s.io/v1alpha1<br>bindAddress: <span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span><br>clientConnection:<br>  kubeconfig: /etc/kubernetes/kube<span class="hljs-literal">-proxy</span>.kubeconfig<br>clusterCIDR: <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span><br>healthzBindAddress: <span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">10256</span><br>kind: KubeProxyConfiguration<br>metricsBindAddress: <span class="hljs-number">192.168</span>.<span class="hljs-number">10.12</span>:<span class="hljs-number">10249</span><br>mode: <span class="hljs-string">&quot;ipvs&quot;</span><br>EOF<br></code></pre></td></tr></table></figure><h5 id="2-5-9-3-5-创建服务启动管理文件"><a href="#2-5-9-3-5-创建服务启动管理文件" class="headerlink" title="2.5.9.3.5 创建服务启动管理文件"></a>2.5.9.3.5 创建服务启动管理文件</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt;  kube<span class="hljs-literal">-proxy</span>.service &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>[<span class="hljs-type">Unit</span>]<br>Description=Kubernetes Kube<span class="hljs-literal">-Proxy</span> Server<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=network.target<br><br>[<span class="hljs-type">Service</span>]<br>WorkingDirectory=/var/lib/kube<span class="hljs-literal">-proxy</span><br>ExecStart=/usr/local/bin/kube<span class="hljs-literal">-proxy</span> \<br>  <span class="hljs-literal">--config</span>=/etc/kubernetes/kube<span class="hljs-literal">-proxy</span>.yaml \<br>  <span class="hljs-literal">--alsologtostderr</span>=true \<br>  <span class="hljs-literal">--logtostderr</span>=false \<br>  <span class="hljs-literal">--log-dir</span>=/var/log/kubernetes \<br>  <span class="hljs-literal">--v</span>=<span class="hljs-number">2</span><br>Restart=on<span class="hljs-literal">-failure</span><br>RestartSec=<span class="hljs-number">5</span><br>LimitNOFILE=<span class="hljs-number">65536</span><br><br>[<span class="hljs-type">Install</span>]<br>WantedBy=multi<span class="hljs-literal">-user</span>.target<br>EOF<br></code></pre></td></tr></table></figure><h5 id="2-5-9-3-6-同步文件到集群工作节点主机"><a href="#2-5-9-3-6-同步文件到集群工作节点主机" class="headerlink" title="2.5.9.3.6 同步文件到集群工作节点主机"></a>2.5.9.3.6 同步文件到集群工作节点主机</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-proxy</span>*.pem /etc/kubernetes/ssl/<br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-proxy</span>.kubeconfig kube<span class="hljs-literal">-proxy</span>.yaml /etc/kubernetes/<br><span class="hljs-built_in">cp</span> kube<span class="hljs-literal">-proxy</span>.service /usr/lib/systemd/system/<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k8s<span class="hljs-literal">-master2</span> k8s<span class="hljs-literal">-master3</span> k8s<span class="hljs-literal">-worker1</span>;<span class="hljs-keyword">do</span> scp kube<span class="hljs-literal">-proxy</span>.kubeconfig kube<span class="hljs-literal">-proxy</span>.yaml <span class="hljs-variable">$i:</span>/etc/kubernetes/;done<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k8s<span class="hljs-literal">-master2</span> k8s<span class="hljs-literal">-master3</span> k8s<span class="hljs-literal">-worker1</span>;<span class="hljs-keyword">do</span> scp  kube<span class="hljs-literal">-proxy</span>.service <span class="hljs-variable">$i:</span>/usr/lib/systemd/system/;done<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">说明：<br>修改kube<span class="hljs-literal">-proxy</span>.yaml中IP地址为当前主机IP.<br></code></pre></td></tr></table></figure><h5 id="2-5-9-3-7-服务启动"><a href="#2-5-9-3-7-服务启动" class="headerlink" title="2.5.9.3.7 服务启动"></a>2.5.9.3.7 服务启动</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mkdir <span class="hljs-literal">-p</span> /var/lib/kube<span class="hljs-literal">-proxy</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systemctl daemon<span class="hljs-literal">-reload</span><br>systemctl enable <span class="hljs-literal">--now</span> kube<span class="hljs-literal">-proxy</span><br><br>systemctl status kube<span class="hljs-literal">-proxy</span><br></code></pre></td></tr></table></figure><h3 id="2-5-10-网络组件部署-Calico"><a href="#2-5-10-网络组件部署-Calico" class="headerlink" title="2.5.10 网络组件部署 Calico"></a>2.5.10 网络组件部署 Calico</h3><h4 id="2-5-10-1-下载"><a href="#2-5-10-1-下载" class="headerlink" title="2.5.10.1 下载"></a>2.5.10.1 下载</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> https://docs.projectcalico.org/v3.<span class="hljs-number">19</span>/manifests/calico.yaml<br></code></pre></td></tr></table></figure><h4 id="2-5-10-2-修改文件"><a href="#2-5-10-2-修改文件" class="headerlink" title="2.5.10.2 修改文件"></a>2.5.10.2 修改文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">3683</span>             - name: CALICO_IPV4POOL_CIDR<br><span class="hljs-number">3684</span>               value: <span class="hljs-string">&quot;10.244.0.0/16&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-5-10-3-应用文件"><a href="#2-5-10-3-应用文件" class="headerlink" title="2.5.10.3 应用文件"></a>2.5.10.3 应用文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl apply <span class="hljs-operator">-f</span> calico.yaml<br></code></pre></td></tr></table></figure><h4 id="2-5-10-4-验证应用结果"><a href="#2-5-10-4-验证应用结果" class="headerlink" title="2.5.10.4 验证应用结果"></a>2.5.10.4 验证应用结果</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get pods -A</span><br>NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-kube-controllers-7cc8dd57d9-tf2m5</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>s<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-node-llw5w</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>s<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-node-mhh6g</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>s<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-node-twj99</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>s<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-node-zh6xl</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>s<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get nodes</span><br>NAME          STATUS   ROLES    AGE   VERSION<br>k8s<span class="hljs-literal">-master1</span>   Ready    &lt;none&gt;   <span class="hljs-number">55</span>m   v1.<span class="hljs-number">21.10</span><br>k8s<span class="hljs-literal">-master2</span>   Ready    &lt;none&gt;   <span class="hljs-number">53</span>m   v1.<span class="hljs-number">21.10</span><br>k8s<span class="hljs-literal">-master3</span>   Ready    &lt;none&gt;   <span class="hljs-number">53</span>m   v1.<span class="hljs-number">21.10</span><br>k8s<span class="hljs-literal">-worker1</span>   Ready    &lt;none&gt;   <span class="hljs-number">57</span>m   v1.<span class="hljs-number">21.10</span><br></code></pre></td></tr></table></figure><h3 id="2-5-10-部署CoreDNS"><a href="#2-5-10-部署CoreDNS" class="headerlink" title="2.5.10 部署CoreDNS"></a>2.5.10 部署CoreDNS</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt;  coredns.yaml &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: coredns<br>  namespace: kube<span class="hljs-literal">-system</span><br><span class="hljs-literal">---</span><br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  labels:<br>    kubernetes.io/bootstrapping: rbac<span class="hljs-literal">-defaults</span><br>  name: system:coredns<br>rules:<br>  - apiGroups:<br>    - <span class="hljs-string">&quot;&quot;</span><br>    resources:<br>    - endpoints<br>    - services<br>    - pods<br>    - namespaces<br>    verbs:<br>    - list<br>    - watch<br>  - apiGroups:<br>    - discovery.k8s.io<br>    resources:<br>    - endpointslices<br>    verbs:<br>    - list<br>    - watch<br><span class="hljs-literal">---</span><br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  annotations:<br>    rbac.authorization.kubernetes.io/autoupdate: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    kubernetes.io/bootstrapping: rbac<span class="hljs-literal">-defaults</span><br>  name: system:coredns<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: system:coredns<br>subjects:<br>- kind: ServiceAccount<br>  name: coredns<br>  namespace: kube<span class="hljs-literal">-system</span><br><span class="hljs-literal">---</span><br>apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: coredns<br>  namespace: kube<span class="hljs-literal">-system</span><br><span class="hljs-keyword">data</span>:<br>  Corefile: |<br>    .:<span class="hljs-number">53</span> &#123;<br>        errors<br>        health &#123;<br>          lameduck <span class="hljs-number">5</span>s<br>        &#125;<br>        ready<br>        kubernetes cluster.local  <span class="hljs-keyword">in</span><span class="hljs-literal">-addr</span>.arpa ip6.arpa &#123;<br>          fallthrough <span class="hljs-keyword">in</span><span class="hljs-literal">-addr</span>.arpa ip6.arpa<br>        &#125;<br>        prometheus :<span class="hljs-number">9153</span><br>        forward . /etc/resolv.conf &#123;<br>          max_concurrent <span class="hljs-number">1000</span><br>        &#125;<br>        cache <span class="hljs-number">30</span><br>        loop<br>        reload<br>        loadbalance<br>    &#125;<br><span class="hljs-literal">---</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: coredns<br>  namespace: kube<span class="hljs-literal">-system</span><br>  labels:<br>    k8s<span class="hljs-literal">-app</span>: kube<span class="hljs-literal">-dns</span><br>    kubernetes.io/name: <span class="hljs-string">&quot;CoreDNS&quot;</span><br>spec:<br>  <span class="hljs-comment"># replicas: not specified here:</span><br>  <span class="hljs-comment"># 1. Default is 1.</span><br>  <span class="hljs-comment"># 2. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span><br>  strategy:<br>    <span class="hljs-built_in">type</span>: RollingUpdate<br>    rollingUpdate:<br>      maxUnavailable: <span class="hljs-number">1</span><br>  selector:<br>    matchLabels:<br>      k8s<span class="hljs-literal">-app</span>: kube<span class="hljs-literal">-dns</span><br>  template:<br>    metadata:<br>      labels:<br>        k8s<span class="hljs-literal">-app</span>: kube<span class="hljs-literal">-dns</span><br>    spec:<br>      priorityClassName: system<span class="hljs-literal">-cluster-critical</span><br>      serviceAccountName: coredns<br>      tolerations:<br>        - key: <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>          operator: <span class="hljs-string">&quot;Exists&quot;</span><br>      nodeSelector:<br>        kubernetes.io/os: linux<br>      affinity:<br>         podAntiAffinity:<br>           preferredDuringSchedulingIgnoredDuringExecution:<br>           - weight: <span class="hljs-number">100</span><br>             podAffinityTerm:<br>               labelSelector:<br>                 matchExpressions:<br>                   - key: k8s<span class="hljs-literal">-app</span><br>                     operator: <span class="hljs-keyword">In</span><br>                     values: [<span class="hljs-string">&quot;kube-dns&quot;</span>]<br>               topologyKey: kubernetes.io/hostname<br>      containers:<br>      - name: coredns<br>        image: coredns/coredns:<span class="hljs-number">1.8</span>.<span class="hljs-number">4</span><br>        imagePullPolicy: IfNotPresent<br>        resources:<br>          limits:<br>            memory: <span class="hljs-number">170</span><span class="hljs-built_in">Mi</span><br>          requests:<br>            cpu: <span class="hljs-number">100</span>m<br>            memory: <span class="hljs-number">70</span><span class="hljs-built_in">Mi</span><br>        args: [ <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/coredns/Corefile&quot;</span> ]<br>        volumeMounts:<br>        - name: config<span class="hljs-literal">-volume</span><br>          mountPath: /etc/coredns<br>          readOnly: true<br>        ports:<br>        - containerPort: <span class="hljs-number">53</span><br>          name: dns<br>          protocol: UDP<br>        - containerPort: <span class="hljs-number">53</span><br>          name: dns<span class="hljs-literal">-tcp</span><br>          protocol: TCP<br>        - containerPort: <span class="hljs-number">9153</span><br>          name: metrics<br>          protocol: TCP<br>        securityContext:<br>          allowPrivilegeEscalation: false<br>          capabilities:<br>            add:<br>            - NET_BIND_SERVICE<br>            drop:<br>            - all<br>          readOnlyRootFilesystem: true<br>        livenessProbe:<br>          httpGet:<br>            path: /health<br>            port: <span class="hljs-number">8080</span><br>            scheme: HTTP<br>          initialDelaySeconds: <span class="hljs-number">60</span><br>          timeoutSeconds: <span class="hljs-number">5</span><br>          successThreshold: <span class="hljs-number">1</span><br>          failureThreshold: <span class="hljs-number">5</span><br>        readinessProbe:<br>          httpGet:<br>            path: /ready<br>            port: <span class="hljs-number">8181</span><br>            scheme: HTTP<br>      dnsPolicy: Default<br>      volumes:<br>        - name: config<span class="hljs-literal">-volume</span><br>          configMap:<br>            name: coredns<br>            items:<br>            - key: Corefile<br>              path: Corefile<br><span class="hljs-literal">---</span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: kube<span class="hljs-literal">-dns</span><br>  namespace: kube<span class="hljs-literal">-system</span><br>  annotations:<br>    prometheus.io/port: <span class="hljs-string">&quot;9153&quot;</span><br>    prometheus.io/scrape: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    k8s<span class="hljs-literal">-app</span>: kube<span class="hljs-literal">-dns</span><br>    kubernetes.io/cluster<span class="hljs-literal">-service</span>: <span class="hljs-string">&quot;true&quot;</span><br>    kubernetes.io/name: <span class="hljs-string">&quot;CoreDNS&quot;</span><br>spec:<br>  selector:<br>    k8s<span class="hljs-literal">-app</span>: kube<span class="hljs-literal">-dns</span><br>  clusterIP: <span class="hljs-number">10.96</span>.<span class="hljs-number">0.2</span><br>  ports:<br>  - name: dns<br>    port: <span class="hljs-number">53</span><br>    protocol: UDP<br>  - name: dns<span class="hljs-literal">-tcp</span><br>    port: <span class="hljs-number">53</span><br>    protocol: TCP<br>  - name: metrics<br>    port: <span class="hljs-number">9153</span><br>    protocol: TCP<br> <br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl apply <span class="hljs-operator">-f</span> coredns.yaml<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get pods -A</span><br>NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-kube-controllers-7cc8dd57d9-tf2m5</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m7s<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-node-llw5w</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m7s<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-node-mhh6g</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m7s<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-node-twj99</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m7s<br>kube<span class="hljs-literal">-system</span>   calico<span class="hljs-literal">-node-zh6xl</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m7s<br>kube<span class="hljs-literal">-system</span>   coredns<span class="hljs-literal">-675db8b7cc-ncnf6</span>                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">26</span>s<br></code></pre></td></tr></table></figure><h3 id="2-5-11-部署应用验证"><a href="#2-5-11-部署应用验证" class="headerlink" title="2.5.11 部署应用验证"></a>2.5.11 部署应用验证</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span> &gt;  nginx.yaml  &lt;&lt; <span class="hljs-string">&quot;EOF&quot;</span><br><span class="hljs-literal">---</span><br>apiVersion: v1<br>kind: ReplicationController<br>metadata:<br>  name: nginx<span class="hljs-literal">-web</span><br>spec:<br>  replicas: <span class="hljs-number">2</span><br>  selector:<br>    name: nginx<br>  template:<br>    metadata:<br>      labels:<br>        name: nginx<br>    spec:<br>      containers:<br>        - name: nginx<br>          image: nginx:<span class="hljs-number">1.19</span>.<span class="hljs-number">6</span><br>          ports:<br>            - containerPort: <span class="hljs-number">80</span><br><span class="hljs-literal">---</span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx<span class="hljs-literal">-service-nodeport</span><br>spec:<br>  ports:<br>    - port: <span class="hljs-number">80</span><br>      targetPort: <span class="hljs-number">80</span><br>      nodePort: <span class="hljs-number">30001</span><br>      protocol: TCP<br>  <span class="hljs-built_in">type</span>: NodePort<br>  selector:<br>    name: nginx<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl apply <span class="hljs-operator">-f</span> nginx.yaml<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get pods -o wide</span><br>NAME                     READY   STATUS    RESTARTS   AGE   IP              NODE          NOMINATED NODE   READINESS GATES<br>nginx<span class="hljs-literal">-web-qzvw4</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">58</span>s   <span class="hljs-number">10.244</span>.<span class="hljs-number">194.65</span>   k8s<span class="hljs-literal">-worker1</span>   &lt;none&gt;           &lt;none&gt;<br>nginx<span class="hljs-literal">-web-spw5t</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">58</span>s   <span class="hljs-number">10.244</span>.<span class="hljs-number">224.1</span>    k8s<span class="hljs-literal">-master2</span>   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get all</span><br>NAME                         READY   STATUS    RESTARTS   AGE<br>pod/nginx<span class="hljs-literal">-web-qzvw4</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m2s<br>pod/nginx<span class="hljs-literal">-web-spw5t</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m2s<br><br>NAME                                     DESIRED   CURRENT   READY   AGE<br>replicationcontroller/nginx<span class="hljs-literal">-web</span>   <span class="hljs-number">2</span>         <span class="hljs-number">2</span>         <span class="hljs-number">2</span>       <span class="hljs-number">2</span>m2s<br><br>NAME                             <span class="hljs-built_in">TYPE</span>        CLUSTER<span class="hljs-literal">-IP</span>      EXTERNAL<span class="hljs-literal">-IP</span>   PORT(S)        AGE<br>service/kubernetes               ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">0.1</span>       &lt;none&gt;        <span class="hljs-number">443</span>/TCP        <span class="hljs-number">3</span>h37m<br>service/nginx<span class="hljs-literal">-service-nodeport</span>   NodePort    <span class="hljs-number">10.96</span>.<span class="hljs-number">165.114</span>   &lt;none&gt;        <span class="hljs-number">80</span>:<span class="hljs-number">30001</span>/TCP   <span class="hljs-number">2</span>m2s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>consul1.21安装</title>
    <link href="/2025/05/14/consul-1-21%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/"/>
    <url>/2025/05/14/consul-1-21%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># Consul 1.21.0 单节点安装笔记</span><br><br><span class="hljs-comment">## 一、环境准备</span><br>- **操作系统**：CentOS <span class="hljs-number">7</span>/<span class="hljs-number">8</span> 或 Ubuntu <span class="hljs-number">20.04</span> LTS<br>- **依赖项**：<br>  ```bash<br>  sudo yum install <span class="hljs-literal">-y</span> <span class="hljs-built_in">wget</span> unzip <span class="hljs-built_in">curl</span>    <span class="hljs-comment"># CentOS</span><br>  sudo apt install <span class="hljs-literal">-y</span> <span class="hljs-built_in">wget</span> unzip <span class="hljs-built_in">curl</span>    <span class="hljs-comment"># Ubuntu</span><br></code></pre></td></tr></table></figure><h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><h3 id="1-下载并安装二进制文件"><a href="#1-下载并安装二进制文件" class="headerlink" title="1. 下载并安装二进制文件"></a>1. 下载并安装二进制文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://releases.hashicorp.com/consul/1.21.0/consul_1.21.0_linux_amd64.zip<br>unzip consul_1.21.0_linux_amd64.zip<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> consul /usr/local/bin/<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/consul<br></code></pre></td></tr></table></figure><h3 id="2-创建系统用户和目录"><a href="#2-创建系统用户和目录" class="headerlink" title="2. 创建系统用户和目录"></a>2. 创建系统用户和目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> useradd --system --home /etc/consul.d --shell /bin/false consul<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/consul.d /var/lib/consul<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R consul:consul /etc/consul.d /var/lib/consul<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> -R 750 /etc/consul.d /var/lib/consul<br></code></pre></td></tr></table></figure><h3 id="3-配置文件-etc-consul-d-consul-hcl"><a href="#3-配置文件-etc-consul-d-consul-hcl" class="headerlink" title="3. 配置文件 (/etc/consul.d/consul.hcl)"></a>3. 配置文件 (<code>/etc/consul.d/consul.hcl</code>)</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">datacenter</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc1&quot;</span><br>data_dir <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/var/lib/consul&quot;</span><br>node_name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;consul-server-1&quot;</span><br>log_level <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INFO&quot;</span><br><br><span class="hljs-attribute">server</span> <span class="hljs-operator">=</span> true<br>bootstrap_expect <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><br>ui_config &#123;<br>  enabled <span class="hljs-operator">=</span> true<br>&#125;<br><br>bind_addr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>client_addr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><br>ports &#123;<br>  http <span class="hljs-operator">=</span> <span class="hljs-number">8500</span><br>  grpc <span class="hljs-operator">=</span> <span class="hljs-number">8502</span><br>&#125;<br><br>enable_local_script_checks <span class="hljs-operator">=</span> true<br></code></pre></td></tr></table></figure><h3 id="4-Systemd-服务配置-etc-systemd-system-consul-service"><a href="#4-Systemd-服务配置-etc-systemd-system-consul-service" class="headerlink" title="4. Systemd 服务配置 (/etc/systemd/system/consul.service)"></a>4. Systemd 服务配置 (<code>/etc/systemd/system/consul.service</code>)</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=<span class="hljs-string">&quot;HashiCorp Consul 1.21 Service Mesh&quot;</span><br><span class="hljs-attr">Documentation</span>=https://www.consul.io/docs/<span class="hljs-number">1.21</span><br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">User</span>=consul<br><span class="hljs-attr">Group</span>=consul<br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/consul agent -config-dir=/etc/consul.d/<br><span class="hljs-attr">ExecReload</span>=/bin/kill -HUP <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">KillMode</span>=process<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">5</span>s<br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">65536</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5. 启动服务"></a>5. 启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> consul<br><span class="hljs-built_in">sudo</span> systemctl start consul<br></code></pre></td></tr></table></figure><h2 id="三、验证安装"><a href="#三、验证安装" class="headerlink" title="三、验证安装"></a>三、验证安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查服务状态</span><br><span class="hljs-built_in">sudo</span> systemctl status consul<br><br><span class="hljs-comment"># 检查成员列表</span><br>consul members<br><br><span class="hljs-comment"># 验证HTTP API</span><br>curl http://localhost:8500/v1/agent/self | jq<br><br><span class="hljs-comment"># 访问Web UI</span><br>http://&lt;SERVER_IP&gt;:8500/ui<br></code></pre></td></tr></table></figure><h2 id="四、防火墙配置"><a href="#四、防火墙配置" class="headerlink" title="四、防火墙配置"></a>四、防火墙配置</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># CentOS</span><br><span class="hljs-attribute">sudo</span> firewall-cmd --permanent --add-port=&#123;<span class="hljs-number">8300</span>,<span class="hljs-number">8301</span>,<span class="hljs-number">8302</span>,<span class="hljs-number">8500</span>,<span class="hljs-number">8600</span>&#125;/tcp<br><span class="hljs-attribute">sudo</span> firewall-cmd --permanent --add-port=&#123;<span class="hljs-number">8301</span>,<span class="hljs-number">8302</span>,<span class="hljs-number">8600</span>&#125;/udp<br><span class="hljs-attribute">sudo</span> firewall-cmd --reload<br><br><span class="hljs-comment"># Ubuntu</span><br><span class="hljs-attribute">sudo</span> ufw <span class="hljs-literal">allow</span> <span class="hljs-number">8300</span>,<span class="hljs-number">8301</span>,<span class="hljs-number">8302</span>,<span class="hljs-number">8500</span>,<span class="hljs-number">8600</span>/tcp<br><span class="hljs-attribute">sudo</span> ufw <span class="hljs-literal">allow</span> <span class="hljs-number">8301</span>,<span class="hljs-number">8302</span>,<span class="hljs-number">8600</span>/udp<br><span class="hljs-attribute">sudo</span> ufw reload<br></code></pre></td></tr></table></figure><h2 id="五、常见问题解决"><a href="#五、常见问题解决" class="headerlink" title="五、常见问题解决"></a>五、常见问题解决</h2><h3 id="1-启动失败检查"><a href="#1-启动失败检查" class="headerlink" title="1. 启动失败检查"></a>1. 启动失败检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看详细日志</span><br><span class="hljs-built_in">sudo</span> journalctl -u consul -f<br><br><span class="hljs-comment"># 验证配置文件</span><br>consul validate /etc/consul.d/<br></code></pre></td></tr></table></figure><h3 id="2-端口冲突处理"><a href="#2-端口冲突处理" class="headerlink" title="2. 端口冲突处理"></a>2. 端口冲突处理</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> netstat -tulnp | grep -E &#x27;<span class="hljs-number">8500</span>|<span class="hljs-number">8300</span>&#x27;<br><span class="hljs-comment"># 如果冲突，修改consul.hcl中的ports配置</span><br></code></pre></td></tr></table></figure><h3 id="3-数据重置"><a href="#3-数据重置" class="headerlink" title="3. 数据重置"></a>3. 数据重置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl stop consul<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/consul/*<br><span class="hljs-built_in">sudo</span> systemctl start consul<br></code></pre></td></tr></table></figure><h2 id="六、备份建议"><a href="#六、备份建议" class="headerlink" title="六、备份建议"></a>六、备份建议</h2><ol><li>定期备份 <code>/etc/consul.d/</code> 目录</li><li>重要数据目录 <code>/var/lib/consul/</code> 建议做快照</li></ol><blockquote><p>注意：单节点部署仅适用于开发和测试环境，生产环境建议至少3个节点组成集群</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prometheus监控k8s集群</title>
    <link href="/2025/05/12/prometheus%E7%9B%91%E6%8E%A7k8s%E9%9B%86%E7%BE%A4/"/>
    <url>/2025/05/12/prometheus%E7%9B%91%E6%8E%A7k8s%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s集群监控之prometheus"><a href="#k8s集群监控之prometheus" class="headerlink" title="k8s集群监控之prometheus"></a>k8s集群监控之prometheus</h1><p>prometheus官网：<a href="https://prometheus.io/">官网地址</a></p><h4 id="1-1-Prometheus的特点"><a href="#1-1-Prometheus的特点" class="headerlink" title="1.1 Prometheus的特点"></a>1.1 Prometheus的特点</h4><ul><li><p>多维度数据模型,使用时间序列数据库TSDB而不使用mysql。</p></li><li><p>灵活的查询语言PromQL。</p></li><li><p>不依赖分布式存储，单个服务器节点是自主的。</p></li><li><p>主要基于HTTP的pull方式主动采集时序数据。</p></li><li><p>也可通过pushgateway获取主动推送到网关的数据。</p></li><li><p>通过服务发现或者静态配置来发现目标服务对象。</p></li><li><p>支持多种多样的图表和界面展示，比如Grafana等。</p></li></ul><h3 id="1-2-基本原理"><a href="#1-2-基本原理" class="headerlink" title="1.2 基本原理"></a>1.2 基本原理</h3><h4 id="1-2-1-原理说明"><a href="#1-2-1-原理说明" class="headerlink" title="1.2.1 原理说明"></a>1.2.1 原理说明</h4><p>Prometheus的基本原理是通过各种exporter提供的HTTP协议接口</p><p>周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。</p><p>不需要任何SDK或者其他的集成过程,非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。</p><p>互联网公司常用的组件大部分都有exporter可以直接使用，如Nginx、MySQL、Linux系统信息等。</p><h4 id="1-2-2-架构图"><a href="#1-2-2-架构图" class="headerlink" title="1.2.2 架构图:"></a>1.2.2 架构图:</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2511954/1601219938866-fc30fe28-f729-49eb-a4b9-8cfeaa83ecb5.png" alt="img"></p><h4 id="1-2-3-三大组件"><a href="#1-2-3-三大组件" class="headerlink" title="1.2.3 三大组件"></a>1.2.3 三大组件</h4><ul><li><p>Server 主要负责数据采集和存储，提供PromQL查询语言的支持。</p></li><li><p>Alertmanager 警告管理器，用来进行报警。</p></li><li><p>Push Gateway 支持临时性Job主动推送指标的中间网关。</p></li></ul><h4 id="1-2-4-架构服务过程"><a href="#1-2-4-架构服务过程" class="headerlink" title="1.2.4 架构服务过程"></a>1.2.4 架构服务过程</h4><blockquote><p>Prometheus Daemon负责定时去目标上抓取metrics(指标)数据<br>每个抓取目标需要暴露一个http服务的接口给它定时抓取。<br>支持通过配置文件、文本文件、Zookeeper、DNS SRV Lookup等方式指定抓取目标。</p><p>PushGateway用于Client主动推送metrics到PushGateway<br>而Prometheus只是定时去Gateway上抓取数据。<br>适合一次性、短生命周期的服务。</p><p>Prometheus在TSDB数据库存储抓取的所有数据<br>通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。</p><p>Prometheus通过PromQL和其他API可视化地展示收集的数据。<br>支持Grafana、Promdash等方式的图表数据可视化。<br>Prometheus还提供HTTP API的查询方式，自定义所需要的输出。</p><p>Alertmanager是独立于Prometheus的一个报警组件<br>支持Prometheus的查询语句，提供十分灵活的报警方式。</p></blockquote><h4 id="1-2-5-常用的exporter"><a href="#1-2-5-常用的exporter" class="headerlink" title="1.2.5 常用的exporter"></a>1.2.5 常用的exporter</h4><p>prometheus不同于zabbix，没有agent，使用的是针对不同服务的exporter</p><p>正常情况下，监控k8s集群及node，pod，常用的exporter有四个：</p><h5 id="1-部署kube-state-metrics"><a href="#1-部署kube-state-metrics" class="headerlink" title="1.部署kube-state-metrics"></a>1.部署kube-state-metrics</h5><pre><code class="hljs">我调度了多少个 replicas？现在可用的有几个？多少个 Pod 是 running/stopped/terminated 状态？Pod 重启了多少次？我有多少 job 在运行中?而这些则是 kube-state-metrics 提供的内容，它基于 client-go 开发，轮询 Kubernetes API，并将 Kubernetes的结构化信息转换为metrics。</code></pre><p>​<br>​<br>​    #1.官网：我们k8s集群是1.22.x版本，所以选择v2.2.4，具体版本对应看官网<br>​    <a href="https://github.com/kubernetes/kube-state-metrics">https://github.com/kubernetes/kube-state-metrics</a><br>​    <a href="https://github.com/kubernetes/kube-state-metrics/tree/v2.2.4/examples/standard">https://github.com/kubernetes/kube-state-metrics/tree/v2.2.4/examples/standard</a><br>​    </p><pre><code class="hljs">#注意：里面存放的是我们的yaml文件，自己去下载安装</code></pre><p>​<br>​<br>​    #2.下载并推送到我们私有镜像仓库harbor上<br>​    [root@k8s-node01 ~]# mkdir &#x2F;k8s-yaml&#x2F;kube-state-metrics -p<br>​    [root@k8s-node01 ~]# cd &#x2F;k8s-yaml&#x2F;kube-state-metrics<br>​    [root@k8s-master01 kube-state-metrics]# ls<br>​    cluster-role-binding.yaml  cluster-role.yaml  deployment.yaml  service-account.yaml service.yaml<br>​    #这里需要上传或者下载需要的镜像到每个节点<br>​    #3.创建资源<br>​    [root@k8s-master01 kube-state-metrics]# kubectl create -f .<br>​    </p><pre><code class="hljs">#4.验证测试[root@k8s-master01 ~]# kubectl get pod -n kube-system -o wide |grep kube-state-metrics[root@k8s-master01 kube-state-metrics]# curl 172.161.125.55:8080/healthzOK</code></pre><h5 id="2-部署node-exporter"><a href="#2-部署node-exporter" class="headerlink" title="2.部署node-exporter"></a>2.部署node-exporter</h5><pre><code class="hljs">node-exporter是监控node的，需要每个节点启动一个，所以使用ds控制器# 官网地址：https://github.com/prometheus/node_exporter作用：将宿主机的/proc   system  目录挂载给容器,是容器能获取node节点宿主机信息[root@k8s-master01 ~]# docker pull prom/node-exporter:latest[root@k8s-master01 ~]# mkdir -p /k8s-yaml/node-exporter/[root@k8s-master01 ~]# cd /k8s-yaml/node-exporter/[root@k8s-master01 node-exporter]# vim node-exporter-ds.yaml [root@k8s-master01 node-exporter]# cat node-exporter-ds.yaml kind: DaemonSetapiVersion: apps/v1metadata:  name: node-exporter  namespace: kube-system  labels:    daemon: &quot;node-exporter&quot;    grafanak8sapp: &quot;true&quot;spec:  selector:    matchLabels:      daemon: &quot;node-exporter&quot;      grafanak8sapp: &quot;true&quot;  template:    metadata:      name: node-exporter      labels:        daemon: &quot;node-exporter&quot;        grafanak8sapp: &quot;true&quot;    spec:      containers:      - name: node-exporter        image: prom/node-exporter:latest        imagePullPolicy: IfNotPresent        args:        - --path.procfs=/host_proc        - --path.sysfs=/host_sys        ports:        - name: node-exporter          hostPort: 9100          containerPort: 9100          protocol: TCP        volumeMounts:        - name: sys          readOnly: true          mountPath: /host_sys        - name: proc          readOnly: true          mountPath: /host_proc      imagePullSecrets:      - name: harbor      restartPolicy: Always      hostNetwork: true      volumes:      - name: proc        hostPath:           path: /proc          type: &quot;&quot;      - name: sys        hostPath:          path: /sys          type: &quot;[root@k8s-master01 node-exporter]# kubectl apply -f node-exporter-ds.yaml </code></pre><h5 id="3-部署cadvisor"><a href="#3-部署cadvisor" class="headerlink" title="3. 部署cadvisor"></a>3. 部署cadvisor</h5><p>收集k8s集群docker容器内部使用资源信息 blackbox-exporte<br>收集k8s集群docker容器服务是否存活</p><blockquote><p>该exporter是通过和kubelet交互，取到Pod运行时的资源消耗情况，并将接口暴露给Prometheus。</p><ul><li><p>cadvisor由于要获取每个node上的pod信息，因此也需要使用daemonset方式运行</p></li><li><p>cadvisor采用daemonset方式运行在node节点上，通过污点的方式排除master</p></li><li><p>同时将部分宿主机目录挂载到本地，如docker的数据目录</p></li></ul></blockquote><p>​    #官网地址：<a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a><br>​    <a href="https://github.com/google/cadvisor/tree/v0.42.0/deploy/kubernetes/base">https://github.com/google/cadvisor/tree/v0.42.0/deploy/kubernetes/base</a><br>​    [root@k8s-master01 ~]# mkdir &#x2F;k8s-yaml&#x2F;cadvisor &amp;&amp; cd &#x2F;k8s-yaml&#x2F;cadvisor<br>​    [root@k8s-master01 cadvisor]# cat ds.yaml </p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br> <span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br> <span class="hljs-attr">metadata:</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">cadvisor</span><br>   <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>   <span class="hljs-attr">labels:</span><br>     <span class="hljs-attr">app:</span> <span class="hljs-string">cadvisor</span><br> <span class="hljs-attr">spec:</span><br>   <span class="hljs-attr">selector:</span><br>     <span class="hljs-attr">matchLabels:</span><br>       <span class="hljs-attr">name:</span> <span class="hljs-string">cadvisor</span><br>   <span class="hljs-attr">template:</span><br>     <span class="hljs-attr">metadata:</span><br>       <span class="hljs-attr">labels:</span><br>         <span class="hljs-attr">name:</span> <span class="hljs-string">cadvisor</span><br>     <span class="hljs-attr">spec:</span><br>       <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br> <span class="hljs-comment">#------pod的tolerations与node的Taints配合,做POD指定调度----</span><br>       <span class="hljs-attr">tolerations:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>         <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br> <span class="hljs-comment">#-------------------------------------</span><br>       <span class="hljs-attr">containers:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cadvisor</span><br>         <span class="hljs-attr">image:</span> <span class="hljs-string">gcr.io/cadvisor/cadvisor:v0.39.0</span><br>         <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>         <span class="hljs-attr">volumeMounts:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rootfs</span><br>           <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/rootfs</span><br>           <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">var-run</span><br>           <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/run</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sys</span><br>           <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/sys</span><br>           <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker</span><br>           <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker</span><br>           <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>         <span class="hljs-attr">ports:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>             <span class="hljs-attr">containerPort:</span> <span class="hljs-number">4194</span><br>             <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>         <span class="hljs-attr">readinessProbe:</span><br>           <span class="hljs-attr">tcpSocket:</span><br>             <span class="hljs-attr">port:</span> <span class="hljs-number">4194</span><br>           <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>           <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>         <span class="hljs-attr">args:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">--housekeeping_interval=10s</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">--port=4194</span><br>       <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>       <span class="hljs-attr">volumes:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rootfs</span><br>         <span class="hljs-attr">hostPath:</span><br>           <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">var-run</span><br>         <span class="hljs-attr">hostPath:</span><br>           <span class="hljs-attr">path:</span> <span class="hljs-string">/var/run</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sys</span><br>         <span class="hljs-attr">hostPath:</span><br>           <span class="hljs-attr">path:</span> <span class="hljs-string">/sys</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker</span><br>         <span class="hljs-attr">hostPath:</span><br>           <span class="hljs-attr">path:</span> <span class="hljs-string">/data/docker</span><br> <br></code></pre></td></tr></table></figure><pre><code class="hljs">#修改运算节点软连接 （所有node节点）#1.node01修改[root@k8s-node01 ~]# mount -o remount,rw /sys/fs/cgroup/[root@k8s-node01 ~]# ln -s /sys/fs/cgroup/cpu,cpuacct/ /sys/fs/cgroup/cpuacct,cpu[root@k8s-node01 ~]# ll /sys/fs/cgroup/ | grep cpu#2.node02修改[root@k8s-node02 ~]# mount -o remount,rw /sys/fs/cgroup/[root@k8s-node02 ~]# ln -s /sys/fs/cgroup/cpu,cpuacct/ /sys/fs/cgroup/cpuacct,cpu[root@k8s-node02 ~]# ll /sys/fs/cgroup/ | grep cpulrwxrwxrwx 1 root root 11 Nov 17 13:41 cpu -&gt; cpu,cpuacctlrwxrwxrwx 1 root root 11 Nov 17 13:41 cpuacct -&gt; cpu,cpuacctlrwxrwxrwx 1 root root 27 Dec 19 01:52 cpuacct,cpu -&gt; /sys/fs/cgroup/cpu,cpuacct/dr-xr-xr-x 5 root root  0 Nov 17 13:41 cpu,cpuacctdr-xr-xr-x 3 root root  0 Nov 17 13:41 cpuset#注：这一步只是将原本的可读更改为了可读，可写[root@k8s-master01 cadvisor]# kubectl apply -f daemonset.yaml daemonset.apps/cadvisor created#镜像需要获得，课程中已经配置了镜像地址直接下载就好[root@k8s-master01 cadvisor]# kubectl -n kube-system get pod -o wide|grep cadvisorcadvisor-29nv5  1/1     Running   0  2m17s   192.168.1.112    k8s-master02   cadvisor-lnpwj  1/1     Running   0  2m17s   192.168.1.114    k8s-node01     cadvisor-wmr57  1/1     Running   0  2m17s   192.168.1.111    k8s-master01   cadvisor-zcz78  1/1     Running   0  2m17s   192.168.1.115    k8s-node02[root@k8s-master01 ~]# netstat -luntp|grep 4194tcp6       0      0 :::4194 </code></pre><h5 id="4-部署blackbox-exporter-黑盒监控"><a href="#4-部署blackbox-exporter-黑盒监控" class="headerlink" title="4 部署blackbox-exporter 黑盒监控"></a>4 部署blackbox-exporter 黑盒监控</h5><blockquote><p>Prometheus 官方提供的 exporter 之一，可以提供 http、dns、tcp、icmp 的监控数据采集</p></blockquote><pre><code class="hljs">官方github地址：https://github.com/prometheus/blackbox_exporterhttps://github.com/prometheus/blackbox_exporter/tree/v0.18.0/config/testdata</code></pre><ul><li>准备工作目录</li></ul><p>​<br>​<br>​    [root@k8s-master01 ~]# docker pull prom&#x2F;blackbox-exporter:v0.18.0<br>​    [root@k8s-master01 ~]# mkdir -p &#x2F;k8s-yaml&#x2F;blackbox-exporter &amp;&amp; cd &#x2F;k8s-yaml&#x2F;blackbox-exporter  </p><ul><li>资源清单创建</li></ul><p>​<br>​    [root@k8s-master01 blackbox-exporter]# vim blackbox-exporter-configmap.yaml</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>   <span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br>   <span class="hljs-attr">metadata:</span><br>     <span class="hljs-attr">labels:</span><br>       <span class="hljs-attr">app:</span> <span class="hljs-string">blackbox-exporter</span><br>     <span class="hljs-attr">name:</span> <span class="hljs-string">blackbox-exporter</span><br>     <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>   <span class="hljs-attr">data:</span><br>     <span class="hljs-attr">blackbox.yml:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">       modules:</span><br><span class="hljs-string">         http_2xx:</span><br><span class="hljs-string">           prober: http</span><br><span class="hljs-string">           timeout: 2s</span><br><span class="hljs-string">           http:</span><br><span class="hljs-string">             valid_http_versions: [&quot;HTTP/1.1&quot;, &quot;HTTP/2&quot;]</span><br><span class="hljs-string">             valid_status_codes: [200,301,302,404]</span><br><span class="hljs-string">             method: GET</span><br><span class="hljs-string">             preferred_ip_protocol: &quot;ip4&quot;</span><br><span class="hljs-string">         tcp_connect:</span><br><span class="hljs-string">           prober: tcp</span><br><span class="hljs-string">           timeout: 2s</span><br></code></pre></td></tr></table></figure><p>​            </p><pre><code class="hljs">[root@k8s-master01 blackbox-exporter]# vim blackbox-exporter-deployment.yamlkind: DeploymentapiVersion: apps/v1metadata:  name: blackbox-exporter  namespace: kube-system  labels:    app: blackbox-exporter  annotations:    kubernetes.io/replicationcontroller: Deploymentspec:  replicas: 1  selector:    matchLabels:      app: blackbox-exporter  template:    metadata:      labels:        app: blackbox-exporter    spec:      volumes:      - name: config        configMap:          name: blackbox-exporter          defaultMode: 420      containers:      - name: blackbox-exporter        image: prom/blackbox-exporter:v0.18.0        imagePullPolicy: IfNotPresent        args:        - --config.file=/etc/blackbox_exporter/blackbox.yml        - --log.level=info        - --web.listen-address=:9115        ports:        - name: blackbox-port          containerPort: 9115          protocol: TCP        resources:          limits:            cpu: 200m            memory: 256Mi          requests:            cpu: 100m            memory: 50Mi        volumeMounts:        - name: config          mountPath: /etc/blackbox_exporter        readinessProbe:          tcpSocket:            port: 9115          initialDelaySeconds: 5          timeoutSeconds: 5          periodSeconds: 10          successThreshold: 1          failureThreshold: 3[root@k8s-master01 blackbox-exporter]# vim blackbox-exporter-service.yamlkind: ServiceapiVersion: v1metadata:  name: blackbox-exporter  namespace: kube-systemspec:  type: NodePort  selector:    app: blackbox-exporter  ports:    - name: blackbox-port      port: 9115      targetPort: 9115      nodePort: 10015      protocol: TCP#说明：这里也可以使用ingress-nginx进行转发[root@k8s-master01 blackbox-exporter]# kubectl create -f .configmap/blackbox-exporter createddeployment.apps/blackbox-exporter createdservice/blackbox-exporter created[root@k8s-master01 blackbox-exporter]# kubectl get pod -n kube-systemNAME                                       READY   STATUS    RESTARTS        AGEblackbox-exporter-59fd868bfc-j4nfv         1/1     Running   0               2m37s[root@k8s-master01 blackbox-exporter]# kubectl get svc -n kube-systemNAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                 blackbox-exporter    NodePort    10.100.192.71   &lt;none&gt;        9115:10015/TCP          #如果在创建的时候提示端口区间则去修改集群端口或者更改成30000以上的端口比如说30015#然后浏览器去访问我们的IP:10015[root@k8s-master01 blackbox-exporter]# curl 192.168.1.114:10015..........    &lt;h1&gt;Blackbox Exporter&lt;/h1&gt;..........[root@k8s-master01 blackbox-exporter]#</code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="2、部署prometheus-server"><a href="#2、部署prometheus-server" class="headerlink" title="2、部署prometheus server"></a>2、部署prometheus server</h4><h5 id="2-1-准备prometheus-server环境"><a href="#2-1-准备prometheus-server环境" class="headerlink" title="2.1 准备prometheus server环境"></a>2.1 准备prometheus server环境</h5><pre><code class="hljs">官方dockerhub地址：https://hub.docker.com/r/prom/prometheus官方github地址：https://github.com/prometheus/prometheushttps://github.com/prometheus/prometheus/tree/v2.32.0/config/testdata当前最新版：2.32.0#1.准备目录[root@k8s-master01 ~]# mkdir /k8s-yaml/prometheus-server &amp;&amp; cd /k8s-yaml/prometheus-server</code></pre><ul><li>1.资源清单rabc</li></ul><p>​<br>​    [root@k8s-master01 prometheus-server]# vim rbac.yaml</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>      <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-string">---</span><br>  <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>      <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/metrics</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>    <span class="hljs-attr">verbs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>    <span class="hljs-attr">verbs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">nonResourceURLs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/metrics</span><br>    <span class="hljs-attr">verbs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-string">---</span><br>  <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>      <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">roleRef:</span><br>    <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>  <span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br></code></pre></td></tr></table></figure><h5 id="2-2-准备deploment资源清单"><a href="#2-2-准备deploment资源清单" class="headerlink" title="2.2.准备deploment资源清单"></a>2.2.准备deploment资源清单</h5><blockquote><p>--web.enable-lifecycle 启用远程热加载配置文件,配置文件改变后不用重启prometheus</p><p>curl -X POST <a href="http://localhost:9090/-/reload">http://localhost:9090/-/reload</a></p><p>storage.tsdb.min-block-duration&#x3D;10m 只加载10分钟数据</p><p>storage.tsdb.retention&#x3D;72h 保留72小时数据</p></blockquote><pre><code class="hljs">[root@k8s-master01 prometheus-server]# vim depoyment.yamlapiVersion: apps/v1kind: Deploymentmetadata:  annotations:    deployment.kubernetes.io/revision: &quot;5&quot;  labels:    name: prometheus  name: prometheus  namespace: kube-systemspec:  progressDeadlineSeconds: 600  replicas: 1  revisionHistoryLimit: 7  selector:    matchLabels:      app: prometheus  strategy:    rollingUpdate:      maxSurge: 1      maxUnavailable: 1    type: RollingUpdate  template:    metadata:      labels:        app: prometheus    spec:      hostAliases:      - ip: &quot;192.168.1.111&quot;        hostnames:        - &quot;k8s-master01&quot;      - ip: &quot;192.168.1.112&quot;        hostnames:        - &quot;k8s-master02&quot;      - ip: &quot;192.168.1.114&quot;        hostnames:        - &quot;k8s-node01&quot;        hostnames:      - ip: &quot;192.168.1.115&quot;        hostnames:        - &quot;k8s-node02&quot;      containers:      - name: prometheus        image: prom/prometheus:v2.32.0        imagePullPolicy: IfNotPresent        command:        - /bin/prometheus        args:        - --config.file=/data/etc/prometheus.yaml        #- --storage.tsdb.path=/data/prom-db        - --storage.tsdb.min-block-duration=10m        - --storage.tsdb.retention=72h        - --web.enable-lifecycle        ports:        - containerPort: 9090          protocol: TCP        volumeMounts:        - mountPath: /data/          name: data        resources:          requests:            cpu: &quot;1000m&quot;            memory: &quot;1.5Gi&quot;          limits:            cpu: &quot;2000m&quot;            memory: &quot;3Gi&quot;      imagePullSecrets:      - name: harbor      securityContext:        runAsUser: 0      serviceAccountName: prometheus      volumes:      - name: data        nfs:          path: /data/nfs-volume/prometheus/          server: 192.168.1.115#注意这里要在某一台机器上创建nfs存储，这里我是在192.168.1.115  k8s-node02创建的(生产环境可以使用其它比如说glusterfs存储都可以)[root@k8s-node02 ~]# yum install nfs-utils -y[root@k8s-node02 ~]# mkdir -p /data/nfs-volume/prometheus/[root@k8s-node02 ~]# mkdir -p /data/nfs-volume/prometheus/etc[root@k8s-node02 ~]# mkdir -p /data/nfs-volume/prometheus/prom-db[root@k8s-node02 ~]# cat /etc/exports/data/nfs-volume/prometheus/ * (rw,fsid=0,sync)[root@k8s-node02 ~]# systemctl start nfs-server[root@k8s-node02 ~]# systemctl enable nfs-server</code></pre><ul><li>准备svc资源清单(准备完了service也可以使用ingress-nginx的方式配置域名访问，这里我没配置)</li></ul><p>​<br>​    [root@k8s-master01 prometheus-server]# vim service.yaml</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>   <span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br>   <span class="hljs-attr">metadata:</span><br>     <span class="hljs-attr">name:</span> <span class="hljs-string">prometheus</span><br>     <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>   <span class="hljs-attr">spec:</span><br>     <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>     <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>       <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>       <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9090</span><br>       <span class="hljs-attr">nodePort:</span> <span class="hljs-number">10090</span><br>     <span class="hljs-attr">selector:</span><br>       <span class="hljs-attr">app:</span> <span class="hljs-string">prometheus</span><br></code></pre></td></tr></table></figure><p>​    </p><pre><code class="hljs">#在master创建资源文件[root@k8s-master01 prometheus-server]# kubectl create -f .</code></pre><ul><li>创建prometheus配置文件 注意：因为设置了共享，所以文件创建在nfs 192.168.1.115这台机器</li></ul><p>配置文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># cd /data/nfs-volume/prometheus/etc/</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">etc</span>]<span class="hljs-comment"># cat prometheus.yaml </span><br><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span>     <span class="hljs-string">15s</span><br>  <span class="hljs-attr">evaluation_interval:</span> <span class="hljs-string">15s</span><br><span class="hljs-attr">scrape_configs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;kubernetes-apiservers&#x27;</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">https</span><br>  <span class="hljs-attr">tls_config:</span><br>    <span class="hljs-attr">ca_file:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br>  <span class="hljs-attr">bearer_token_file:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount/token</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_namespace</span>, <span class="hljs-string">__meta_kubernetes_service_name</span>, <span class="hljs-string">__meta_kubernetes_endpoint_port_name</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">default;kubernetes;https</span><br>    <br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;kubernetes-pods&#x27;</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">pod</span><br>  <span class="hljs-comment"># 监听 Kubernetes 集群中的所有 Pod（其他可选角色如 node、service 等）。</span><br>  <br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_scrape</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-string">作用:</span> <span class="hljs-string">仅保留带有注解</span> <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span> <span class="hljs-string">的</span> <span class="hljs-string">Pod。</span><br>    <span class="hljs-string">逻辑:</span><br>        <span class="hljs-string">检查</span> <span class="hljs-string">Pod</span> <span class="hljs-string">的注解</span> <span class="hljs-string">prometheus.io/scrape</span> <span class="hljs-string">的值。</span><br>        <span class="hljs-string">若值为</span> <span class="hljs-literal">true</span><span class="hljs-string">，则保留该目标；否则丢弃。</span><br>        <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_path</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__metrics_path__</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(.+)</span><br>    <span class="hljs-string">将</span> <span class="hljs-string">Pod</span> <span class="hljs-string">注解</span> <span class="hljs-string">prometheus.io/path</span> <span class="hljs-string">的值作为指标路径。</span><br>    <span class="hljs-string">若注解为</span> <span class="hljs-attr">prometheus.io/path:</span> <span class="hljs-string">&quot;/metrics&quot;</span><span class="hljs-string">，则目标的指标路径变为</span> <span class="hljs-string">http://&lt;pod_ip&gt;:&lt;port&gt;/metrics。</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>, <span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_port</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+)</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1:$2</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>    <span class="hljs-string">组合</span> <span class="hljs-string">Pod</span> <span class="hljs-string">IP</span> <span class="hljs-string">和注解</span> <span class="hljs-string">prometheus.io/port</span> <span class="hljs-string">的端口，生成完整的监控地址。</span><br>    <span class="hljs-string">逻辑:</span><br>        <span class="hljs-string">__address__</span> <span class="hljs-string">默认是</span> <span class="hljs-string">pod_ip:container_port，但可能不符合实际监控端口。</span><br>        <span class="hljs-string">通过正则</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+)</span> <span class="hljs-string">提取</span> <span class="hljs-string">Pod</span> <span class="hljs-string">IP</span> <span class="hljs-string">和注解中的端口，格式化为</span> <span class="hljs-string">pod_ip:port。</span><br>        <span class="hljs-string">示例:</span> <span class="hljs-string">若</span> <span class="hljs-string">__address__</span> <span class="hljs-string">为</span> <span class="hljs-number">10.1</span><span class="hljs-number">.2</span><span class="hljs-number">.3</span><span class="hljs-string">，注解</span> <span class="hljs-string">prometheus.io/port</span> <span class="hljs-string">为</span> <span class="hljs-number">8080</span><span class="hljs-string">，则最终地址为</span> <span class="hljs-number">10.1</span><span class="hljs-number">.2</span><span class="hljs-number">.3</span><span class="hljs-string">:8080。</span><br>    <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_pod_label_(.+)</span><br>    <span class="hljs-string">将</span> <span class="hljs-string">Pod</span> <span class="hljs-string">的所有标签（Labels）作为监控目标的标签</span><br>    <span class="hljs-string">逻辑:</span><br>        <span class="hljs-string">匹配</span> <span class="hljs-string">__meta_kubernetes_pod_label_&lt;label_name&gt;</span> <span class="hljs-string">的元标签，将其转换为</span> <span class="hljs-string">&lt;label_name&gt;:</span> <span class="hljs-string">&lt;label_value&gt;。</span><br>        <span class="hljs-string">示例:</span> <span class="hljs-string">Pod</span> <span class="hljs-string">标签</span> <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span> <span class="hljs-string">会变为目标的标签</span> <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>        <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_namespace</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_namespace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_name</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_pod_name</span><br> <span class="hljs-string">显式添加</span> <span class="hljs-string">kubernetes_namespace</span> <span class="hljs-string">和</span> <span class="hljs-string">kubernetes_pod_name</span> <span class="hljs-string">标签，便于筛选</span><br>    <span class="hljs-string">逻辑:</span><br><span class="hljs-string">将元标签</span> <span class="hljs-string">__meta_kubernetes_namespace</span> <span class="hljs-string">和</span> <span class="hljs-string">__meta_kubernetes_pod_name</span> <span class="hljs-string">的值分别映射到自定义标签。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;kubernetes-kubelet&#x27;</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">node</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_node_label_(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_node_name</span>]<br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(.+)</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$&#123;1&#125;:10015</span><br>    <br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;kubernetes-cadvisor&#x27;</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">node</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_node_label_(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_node_name</span>]<br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(.+)</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$&#123;1&#125;:4194</span><br>    <br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;kubernetes-kube-state&#x27;</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">pod</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_pod_label_(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_namespace</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_namespace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_name</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_pod_name</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_label_grafanak8sapp</span>]<br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">.*true.*</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">&#x27;__meta_kubernetes_pod_label_daemon&#x27;</span>, <span class="hljs-string">&#x27;__meta_kubernetes_pod_node_name&#x27;</span>]<br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">&#x27;node-exporter;(.*)&#x27;</span><br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">nodename</span><br>    <br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;blackbox_http_pod_probe&#x27;</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/probe</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">pod</span><br>  <span class="hljs-attr">params:</span><br>    <span class="hljs-attr">module:</span> [<span class="hljs-string">http_2xx</span>]<br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_blackbox_scheme</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">http</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>, <span class="hljs-string">__meta_kubernetes_pod_annotation_blackbox_port</span>,  <span class="hljs-string">__meta_kubernetes_pod_annotation_blackbox_path</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+);(.+)</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1:$2$3</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__param_target</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">blackbox-exporter.kube-system:9115</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__param_target</span>]<br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">instance</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_pod_label_(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_namespace</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_namespace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_name</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_pod_name</span><br>    <br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;blackbox_tcp_pod_probe&#x27;</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/probe</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">pod</span><br>  <span class="hljs-attr">params:</span><br>    <span class="hljs-attr">module:</span> [<span class="hljs-string">tcp_connect</span>]<br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_blackbox_scheme</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">tcp</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>, <span class="hljs-string">__meta_kubernetes_pod_annotation_blackbox_port</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+)</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1:$2</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__param_target</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">blackbox-exporter.kube-system:9115</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__param_target</span>]<br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">instance</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_pod_label_(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_namespace</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_namespace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_name</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_pod_name</span><br>    <br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;traefik&#x27;</span><br>  <span class="hljs-attr">kubernetes_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">pod</span><br>  <span class="hljs-attr">relabel_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_scheme</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">traefik</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_path</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__metrics_path__</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>, <span class="hljs-string">__meta_kubernetes_pod_annotation_prometheus_io_port</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">([^:]+)(?::\d+)?;(\d+)</span><br>    <span class="hljs-attr">replacement:</span> <span class="hljs-string">$1:$2</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">action:</span> <span class="hljs-string">labelmap</span><br>    <span class="hljs-attr">regex:</span> <span class="hljs-string">__meta_kubernetes_pod_label_(.+)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_namespace</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_namespace</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_kubernetes_pod_name</span>]<br>    <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>    <span class="hljs-attr">target_label:</span> <span class="hljs-string">kubernetes_pod_name</span><br></code></pre></td></tr></table></figure><ul><li>启动Prometheus</li></ul><p>​<br>​<br>​    [root@k8s-master01 prometheus-server]# ls<br>​    depoyment.yaml  rbac.yaml  service.yaml<br>​    [root@k8s-master01 prometheus-server]# kubectl apply -f .</p><h5 id="2-3-浏览器验证"><a href="#2-3-浏览器验证" class="headerlink" title="2.3 浏览器验证"></a>2.3 浏览器验证</h5><p>访问192.168.1.114:10090 ,如果能成功访问的话,表示启动成功</p><p>点击 <strong>status- &gt;configuration</strong>就是我们的配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/1601219938865-a380d765-1bde-4948-9878-46528803c465.png" alt="img"></p><ul><li>2.4使服务能被prometheus自动监控</li></ul><p>点击 <strong>status- &gt;targets</strong>，展示的就是我们在prometheus.yml中配置的job-name，这些targets基本可以满足我们收集数据的需求。</p><p>4个编号的job-name已经被发现并获取数据。</p><blockquote><p>思考：如何将应用pod等监控进来</p></blockquote><h4 id="3-grafana部署"><a href="#3-grafana部署" class="headerlink" title="3.grafana部署"></a>3.grafana部署</h4><pre><code class="hljs">官方dockerhub地址：https://hub.docker.com/r/grafana/grafana官方github地址：https://github.com/grafana/grafanagrafana官网：https://grafana.com/</code></pre><p>​<br>​<br>​    #首先需要创建共享存储目录 192.168.1.115<br>​    [root@k8s-node02 grafana]# cat &#x2F;etc&#x2F;exports<br>​    &#x2F;data&#x2F;nfs-volume&#x2F;prometheus&#x2F; * (rw,fsid&#x3D;0,sync)<br>​    &#x2F;data&#x2F;nfs&#x2F;grafana&#x2F; * (rw,sync)<br>​    [root@k8s-node02 grafana]# mkdir &#x2F;data&#x2F;nfs&#x2F;grafana&#x2F; -p<br>​    [root@k8s-node02 grafana]# systemctl restart nfs<br>​    </p><pre><code class="hljs">#创建grafana需要的yaml文件[root@k8s-master01 ~]# mkdir /k8s-yaml/grafana &amp;&amp; cd /k8s-yaml/grafana[root@k8s-master01 grafana]# vim grafana.yaml[root@k8s-master01 grafana]# cat grafana.yaml apiVersion: apps/v1kind: Deploymentmetadata:  name: grafana  namespace: kube-system  labels:    app: grafanaspec:  replicas: 1  selector:    matchLabels:      app: grafana  template:    metadata:      labels:        app: grafana    spec:      containers:      - name: grafana        image: grafana/grafana:latest        ports:        - containerPort: 3000        volumeMounts:---apiVersion: v1kind: Servicemetadata:  name: grafana-svc  namespace: kube-systemspec:  ports:  - port: 3000    targetPort: 3000    nodePort: 3303  type: NodePort  selector:    app: grafana    [root@k8s-master01 grafana]# kubectl create -f grafana.yaml deployment.apps/grafana createdservice/grafana-svc created[root@k8s-master01 grafana]# kubectl get pod -n kube-system |grep grafanagrafana-6dc6566c6b-44wsw                   1/1     Running       0               22s11074 11670   8588  </code></pre>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos8忘记root用户密码</title>
    <link href="/2025/03/19/Centos8%E5%BF%98%E8%AE%B0root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2025/03/19/Centos8%E5%BF%98%E8%AE%B0root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1-启动centos8系统-在开机界面选择第一行，按e"><a href="#1-启动centos8系统-在开机界面选择第一行，按e" class="headerlink" title="1.启动centos8系统,在开机界面选择第一行，按e"></a>1.启动centos8系统,在开机界面选择第一行，按e</h2><p><img src="https://www.ttgogogo.cn/usr/uploads/2022/02/3353281327.jpg" alt="10.jpg"></p><h2 id="2-进入以下界面，找到ro并将其修改为rw-init-sysroot-bin-bash"><a href="#2-进入以下界面，找到ro并将其修改为rw-init-sysroot-bin-bash" class="headerlink" title="2.进入以下界面，找到ro并将其修改为rw init&#x3D;&#x2F;sysroot&#x2F;bin&#x2F;bash"></a>2.进入以下界面，找到ro并将其修改为rw init&#x3D;&#x2F;sysroot&#x2F;bin&#x2F;bash</h2><p><img src="https://www.ttgogogo.cn/usr/uploads/2022/02/1320728506.png" alt="11.png"></p><h2 id="3-同时按住ctrl和x键，系统进入以下界面"><a href="#3-同时按住ctrl和x键，系统进入以下界面" class="headerlink" title="3.同时按住ctrl和x键，系统进入以下界面"></a>3.同时按住ctrl和x键，系统进入以下界面</h2><p> <img src="https://www.ttgogogo.cn/usr/uploads/2022/02/269935157.png" alt="12.png"></p><h2 id="4-输入以下命令修改密码"><a href="#4-输入以下命令修改密码" class="headerlink" title="4.输入以下命令修改密码"></a>4.输入以下命令修改密码</h2><p>&#x2F;# chroot &#x2F;sysroot&#x2F;      &#x2F;切换回原始系统&#x2F;</p><p>&#x2F;# LANG&#x3D;en           &#x2F;把语言改为英文&#x2F;</p><p>&#x2F;# passwd            &#x2F;设置新密码&#x2F;</p><p>&#x2F;# touch &#x2F;.autorelabel    &#x2F;使密码生效&#x2F;</p><p><img src="https://www.ttgogogo.cn/usr/uploads/2022/02/794660917.png" alt="1.png"></p><h2 id="5-同时按住Ctrl和d键，进入以下界面，输入reboot，重启系统"><a href="#5-同时按住Ctrl和d键，进入以下界面，输入reboot，重启系统" class="headerlink" title="5.同时按住Ctrl和d键，进入以下界面，输入reboot，重启系统"></a>5.同时按住Ctrl和d键，进入以下界面，输入reboot，重启系统</h2><p><img src="https://www.ttgogogo.cn/usr/uploads/2022/02/4091631669.png" alt="14.png"></p><h2 id="6-系统重启成功后，输入新设置的密码即可正常登录"><a href="#6-系统重启成功后，输入新设置的密码即可正常登录" class="headerlink" title="6.系统重启成功后，输入新设置的密码即可正常登录"></a>6.系统重启成功后，输入新设置的密码即可正常登录</h2><p>原文来自：<a href="https://www.cnblogs.com/canyezhizi/p/13574958.html">Cnblog</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7忘记root账户密码</title>
    <link href="/2025/03/19/Centos7%E5%BF%98%E8%AE%B0root%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2025/03/19/Centos7%E5%BF%98%E8%AE%B0root%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h4 id="第一步：开启服务器，在如下界面键入”e”进入编辑"><a href="#第一步：开启服务器，在如下界面键入”e”进入编辑" class="headerlink" title="第一步：开启服务器，在如下界面键入”e”进入编辑"></a>第一步：开启服务器，在如下界面键入”e”进入编辑</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319171617009.png" alt="image-20250319171617009"></p><h4 id="第二步：找到以linux16开头的一行，在本行行尾键入”rd-break”"><a href="#第二步：找到以linux16开头的一行，在本行行尾键入”rd-break”" class="headerlink" title="第二步：找到以linux16开头的一行，在本行行尾键入”rd.break”"></a>第二步：找到以linux16开头的一行，在本行行尾键入”rd.break”</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319171636219.png" alt="image-20250319171636219"></p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319171654534.png" alt="image-20250319171654534"></p><h4 id="第三步：输入完成后，按“Ctrl-x”运行"><a href="#第三步：输入完成后，按“Ctrl-x”运行" class="headerlink" title="第三步：输入完成后，按“Ctrl+x”运行"></a>第三步：输入完成后，按“Ctrl+x”运行</h4><h4 id="第四步：现在的根为只读状态，需要挂载为读写状态以便进行修改；输入“mount-o-remount-rw-sysroot”"><a href="#第四步：现在的根为只读状态，需要挂载为读写状态以便进行修改；输入“mount-o-remount-rw-sysroot”" class="headerlink" title="第四步：现在的根为只读状态，需要挂载为读写状态以便进行修改；输入“mount -o remount,rw &#x2F;sysroot”"></a>第四步：现在的根为只读状态，需要挂载为读写状态以便进行修改；输入“mount -o remount,rw &#x2F;sysroot”</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172132380.png" alt="image-20250319172132380"></p><h4 id="第六步：切换根，进入到sh"><a href="#第六步：切换根，进入到sh" class="headerlink" title="第六步：切换根，进入到sh"></a>第六步：切换根，进入到sh</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172627511.png" alt="image-20250319172627511"></p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172647504.png" alt="image-20250319172647504"></p><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172709327.png" alt="image-20250319172709327"></p><h4 id="第八步：退出并重启"><a href="#第八步：退出并重启" class="headerlink" title="第八步：退出并重启"></a>第八步：退出并重启</h4><p><img src="https://cdn.jsdelivr.net/gh/Tis-FYI/img@main/image-20250319172726698.png" alt="image-20250319172726698"></p><h4 id="第九步：使用新密码进行登录"><a href="#第九步：使用新密码进行登录" class="headerlink" title="第九步：使用新密码进行登录"></a>第九步：使用新密码进行登录</h4>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么获取磁盘配额的sid</title>
    <link href="/2025/03/19/%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E7%A3%81%E7%9B%98%E9%85%8D%E9%A2%9D%E7%9A%84sid/"/>
    <url>/2025/03/19/%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E7%A3%81%E7%9B%98%E9%85%8D%E9%A2%9D%E7%9A%84sid/</url>
    
    <content type="html"><![CDATA[<h1 id="导出对应的sid信息到文本"><a href="#导出对应的sid信息到文本" class="headerlink" title="导出对应的sid信息到文本"></a>导出对应的sid信息到文本</h1><p>sutil.exe quota query D: &gt; 1.txt</p><h1 id="查询特定的sid"><a href="#查询特定的sid" class="headerlink" title="查询特定的sid"></a>查询特定的sid</h1><p>wmic useraccount get name,sid |findstr ftp用户名</p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux查看登录日志</title>
    <link href="/2025/03/19/Linux%E6%9F%A5%E7%9C%8B%E7%99%BB%E5%BD%95%E6%97%A5%E5%BF%97/"/>
    <url>/2025/03/19/Linux%E6%9F%A5%E7%9C%8B%E7%99%BB%E5%BD%95%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>####&#x2F;var&#x2F;run&#x2F;utmp</p><blockquote><p>(用于记录当前打开的会话)被<code>who</code>和<code>w</code>用来记录当前有谁登录以及他们正在做什么，uptime用来记录系统启动时间。</p></blockquote><p>####&#x2F;var&#x2F;log&#x2F;wtmp</p><blockquote><p>(用于存储系统连接历史记录)被last工具用来记录最后登录的用户的列表。</p></blockquote><p>####&#x2F;var&#x2F;log&#x2F;btmp</p><blockquote><p>(记录失败的登录尝试)被lastb工具用来记录最后失败的登录尝试的列表。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows使用APPCMD导出对应的配置内容</title>
    <link href="/2025/03/19/windows%E4%BD%BF%E7%94%A8APPCMD%E5%AF%BC%E5%87%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9/"/>
    <url>/2025/03/19/windows%E4%BD%BF%E7%94%A8APPCMD%E5%AF%BC%E5%87%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="导出所有应用程序池"><a href="#导出所有应用程序池" class="headerlink" title="导出所有应用程序池"></a>导出所有应用程序池</h4><blockquote><p>%windir%\system32\inetsrv\appcmd list apppool &#x2F;config &#x2F;xml &gt; c:\apppools.xml</p></blockquote><h4 id="导入所有应用程序池"><a href="#导入所有应用程序池" class="headerlink" title="导入所有应用程序池"></a>导入所有应用程序池</h4><blockquote><p>%windir%\system32\inetsrv\appcmd add apppool &#x2F;in &lt; c:\apppools.xml</p></blockquote><h4 id="导出所有站点"><a href="#导出所有站点" class="headerlink" title="导出所有站点"></a>导出所有站点</h4><blockquote><p>%windir%\system32\inetsrv\appcmd list site &#x2F;config &#x2F;xml &gt; c:\sites.xml</p></blockquote><h4 id="导入所有站点"><a href="#导入所有站点" class="headerlink" title="导入所有站点"></a>导入所有站点</h4><blockquote><p>%windir%\system32\inetsrv\appcmd add site &#x2F;in &lt; c:\sites.xml</p></blockquote><h4 id="导出单独的应用程序池"><a href="#导出单独的应用程序池" class="headerlink" title="导出单独的应用程序池"></a>导出单独的应用程序池</h4><blockquote><p>%windir%\system32\inetsrv\appcmd list apppool “应用程序池名称” &#x2F;config &#x2F;xml &gt; c:\myapppool.xml</p></blockquote><h4 id="导入单独的应用程序池"><a href="#导入单独的应用程序池" class="headerlink" title="导入单独的应用程序池"></a>导入单独的应用程序池</h4><blockquote><p>%windir%\system32\inetsrv\appcmd add apppool &#x2F;in &lt; c:\myapppool.xml</p></blockquote><h1 id="导出单独站点"><a href="#导出单独站点" class="headerlink" title="导出单独站点"></a>导出单独站点</h1><blockquote><p>%windir%\system32\inetsrv\appcmd list site “站点名称” &#x2F;config &#x2F;xml &gt; c:\mywebsite.xml</p></blockquote><h1 id="导入单独站点"><a href="#导入单独站点" class="headerlink" title="导入单独站点"></a>导入单独站点</h1><blockquote><p>%windir%\system32\inetsrv\appcmd add site &#x2F;in &lt; c:\mywebsite.xml</p></blockquote><p><a href="https://www.cnblogs.com/fanful/p/13061783.html">原来来自</a>：<a href="https://www.cnblogs.com/fanful/p/13061783.html">https://www.cnblogs.com/fanful/p/13061783.html</a></p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="/2025/03/19/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/03/19/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h4 id="一-Redis简介"><a href="#一-Redis简介" class="headerlink" title="一.Redis简介"></a>一.Redis简介</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Redis 是一个开源（BSD 许可）的内存中数据结构存储，用作数据库、缓存、消息代理和流引擎。Redis 提供数据结构，例如字符串、哈希、列表、集、带有范围查询的排序集、位图、hyperloglog、地理空间索引和流。Redis 具有内置复制、Lua 脚本、LRU 逐出、事务和不同级别的磁盘持久性，并通过 Redis Sentinel 提供高可用性，并使用 Redis Cluster 进行自动分区。<br>可以对这些类型运行原子操作，例如追加到字符串;递增哈希中的值;将元素推送到列表;计算集交集、并集和差分;或者在排序集中获得排名最高的成员。<br>Redis 可以通过定期将数据集转储到磁盘或将每个命令附加到基于磁盘的日志来持久保存数据。<br>Redis 支持异步复制，具有快速无阻塞同步和自动重新连接，并在网络拆分时进行部分重新同步。<br></code></pre></td></tr></table></figure><h4 id="二-在linux上安装redis"><a href="#二-在linux上安装redis" class="headerlink" title="二.在linux上安装redis"></a>二.在linux上安装redis</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># ubuntu/Debian安装方法</span><br>curl -fsSL https://packages.redis.io/gpg | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg <span class="hljs-comment"># 下载密钥</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb <span class="hljs-subst">$(lsb_release -cs)</span> main&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/redis.list<br><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install redis<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># centos yum 方式安装redis</span><br><span class="hljs-built_in">sudo</span> yum install epel-release<br><span class="hljs-built_in">sudo</span> yum update<br><br>然后安装Redis数据库：<br><span class="hljs-built_in">sudo</span> yum -y install redis<br><br>安装好后启动Redis服务即可：<br><span class="hljs-built_in">sudo</span> systemctl start redis<br>这里同样可以使用redis-cli进入Redis命令行模式操作。<br><br>需要修改配置文件，路径为/etc/redis.conf<br><br>vi /etc/redis.conf<br>需要修改的地方：<br><br>首先，注释这一行：#<span class="hljs-built_in">bind</span> 127.0.0.1<br><br>另外，推荐给Redis设置密码，取消注释这一行并设置密码：#requirepass foobared<br><br>然后重启Redis服务，使用的命令如下：<br><br><span class="hljs-built_in">sudo</span> systemctl restart redis<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 源码编译redis</span><br>https://redis.io/download/ <span class="hljs-comment"># 下载地址</span><br><br>tar -zxvf redis-xxxx.tar.gz  <span class="hljs-comment"># 解压下载的redis压缩包</span><br><br>yum install gcc-c++ -y <span class="hljs-comment"># 安装编译工具</span><br><br>gcc -v  <span class="hljs-comment">#查看GCC版本</span><br><br><span class="hljs-built_in">cd</span> redis-x.x.x  &amp;&amp; make &amp;&amp; make install  <span class="hljs-comment"># 切换到源码路径下进行编译  ，或者是可以指定你向要存放redis的路径  make install PREFIX=/usr/local/redis/</span><br><br><span class="hljs-comment"># 如果是编译好的二进制执行文件放到对应的bin目录下，那么可以直接  redis-server 启动对应的redis</span><br><br><span class="hljs-comment"># 后台模式启动redis，需要修改redis配置文件当中的daemonize字段为yes，修改完成之后重新启动服务</span><br><br><span class="hljs-comment"># 登录redis</span><br>redis-cli -h 192.168.10.20 -p 6379  <span class="hljs-comment"># 远程连接redis，进入之后，如果是之前设置过redis的密码，那么使用auth  密码  进行认证</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># windows 上安装redis，官方是不支持windows的，但是可以安装WSL2来运行linux的二进制包</span><br><br>To install Redis on Windows, you<span class="hljs-string">&#x27;ll first need to enable WSL2 (Windows Subsystem for Linux). WSL2 lets you run Linux binaries natively on Windows. For this method to work, you&#x27;</span>ll need to be running Windows 10 version 2004 and higher or Windows 11<br><br></code></pre></td></tr></table></figure><h4 id="三-怎么升级redis"><a href="#三-怎么升级redis" class="headerlink" title="三.怎么升级redis"></a>三.怎么升级redis</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">注意，在看本教程前，请先自行备份配置文件以及数据。<br>如果持久化用的是rdb，备份<span class="hljs-string">.rdb</span>文件，默认叫dump.rdb，如果你更改为其他名字，请自行查看配置，你的<span class="hljs-string">.rdb</span>叫什么。完成本教程后，把<span class="hljs-string">.rdb</span>文件放入redis的启动目录即可。不知道启动目录，就在redis-cil 命令行输入config get dir查看<br>如果持久化用的是aof，备份<span class="hljs-string">.aof</span>文件，默认叫appendonly.aof<br>本教程写的时候是redis版本是 redis-6.0.9 ，如果高于此版本或者低于此版本，目录结果不一样，请安装redis-6.0.9 版本，把文中的 redis-X.X.X 替换为 redis-6.0.9<br>系统版本<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">如果是通过 apt-get install redis-server 方式安装的 redis ，可以输入 apt-get remove --purge redis-server 进行redis的卸载操作，输入此命令会问你是否卸载，输入 Y 确认卸载 redis 。<br>然后输入 redis-server -v 查看是否卸载完成，如果出现提示 Command <span class="hljs-string">&#x27;redis-server&#x27;</span> not found 说明卸载成功。<br><br><span class="hljs-comment"># 卸载redis</span><br>apt-get remove --purge redis-server<br><span class="hljs-comment"># 卸载之后查看redis版本信息</span><br>redis-server -v<br><br><span class="hljs-comment"># 安装编译工具gcc</span><br>检查是否安装了 gcc ，输入 gcc --version 进行查看是否安装了 gcc ，如果出现 Command <span class="hljs-string">&#x27;gcc&#x27;</span> not found,but can be installed with: apt install gcc ，则说明没用安装 gcc，需要输入 apt install gcc 进行安装。然后再次输入 gcc --version 查看是否安装成功<br><br><br><br>然后进入 /usr/local 目录下载 redis 最新安装压缩包，安装完成后输入 <span class="hljs-built_in">ls</span> 可以查看到下载成功的文件 redis-x.x.x.taz.gz。去 redis官网 查看下载链接以及最新版本。<br><br><span class="hljs-built_in">cd</span> /usr/local<br><br><span class="hljs-comment"># 进入 /usr/local 目录</span><br><br>wget https://download.redis.io/releases/redis-X.X.X.tar.gz<br><br><span class="hljs-comment"># 下载最新的 redis ，此处我用 X.X.X 代替，因为 redis 是一直在更新的，所以你自己去官方查看</span><br><br><span class="hljs-built_in">ls</span>  <span class="hljs-comment"># 看到有 redis-x.x.x.taz.gz ，说明下载成功</span><br></code></pre></td></tr></table></figure><h4 id="解压安装redis"><a href="#解压安装redis" class="headerlink" title="解压安装redis"></a>解压安装redis</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">然后解压 redis-x.x.x.taz.gz ，输入 <span class="hljs-built_in">ls</span> 查看解压后的目录 redis-x.x.x ，然后进入 redis-x.x.x 目录，输入 make 进行编译，编译完成后 进入 src 目录，输入 make install 进行安装<br><br>tar xzf redis-x.x.x.taz.gz<br><br><span class="hljs-comment"># 解压压缩包</span><br><br><span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 查看解压后的目录 redis-x.x.x</span><br><br><span class="hljs-built_in">cd</span> redis-x.x.x<br><br><span class="hljs-comment"># 进入解压后的 redis-x.x.x 目录</span><br><br>make<br><br><span class="hljs-comment"># 进行编译,此处时间可能会有点久</span><br><br><span class="hljs-built_in">cd</span> src &amp;&amp; make install  <span class="hljs-comment"># 自行切换下载的源码路径</span><br><br><span class="hljs-comment"># 进入src 目录并进行安装</span><br><br><span class="hljs-comment"># 出现下面显示，说明安装成功</span><br></code></pre></td></tr></table></figure><h4 id="复制配置文件（如果是有原来的配置文件，记得保存一份-下面是对配置文件以及启动脚本做调整）"><a href="#复制配置文件（如果是有原来的配置文件，记得保存一份-下面是对配置文件以及启动脚本做调整）" class="headerlink" title="复制配置文件（如果是有原来的配置文件，记得保存一份,下面是对配置文件以及启动脚本做调整）"></a>复制配置文件（如果是有原来的配置文件，记得保存一份,下面是对配置文件以及启动脚本做调整）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sh">然后创建 /etc/redis 目录，把 /usr/local/redis-X.X.X/redis.conf 文件复制到 /etc/redis/redis.conf ，复制完成后，再把 /usr/local/redis-.X.X.X/utils/redis_init_script 文件复制到 /etc/init.d/redis<br><br><span class="hljs-built_in">mkdir</span> -p /etc/redis<br><br><span class="hljs-comment"># 创建 /etc/redis 目录</span><br><br><span class="hljs-built_in">cp</span> /usr/local/redis-X.X.X/redis.conf /etc/redis/redis.conf<br><br><span class="hljs-comment"># 把配置文件复制到 /etc/redis 目录下</span><br><br><span class="hljs-built_in">cp</span> /usr/local/redis-.X.X.X/utils/redis_init_script /etc/init.d/redis<br><br><span class="hljs-comment"># 把启动脚本复制到 /etc/init.d 目录下，通常都以d结尾表示是后台自启动服务</span><br><br>然后进行 redis配置文件设置<br><br><span class="hljs-comment"># 把 daemonize 设置为 yes ，因为redis 默认不开启守护进程模式</span><br>sed -i <span class="hljs-string">&#x27;s/daemonize no/daemonize yes/g&#x27;</span> /etc/redis/redis.conf<br><br><br><span class="hljs-comment"># 如果要开启远程访问，就进行修改，* 代表任何地址都能访问，redis 默认是</span><br><br><span class="hljs-comment"># 只能本地访问，不过不想任何地址都能访问，就把 * 改成你的IP地址</span><br>sed -i <span class="hljs-string">&#x27;s/bind 127.0.0.1/bind */g&#x27;</span> /etc/redis/redis.conf<br><br><br><span class="hljs-comment"># 此命令是设置redis密码设置成123456，redis默认是没有密码的。</span><br><span class="hljs-comment"># 如果你不想设置密码，可以不输入此命令设置密码（防止五认证登录redis，建议还是设置密码认证）</span><br>sed -i <span class="hljs-string">&#x27;s/# requirepass foobared/requirepass 123456/g&#x27;</span> /etc/redis.conf<br><br><span class="hljs-comment">#最后设置开机自启redis以及启动redis服务</span><br><br>update-rc.d -f redis defaults<br><br><span class="hljs-comment"># 设置开机执行脚本，也就是添加开机自启</span><br><br>service redis start<br><br><span class="hljs-comment"># 启动redis服务</span><br><br>redis-server -v<br><br><span class="hljs-comment"># 查看redis版本号，验证一下是否启动成功</span><br><br>ps -ef | grep redis<br><br><span class="hljs-comment"># 也可以输入此命令查看redis是否启动成功</span><br><br><br></code></pre></td></tr></table></figure><h4 id="错误与解决办法"><a href="#错误与解决办法" class="headerlink" title="错误与解决办法"></a>错误与解决办法</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">遇到的错误解决方案：<br>如果遇到权限不足，切换成 root 用户或者命令加上 <span class="hljs-built_in">sudo</span><br><br>输入 redis-server 报错 bash: /usr/bin/redis-server: No such file or directory<br>解决方案<br>1、重启一下服务器。<br>2、或者建立软连接<br><span class="hljs-built_in">ln</span> -s /usr/bin/redis-server /usr/local/bin/redis-server<br>3、或者添加环境变量path<br></code></pre></td></tr></table></figure><h4 id="四-redis-cli当中的一些基础命令"><a href="#四-redis-cli当中的一些基础命令" class="headerlink" title="四.redis-cli当中的一些基础命令"></a>四.redis-cli当中的一些基础命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将标准输出内容输出到文件当中</span><br>redis-cli --raw INCR mycounter<br><br><span class="hljs-comment"># 远程连接redis服务器并执行命令，类似于mysql外部执行命令</span><br>$ redis-cli -h redis15.localnet.org -p 6390 PING<br><br><span class="hljs-comment"># 对于有密码的情况，需要使用-a参数指定对应的密码</span><br>$ redis-cli -a myUnguessablePazzzzzword123 PING<br><br><span class="hljs-comment"># it&#x27;s possible to send a command that operates on a database number other than the default number zero by using the option </span><br><span class="hljs-comment"># redis-cli默认操作的是0号数据库，如果是需要操作其他数据库，那么就需要使用 -n &lt;dbnum&gt; 指定对应执行的数据库</span><br>$ redis-cli FLUSHALL<br>OK<br>$ redis-cli -n 1 INCR a<br>(<span class="hljs-built_in">integer</span>) 1<br>$ redis-cli -n 1 INCR a<br>(<span class="hljs-built_in">integer</span>) 2<br><br><span class="hljs-comment"># 使用特定的格式去连接redis数据库 -u &lt;uri&gt;redis://user:password@host:port/dbnum</span><br>$ redis-cli -u redis://LJenkins:p%40ssw0rd@redis-16379.hosted.com:16379/0 PING<br>PONG<br><br><span class="hljs-comment"># redis 默认是使用 TCP进行连接，如果是使用SSL或者是TLS的方式进行连接，可以设置对应的证书</span><br><span class="hljs-comment"># By default, uses a plain TCP connection to connect to Redis. You may enable SSL/TLS using the option, along with or to configure a trusted root certificate bundle or directory.redis-cli--tls--cacert--cacertdir</span><br><br><br><span class="hljs-comment"># redis-cli 执行文件当中的内容</span><br>$ <span class="hljs-built_in">cat</span> /tmp/commands.txt | redis-cli<br>OK<br><br><span class="hljs-comment"># 在redis-cli 当中连接其他的数据库</span><br><br>127.0.0.1:6379&gt; CONNECT metal 6379<br>metal:6379&gt; PING<br>PONG<br><br><br><span class="hljs-comment"># 使用tab键补齐对应的命令</span><br>127.0.0.1:6379&gt; Z&lt;TAB&gt;<br>127.0.0.1:6379&gt; ZADD&lt;TAB&gt;<br>127.0.0.1:6379&gt; ZCARD&lt;TAB&gt;<br></code></pre></td></tr></table></figure><h4 id="五-关于命令的学习，可以参照redis官方文档"><a href="#五-关于命令的学习，可以参照redis官方文档" class="headerlink" title="五.关于命令的学习，可以参照redis官方文档"></a>五.关于命令的学习，可以参照redis官方文档</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 中文文档</span><br>http://redis.cn/commands<br><br><span class="hljs-comment"># 英文文档</span><br>https://redis.io/docs/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s补全命令安装</title>
    <link href="/2025/03/19/k8s%E8%A1%A5%E5%85%A8%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85/"/>
    <url>/2025/03/19/k8s%E8%A1%A5%E5%85%A8%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="自动补全安装"><a href="#自动补全安装" class="headerlink" title="自动补全安装"></a>自动补全安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs BASH">yum install bash-completion -y<br><span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h4 id="补全安装完成后执行报错"><a href="#补全安装完成后执行报错" class="headerlink" title="补全安装完成后执行报错"></a>补全安装完成后执行报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行kubectl tab时出现以下报错</span><br>[root@k8s-node ~]# kubectl desc-bash: _get_comp_words_by_ref: <span class="hljs-built_in">command</span> not found <br></code></pre></td></tr></table></figure><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1、执行bash_completion</span><br>[root@k8s-node ~]# <span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><br><span class="hljs-comment">#2、重新加载kubectl completion</span><br>[root@k8s-node ~]# <span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><br><span class="hljs-comment">#3、又能用tab了</span><br>[root@k8s-node ~]# kubectl describe pod<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手动清理Linux的缓存</title>
    <link href="/2025/03/19/%E6%89%8B%E5%8A%A8%E6%B8%85%E7%90%86Linux%E7%9A%84%E7%BC%93%E5%AD%98/"/>
    <url>/2025/03/19/%E6%89%8B%E5%8A%A8%E6%B8%85%E7%90%86Linux%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h6 id="1）清理pagecache（页面缓存）"><a href="#1）清理pagecache（页面缓存）" class="headerlink" title="1）清理pagecache（页面缓存）"></a>1）清理pagecache（页面缓存）</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@backup ~]# <span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches   或者 <span class="hljs-comment"># sysctl -w vm.drop_caches=1</span><br></code></pre></td></tr></table></figure><h6 id="2）清理dentries（目录缓存）和inodes"><a href="#2）清理dentries（目录缓存）和inodes" class="headerlink" title="2）清理dentries（目录缓存）和inodes"></a>2）清理dentries（目录缓存）和inodes</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@backup ~]# <span class="hljs-built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches   或者 <span class="hljs-comment"># sysctl -w vm.drop_caches=2</span><br></code></pre></td></tr></table></figure><h6 id="3）清理pagecache、dentries和inodes"><a href="#3）清理pagecache、dentries和inodes" class="headerlink" title="3）清理pagecache、dentries和inodes"></a>3）清理pagecache、dentries和inodes</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@backup ~]# <span class="hljs-built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches   或者 <span class="hljs-comment"># sysctl -w vm.drop_caches=3 </span><br></code></pre></td></tr></table></figure><p><strong>上面三种方式都是临时释放缓存的方法，要想永久释放缓存，需要在&#x2F;etc&#x2F;sysctl.conf文件中配置：vm.drop_caches&#x3D;1&#x2F;2&#x2F;3，然后sysctl -p生效即可！</strong></p><blockquote><p>另外，可以使用sync命令来清理文件系统缓存，还会清理僵尸(zombie)对象和它们占用的内存</p><p>[root@backup ~]# sync</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于EOF和-EOF语句的意思</title>
    <link href="/2025/03/19/%E5%85%B3%E4%BA%8EEOF%E5%92%8C-EOF%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%84%8F%E6%80%9D/"/>
    <url>/2025/03/19/%E5%85%B3%E4%BA%8EEOF%E5%92%8C-EOF%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%84%8F%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>在linux shell脚本中<code>cat &lt;&lt; EOF</code>的语句，起到什么作用？</p><p>EOF在这里<code>没有特殊的含义</code>，你可以使用FOE或OOO等（当然也不限制在三个字符或大写字符）,EOF只是习惯性的用来作为开头和结尾</p><p>接下来，简单描述一下几种常见的使用方式及其作用：</p><blockquote><p>1、cat&lt;&lt;EOF，以EOF输入字符为标准输入结束;</p></blockquote><blockquote><p>2、cat&gt;filename，创建文件，并<code>把标准输入输出到filename文件中</code>，以ctrl+d作为输入结束;</p></blockquote><blockquote><p>3、cat&gt;filename&lt;&lt;EOF，以<code>EOF作为输入结束</code>，和ctrl+d的作用一样;</p></blockquote><blockquote><p>cat &lt;<EOF>&gt;&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root     # 以EOF为结束符号，将标准输入的内容追加到&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root内。可以理解为&gt;&gt;还是追加到文件当中，只是多了&lt;&lt;EOF作为输入结束符标志。</p></blockquote><hr><p>cat &lt;&lt;EOF与cat &lt;&lt;-EOF的区别（原文：<a href="http://blog.csdn.net/apache0554/article/details/45508631%EF%BC%89">http://blog.csdn.net/apache0554/article/details/45508631）</a></p><p>两个都是获取stdin,并在EOF处结束stdin(标准输入)，输出stdout(标准输出)。</p><blockquote><p>man中的说明：</p></blockquote><blockquote><p>If the redirection operator is &lt;&lt;-, then all leading tab characters are stripped from input lines and the line containing delimiter.  </p></blockquote><p>翻译过来的意思就是：如果重定向的操作符是&lt;&lt;-，那么<code>分界符（EOF）所在行的开头部分的制表符（Tab）都将被去除</code>。</p><p>这可以解决由于脚本中的自然缩进产生的制表符。</p><blockquote><p>通俗一点的解释：</p></blockquote><p>在我们使用cat &lt;&lt;EOF时，我们输入完成后，需要在一个新的一行输入EOF结束stdin的输入。EOF必须顶行写，前面不能用制表符或者空格。</p><p>比如,下面的语句就不会出错：</p><p>cat &lt;&lt;EOF </p><p>Hello,world! </p><p>EOF </p><p><code>如果结束分解符EOF前有制表符或者空格，则EOF不会被当做结束分界符，只会继续被当做stdin来输入。</code></p><p>而<code>&lt;&lt;-</code>就是为了解决这一问题：</p><p>cat &lt;&lt;-EOF </p><p>Hello,world! </p><p>   EOF </p><p><code>上面的写法，虽然最后的EOF前面有多个制表符和空格，但仍然会被当做结束分界符，表示stdin的结束。</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian系统上源码编译Redis7.0</title>
    <link href="/2025/03/19/Debian%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91Redis7-0/"/>
    <url>/2025/03/19/Debian%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91Redis7-0/</url>
    
    <content type="html"><![CDATA[<ol><li><p><strong>安装编译工具和依赖项：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install build-essential tcl<br></code></pre></td></tr></table></figure></li><li><p><strong>下载并解压 Redis 7.0 源代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://download.redis.io/releases/redis-7.0.0.tar.gz<br>tar xzf redis-7.0.0.tar.gz<br><span class="hljs-built_in">cd</span> redis-7.0.0<br></code></pre></td></tr></table></figure></li><li><p><strong>进行编译：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure></li><li><p><strong>运行测试（可选）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></li><li><p><strong>安装 Redis 7.0：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> make install  <span class="hljs-comment"># 这一步会将redis默认安装到/usr/local/bin/下</span><br></code></pre></td></tr></table></figure></li><li><p><strong>拷贝redis.conf 配置文件</strong></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">在源码（redis-7.0.0）文件夹的路径下，有一个名为redis.conf的文件，这个可以拷贝到你想要存放的路径，推荐/etc/redis/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CephOSD磁盘更换的三种方法（数据发生迁移的时间不同）</title>
    <link href="/2025/03/19/CephOSD%E7%A3%81%E7%9B%98%E6%9B%B4%E6%8D%A2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%95%B0%E6%8D%AE%E5%8F%91%E7%94%9F%E8%BF%81%E7%A7%BB%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%EF%BC%89/"/>
    <url>/2025/03/19/CephOSD%E7%A3%81%E7%9B%98%E6%9B%B4%E6%8D%A2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88%E6%95%B0%E6%8D%AE%E5%8F%91%E7%94%9F%E8%BF%81%E7%A7%BB%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">更换方式1：<br><br>    1到指定节点上，停止指定的osd进程 systemctl stop ceph-osd@id<br><br>    2 将移除OSD节点状态标记为  ceph osd out ceph-osd@id<br><br>    3从crush中移除OsD节点，该节点不作为数据的载体 ceph osd crush remove id<br><br>    4 删除OSD节点和对应的认证信息 ceph osd rm id /ceph auth del id<br><br>    5 增加一个新的 OSD(zap擦除磁盘数据，create 创建磁盘)<br><br>    注意：1、2、3、4、5 这几步都会发生数据迁移的动作<br>    <br>如果是原始磁盘占用，无法格式化删除，使用下面的命令<br>查看磁盘的当前状态：dmsetup status<br>查看磁盘的唯一标识：cat /var/lib/ceph/osd/ceph-1/fsid  <br>清理磁盘的占用：dmsetup remove ceph-1的id <br>格式化磁盘（新的磁盘不用）：mkfs.ext4 /dev/sdc<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">更换方式2:<br>1 修改osd的数据操作权重值，让数据不分布在这个节点上<br>2 到指定节点上，停止指定的osd进程<br>3 将移除OSD节点状态标记为out<br>4 从crush中移除OSD节点，该节点不作为数据的载体  # 可以通过两次 ceph pg dump pgs &gt; file.txt 查看两次pg的变化，然后通过 diff命令比对<br>5 删除OSD节点和对应的认证信息<br>6 增加一个新的 OSD<br><br>注意：1、5、6这几步会发生数据迁移动作<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">更换方式3:<br><span class="hljs-meta prompt_"># </span><span class="language-bash">最主要的就是设置标记和清除标记中间这段操作当中，只是看到一个数据迁移的现象，但是并未发生真正的数据迁移</span><br>1 对ceph集群的osd设置禁止数据迁移的标记<br>2 修改osd的数据操作权重值，让数据不分布在这个节点上<br>3 到指定节点上，停止指定的osd进程<br>4 从crush中移除osD节点，该节点不作为数据的载体<br>5 删除OSD节点和对应的认证信息<br>6 增加一个新的OSD与样式2一致<br>7 移除ceph集群的osd禁止数据迁移标记集<br><br>注意：因为添加了标记，所以1-6这几步的数据迁移都不会执行，只有7这一步会发生数据迁移动作。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用kubeadm1.23.x版本部署kubernetes（一主两从）</title>
    <link href="/2025/03/19/%E4%BD%BF%E7%94%A8kubeadm1-23-x%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2kubernetes%EF%BC%88%E4%B8%80%E4%B8%BB%E4%B8%A4%E4%BB%8E%EF%BC%89/"/>
    <url>/2025/03/19/%E4%BD%BF%E7%94%A8kubeadm1-23-x%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2kubernetes%EF%BC%88%E4%B8%80%E4%B8%BB%E4%B8%A4%E4%BB%8E%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="配置系统环境"><a href="#配置系统环境" class="headerlink" title="配置系统环境"></a>配置系统环境</h3><h5 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a><strong>查看系统版本</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@localhost]# </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/centos-release</span><br></code></pre></td></tr></table></figure><h5 id="配置网络-根据自己本地的网络环境设置主机IP地址"><a href="#配置网络-根据自己本地的网络环境设置主机IP地址" class="headerlink" title="配置网络(根据自己本地的网络环境设置主机IP地址)"></a><strong>配置网络(根据自己本地的网络环境设置主机IP地址)</strong></h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@localhost ~]</span><span class="hljs-comment"># cat /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="hljs-attr">TYPE</span>=Ethernet<br><span class="hljs-attr">PROXY_METHOD</span>=none<br><span class="hljs-attr">BROWSER_ONLY</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">BOOTPROTO</span>=static<br><span class="hljs-attr">DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV4_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_AUTOCONF</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy<br><span class="hljs-attr">NAME</span>=enp0s3<br><span class="hljs-attr">UUID</span>=<span class="hljs-number">039303</span>a5-c70d-<span class="hljs-number">4973</span>-<span class="hljs-number">8</span>c91-<span class="hljs-number">97</span>eaa071c23d<br><span class="hljs-attr">DEVICE</span>=enp0s3<br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">1.31</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">122.1</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-number">223.5</span>.<span class="hljs-number">5.5</span><br></code></pre></td></tr></table></figure><h5 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a><strong>设置主机名</strong></h5><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-master01</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node01</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node02</span><br></code></pre></td></tr></table></figure><h5 id="添加并启动源"><a href="#添加并启动源" class="headerlink" title="添加并启动源"></a><strong>添加并启动源</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu忽略，CentOS执行</span><br><br><span class="hljs-comment"># 为 RHEL-8或 CentOS-8配置源</span><br>yum install https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm -y <br>sed -i <span class="hljs-string">&quot;s@mirrorlist@#mirrorlist@g&quot;</span> /etc/yum.repos.d/elrepo.repo <br>sed -i <span class="hljs-string">&quot;s@elrepo.org/linux@mirrors.tuna.tsinghua.edu.cn/elrepo@g&quot;</span> /etc/yum.repos.d/elrepo.repo <br><br><span class="hljs-comment"># 为 RHEL-7 SL-7 或 CentOS-7 安装 ELRepo </span><br>yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm -y <br>sed -i <span class="hljs-string">&quot;s@mirrorlist@#mirrorlist@g&quot;</span> /etc/yum.repos.d/elrepo.repo <br>sed -i <span class="hljs-string">&quot;s@elrepo.org/linux@mirrors.tuna.tsinghua.edu.cn/elrepo@g&quot;</span> /etc/yum.repos.d/elrepo.repo <br><br><span class="hljs-comment"># 查看可用安装包</span><br>yum  --disablerepo=<span class="hljs-string">&quot;*&quot;</span>  --enablerepo=<span class="hljs-string">&quot;elrepo-kernel&quot;</span>  list  available<br></code></pre></td></tr></table></figure><h5 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a><strong>配置yum源</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 其他系统的源地址</span><br><span class="hljs-comment"># https://mirrors.tuna.tsinghua.edu.cn/help/</span><br><br><span class="hljs-comment"># 对于 Ubuntu</span><br>sed -i <span class="hljs-string">&#x27;s/cn.archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list<br><br><span class="hljs-comment"># 对于 CentOS 7</span><br><span class="hljs-built_in">sudo</span> sed -e <span class="hljs-string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \<br>         -e <span class="hljs-string">&#x27;s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos|g&#x27;</span> \<br>         -i.bak \<br>         /etc/yum.repos.d/CentOS-*.repo<br><br><span class="hljs-comment"># 对于 CentOS 8</span><br><span class="hljs-built_in">sudo</span> sed -e <span class="hljs-string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \<br>         -e <span class="hljs-string">&#x27;s|^#baseurl=http://mirror.centos.org/$contentdir|baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos|g&#x27;</span> \<br>         -i.bak \<br>         /etc/yum.repos.d/CentOS-*.repo<br><br><span class="hljs-comment"># 对于私有仓库</span><br>sed -e <span class="hljs-string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> -e <span class="hljs-string">&#x27;s|^#baseurl=http://mirror.centos.org/\$contentdir|baseurl=http://192.168.1.123/centos|g&#x27;</span> -i.bak  /etc/yum.repos.d/CentOS-*.repo<br></code></pre></td></tr></table></figure><h5 id="安装一些必备工具"><a href="#安装一些必备工具" class="headerlink" title="安装一些必备工具"></a><strong>安装一些必备工具</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对于 Ubuntu</span><br>apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install -y wget psmisc vim net-tools nfs-kernel-server telnet lvm2 git tar curl<br><br><span class="hljs-comment"># 对于 CentOS 7</span><br>yum update -y &amp;&amp; yum -y install  wget psmisc vim net-tools nfs-utils telnet yum-utils device-mapper-persistent-data lvm2 git tar curl<br>yum install -y bash-completion net-tools gcc<br><br><span class="hljs-comment"># 对于 CentOS 8</span><br>yum update -y &amp;&amp; yum -y install wget psmisc vim net-tools nfs-utils telnet yum-utils device-mapper-persistent-data lvm2 git network-scripts tar curl<br></code></pre></td></tr></table></figure><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu忽略，CentOS执行</span><br>systemctl <span class="hljs-built_in">disable</span> --now firewalld<br></code></pre></td></tr></table></figure><h5 id="关闭selinux（记得升级内核后重启）"><a href="#关闭selinux（记得升级内核后重启）" class="headerlink" title="关闭selinux（记得升级内核后重启）"></a>关闭selinux（记得升级内核后重启）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu忽略，CentOS执行</span><br>setenforce 0<br>sed -i <span class="hljs-string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/selinux/config<br><br><span class="hljs-comment"># 参数解释</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># setenforce 0</span><br><span class="hljs-comment"># 此命令用于设置 SELinux 的执行模式。0 表示关闭 SELinux。</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># sed -i &#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27; /etc/selinux/config</span><br><span class="hljs-comment"># 该命令使用 sed 工具来编辑 /etc/selinux/config 文件。其中 &#x27;-i&#x27; 参数表示直接修改原文件，而不是输出到终端或另一个文件。&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27; 是 sed 的替换命令，它将文件中所有的 &quot;SELINUX=enforcing&quot; 替换为 &quot;SELINUX=disabled&quot;。这里的 &#x27;#&#x27; 是分隔符，用于替代传统的 &#x27;/&#x27; 分隔符，以避免与路径中的 &#x27;/&#x27; 冲突。</span><br></code></pre></td></tr></table></figure><h5 id="关闭交换分区"><a href="#关闭交换分区" class="headerlink" title="关闭交换分区"></a>关闭交换分区</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<br>swapoff -a &amp;&amp; sysctl -w vm.swappiness=0<br><br>cat /etc/fstab<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># -ri: 这个参数用于在原文件中替换匹配的模式。-r表示扩展正则表达式，-i允许直接修改文件。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span>: 这是一个sed命令，用于在文件/etc/fstab中找到包含swap的行，并在行首添加#来注释掉该行。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/fstab: 这是一个文件路径，即/etc/fstab文件，用于存储文件系统表。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">swapoff -a: 这个命令用于关闭所有启用的交换分区。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sysctl -w vm.swappiness=0: 这个命令用于修改vm.swappiness参数的值为0，表示系统在物理内存充足时更倾向于使用物理内存而非交换分区。</span><br></code></pre></td></tr></table></figure><h5 id="网络配置（俩种方式二选一）"><a href="#网络配置（俩种方式二选一）" class="headerlink" title="网络配置（俩种方式二选一）"></a>网络配置（俩种方式二选一）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu忽略，CentOS执行</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式一</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">disable</span> --now NetworkManager</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl start network &amp;&amp; systemctl <span class="hljs-built_in">enable</span> network</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二</span><br>cat &gt; /etc/NetworkManager/conf.d/calico.conf &lt;&lt; EOF <br>[keyfile]<br>unmanaged-devices=interface-name:cali*;interface-name:tunl*<br>EOF<br>systemctl restart NetworkManager<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 这个参数用于指定不由 NetworkManager 管理的设备。它由以下两个部分组成</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># interface-name:cali*</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示以 <span class="hljs-string">&quot;cali&quot;</span> 开头的接口名称被排除在 NetworkManager 管理之外。例如，<span class="hljs-string">&quot;cali0&quot;</span>, <span class="hljs-string">&quot;cali1&quot;</span> 等接口不受 NetworkManager 管理。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># interface-name:tunl*</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示以 <span class="hljs-string">&quot;tunl&quot;</span> 开头的接口名称被排除在 NetworkManager 管理之外。例如，<span class="hljs-string">&quot;tunl0&quot;</span>, <span class="hljs-string">&quot;tunl1&quot;</span> 等接口不受 NetworkManager 管理。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 通过使用这个参数，可以将特定的接口排除在 NetworkManager 的管理范围之外，以便其他工具或进程可以独立地管理和配置这些接口。</span></span><br></code></pre></td></tr></table></figure><h5 id="进行时间同步"><a href="#进行时间同步" class="headerlink" title="进行时间同步"></a>进行时间同步</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">服务端</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install chrony -y</span><br>yum install chrony -y<br>cat &gt; /etc/chrony.conf &lt;&lt; EOF <br>pool ntp.aliyun.com iburst<br>driftfile /var/lib/chrony/drift<br>makestep 1.0 3<br>rtcsync<br>allow 192.168.101.0/24<br>local stratum 10<br>keyfile /etc/chrony.keys<br>leapsectz right/UTC<br>logdir /var/log/chrony<br>EOF<br><br>systemctl restart chronyd ; systemctl enable chronyd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install chrony -y</span><br>yum install chrony -y<br>cat &gt; /etc/chrony.conf &lt;&lt; EOF <br>pool 192.168.1.31 iburst<br>driftfile /var/lib/chrony/drift<br>makestep 1.0 3<br>rtcsync<br>keyfile /etc/chrony.keys<br>leapsectz right/UTC<br>logdir /var/log/chrony<br>EOF<br><br>systemctl restart chronyd ; systemctl enable chronyd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用客户端进行验证</span><br>chronyc sources -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># pool ntp.aliyun.com iburst</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定使用ntp.aliyun.com作为时间服务器池，iburst选项表示在初始同步时会发送多个请求以加快同步速度。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># driftfile /var/lib/chrony/drift</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定用于保存时钟漂移信息的文件路径。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># makestep 1.0 3</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置当系统时间与服务器时间偏差大于1秒时，会以1秒的步长进行调整。如果偏差超过3秒，则立即进行时间调整。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># rtcsync</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启用硬件时钟同步功能，可以提高时钟的准确性。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># allow 192.168.0.0/24</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许192.168.0.0/24网段范围内的主机与chrony进行时间同步。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># local stratum 10</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将本地时钟设为stratum 10，stratum值表示时钟的准确度，值越小表示准确度越高。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># keyfile /etc/chrony.keys</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定使用的密钥文件路径，用于对时间同步进行身份验证。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># leapsectz right/UTC</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定时区为UTC。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># logdir /var/log/chrony</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定日志文件存放目录。</span><br></code></pre></td></tr></table></figure><h5 id="配置ulimit-根据自己服务器性能设置"><a href="#配置ulimit-根据自己服务器性能设置" class="headerlink" title="配置ulimit(根据自己服务器性能设置)"></a>配置ulimit(根据自己服务器性能设置)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">ulimit -SHn 65535<br>cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF<br>* soft nofile 655360<br>* hard nofile 131072<br>* soft nproc 655350<br>* hard nproc 655350<br>* soft memlock unlimited<br>* hard memlock unlimited<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># soft nofile 655360</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">soft表示软限制，nofile表示一个进程可打开的最大文件数，默认值为1024。这里的软限制设置为655360，即一个进程可打开的最大文件数为655360。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># hard nofile 131072</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hard表示硬限制，即系统设置的最大值。nofile表示一个进程可打开的最大文件数，默认值为4096。这里的硬限制设置为131072，即系统设置的最大文件数为131072。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># soft nproc 655350</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">soft表示软限制，<span class="hljs-built_in">nproc</span>表示一个用户可创建的最大进程数，默认值为30720。这里的软限制设置为655350，即一个用户可创建的最大进程数为655350。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># hard nproc 655350</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hard表示硬限制，即系统设置的最大值。<span class="hljs-built_in">nproc</span>表示一个用户可创建的最大进程数，默认值为4096。这里的硬限制设置为655350，即系统设置的最大进程数为655350。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># soft memlock unlimited</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">soft表示软限制，memlock表示一个进程可锁定在RAM中的最大内存，默认值为64 KB。这里的软限制设置为unlimited，即一个进程可锁定的最大内存为无限制。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># hard memlock unlimited</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hard表示硬限制，即系统设置的最大值。memlock表示一个进程可锁定在RAM中的最大内存，默认值为64 KB。这里的硬限制设置为unlimited，即系统设置的最大内存锁定为无限制。</span><br></code></pre></td></tr></table></figure><h5 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install -y sshpass</span><br>yum install -y sshpass<br>ssh-keygen -f /root/.ssh/id_rsa -P &#x27;&#x27;<br>export IP=&quot;192.168.1.31 192.168.1.32 192.168.1.33 192.168.1.34 192.168.1.35&quot;<br>export SSHPASS=123123<br>for HOST in $IP;do<br>     sshpass -e ssh-copy-id -o StrictHostKeyChecking=no $HOST<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这段脚本的作用是在一台机器上安装sshpass工具，并通过sshpass自动将本机的SSH公钥复制到多个远程主机上，以实现无需手动输入密码的SSH登录。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 具体解释如下：</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 1. `apt install -y sshpass` 或 `yum install -y sshpass`：通过包管理器（apt或yum）安装sshpass工具，使得后续可以使用sshpass命令。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 2. `ssh-keygen -f /root/.ssh/id_rsa -P &#x27;&#x27;`：生成SSH密钥对。该命令会在/root/.ssh目录下生成私钥文件id_rsa和公钥文件id_rsa.pub，同时不设置密码（即-P参数后面为空），方便后续通过ssh-copy-id命令自动复制公钥。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 3. `export IP=&quot;192.168.1.31 192.168.1.32 192.168.1.33 192.168.1.34 192.168.1.35&quot;`：设置一个包含多个远程主机IP地址的环境变量IP，用空格分隔开，表示要将SSH公钥复制到这些远程主机上。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 4. `export SSHPASS=123123`：设置环境变量SSHPASS，将sshpass所需的SSH密码（在这里是&quot;123123&quot;）赋值给它，这样sshpass命令可以自动使用这个密码进行登录。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 5. `for HOST in $IP;do`：遍历环境变量IP中的每个IP地址，并将当前IP地址赋值给变量HOST。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 6. `sshpass -e ssh-copy-id -o StrictHostKeyChecking=no $HOST`：使用sshpass工具复制本机的SSH公钥到远程主机。其中，-e选项表示使用环境变量中的密码（即SSHPASS）进行登录，-o StrictHostKeyChecking=no选项表示连接时不检查远程主机的公钥，以避免交互式确认。</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 通过这段脚本，可以方便地将本机的SSH公钥复制到多个远程主机上，实现无需手动输入密码的SSH登录。</span></span><br></code></pre></td></tr></table></figure><h5 id="升级内核至4-18版本以上"><a href="#升级内核至4-18版本以上" class="headerlink" title="升级内核至4.18版本以上"></a>升级内核至4.18版本以上</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu忽略，CentOS执行</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装最新的内核</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我这里选择的是稳定版kernel-ml   如需更新长期维护版本kernel-lt</span>  <br>yum -y --enablerepo=elrepo-kernel  install  kernel-ml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看已安装那些内核</span><br>rpm -qa | grep kernel<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看默认内核</span><br>grubby --default-kernel<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">若不是最新的使用命令设置</span><br>grubby --set-default $(ls /boot/vmlinuz-* | grep elrepo)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启生效</span><br>reboot<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">v8 整合命令为：</span><br>yum install https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm -y ; sed -i &quot;s@mirrorlist@#mirrorlist@g&quot; /etc/yum.repos.d/elrepo.repo ; sed -i &quot;s@elrepo.org/linux@mirrors.tuna.tsinghua.edu.cn/elrepo@g&quot; /etc/yum.repos.d/elrepo.repo ; yum  --disablerepo=&quot;*&quot;  --enablerepo=&quot;elrepo-kernel&quot;  list  available -y ; yum  --enablerepo=elrepo-kernel  install kernel-lt -y ; grubby --default-kernel ; reboot <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">v7 整合命令为：</span><br>yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm -y ; sed -i &quot;s@mirrorlist@#mirrorlist@g&quot; /etc/yum.repos.d/elrepo.repo ; sed -i &quot;s@elrepo.org/linux@mirrors.tuna.tsinghua.edu.cn/elrepo@g&quot; /etc/yum.repos.d/elrepo.repo ; yum  --disablerepo=&quot;*&quot;  --enablerepo=&quot;elrepo-kernel&quot;  list  available -y ; yum  --enablerepo=elrepo-kernel  install  kernel-lt -y ; grubby --set-default $(ls /boot/vmlinuz-* | grep elrepo) ; grubby --default-kernel ; reboot <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">离线版本</span> <br>yum install -y /root/cby/kernel-lt-*-1.el7.elrepo.x86_64.rpm ; grubby --set-default $(ls /boot/vmlinuz-* | grep elrepo) ; grubby --default-kernel ; reboot <br></code></pre></td></tr></table></figure><h5 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf<br>net.ipv4.ip_forward = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>fs.may_detach_mounts = 1<br>vm.overcommit_memory=1<br>vm.panic_on_oom=0<br>fs.inotify.max_user_watches=89100<br>fs.file-max=52706963<br>fs.nr_open=52706963<br>net.netfilter.nf_conntrack_max=2310720<br><br>net.ipv4.tcp_keepalive_time = 600<br>net.ipv4.tcp_keepalive_probes = 3<br>net.ipv4.tcp_keepalive_intvl =15<br>net.ipv4.tcp_max_tw_buckets = 36000<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_max_orphans = 327680<br>net.ipv4.tcp_orphan_retries = 3<br>net.ipv4.tcp_syncookies = 1<br>net.ipv4.tcp_max_syn_backlog = 16384<br>net.ipv4.ip_conntrack_max = 65536<br>net.ipv4.tcp_max_syn_backlog = 16384<br>net.ipv4.tcp_timestamps = 0<br>net.core.somaxconn = 16384<br><br>net.ipv6.conf.all.disable_ipv6 = 0<br>net.ipv6.conf.default.disable_ipv6 = 0<br>net.ipv6.conf.lo.disable_ipv6 = 0<br>net.ipv6.conf.all.forwarding = 1<br>EOF<br><br>sysctl --system<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这些是Linux系统的一些参数设置，用于配置和优化网络、文件系统和虚拟内存等方面的功能。以下是每个参数的详细解释：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 1. net.ipv4.ip_forward = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 这个参数启用了IPv4的IP转发功能，允许服务器作为网络路由器转发数据包。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 2. net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 当使用网络桥接技术时，将数据包传递到iptables进行处理。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> </span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. fs.may_detach_mounts = 1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 允许在挂载文件系统时，允许被其他进程使用。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> </span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. vm.overcommit_memory=1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 该设置允许原始的内存过量分配策略，当系统的内存已经被完全使用时，系统仍然会分配额外的内存。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 5. vm.panic_on_oom=0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 当系统内存不足（OOM）时，禁用系统崩溃和重启。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">6. fs.inotify.max_user_watches=89100</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 设置系统允许一个用户的inotify实例可以监控的文件数目的上限。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 7. fs.file-max=52706963</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 设置系统同时打开的文件数的上限。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 8. fs.nr_open=52706963</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 设置系统同时打开的文件描述符数的上限。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 9. net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - 设置系统可以创建的网络连接跟踪表项的最大数量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 10. net.ipv4.tcp_keepalive_time = 600</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置TCP套接字的空闲超时时间（秒），超过该时间没有活动数据时，内核会发送心跳包。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 11. net.ipv4.tcp_keepalive_probes = 3</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置未收到响应的TCP心跳探测次数。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 12. net.ipv4.tcp_keepalive_intvl = 15</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置TCP心跳探测的时间间隔（秒）。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 13. net.ipv4.tcp_max_tw_buckets = 36000</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统可以使用的TIME_WAIT套接字的最大数量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 14. net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用TIME_WAIT套接字的重新利用，允许新的套接字使用旧的TIME_WAIT套接字。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 15. net.ipv4.tcp_max_orphans = 327680</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统可以同时存在的TCP套接字垃圾回收包裹数的最大数量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 16. net.ipv4.tcp_orphan_retries = 3</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统对于孤立的TCP套接字的重试次数。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 17. net.ipv4.tcp_syncookies = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用TCP SYN cookies保护，用于防止SYN洪泛攻击。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 18. net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置新的TCP连接的半连接数（半连接队列）的最大长度。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 19. net.ipv4.ip_conntrack_max = 65536</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统可以创建的网络连接跟踪表项的最大数量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 20. net.ipv4.tcp_timestamps = 0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 关闭TCP时间戳功能，用于提供更好的安全性。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 21. net.core.somaxconn = 16384</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 设置系统核心层的连接队列的最大值。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 22. net.ipv6.conf.all.disable_ipv6 = 0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用IPv6协议。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 23. net.ipv6.conf.default.disable_ipv6 = 0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用IPv6协议。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 24. net.ipv6.conf.lo.disable_ipv6 = 0</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 启用IPv6协议。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># 25. net.ipv6.conf.all.forwarding = 1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    - 允许IPv6数据包转发。</span><br></code></pre></td></tr></table></figure><h5 id="使用aliyun源安装docker-ce"><a href="#使用aliyun源安装docker-ce" class="headerlink" title="使用aliyun源安装docker-ce"></a>使用aliyun源安装docker-ce</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 底层是用docker运行，所以每台主机都需要安装docker</span><br>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>yum -y install docker-ce<br></code></pre></td></tr></table></figure><p>Kubernetes是一个开源系统，用于容器化应用的自动部署、扩缩和管理。它将构成应用的容器按逻辑单位进行分组以便于管理和发现。</p><p>由于 Kubernetes 官方变更了仓库的存储路径以及使用方式，如果需要使用 1.28 及以上版本，请使用 新版配置方法 进行配置。</p><p>下载地址：<a href="https://mirrors.aliyun.com/kubernetes/">https://mirrors.aliyun.com/kubernetes/</a></p><p>新版下载地址：<a href="https://mirrors.aliyun.com/kubernetes-new/">https://mirrors.aliyun.com/kubernetes-new/</a></p><h4 id="k8s组件安装配置方法"><a href="#k8s组件安装配置方法" class="headerlink" title="k8s组件安装配置方法"></a>k8s组件安装配置方法</h4><h5 id="新版配置方法"><a href="#新版配置方法" class="headerlink" title="新版配置方法"></a>新版配置方法</h5><p>新版 kubernetes 源使用方法和之前有一定区别，请求按照如下配置方法配置使用。</p><p>其中新版 kubernetes 源按照安装版本区分不同仓库，该文档示例为配置 1.30 版本，如需其他版本请在对应位置字符串替换即可。</p><h6 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian &#x2F; Ubuntu"></a>Debian &#x2F; Ubuntu</h6><ol><li>在配置中添加镜像（注意修改为自己需要的版本号）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update &amp;&amp; apt-get install -y apt-transport-https<br>curl -fsSL https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/deb/Release.key |<br>    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg<br>echo &quot;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.28/deb/ /&quot; |<br>    tee /etc/apt/sources.list.d/kubernetes.list<br></code></pre></td></tr></table></figure><ol start="2"><li>安装必要应用：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br>apt-get install -y kubelet kubeadm kubectl<br>systemctl enable kubelet &amp;&amp; systemctl start kubelet<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如安装指定版本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt install kubelet=1.28.2-00 kubeadm=1.28.2-00 kubectl=1.28.2-00</span><br></code></pre></td></tr></table></figure><h6 id="CentOS-RHEL-Fedora"><a href="#CentOS-RHEL-Fedora" class="headerlink" title="CentOS &#x2F; RHEL &#x2F; Fedora"></a>CentOS &#x2F; RHEL &#x2F; Fedora</h6><ol><li>执行如下命令（注意修改为自己需要的版本号）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF | tee /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/rpm/<br>enabled=1<br>gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/rpm/repodata/repomd.xml.key<br>EOF<br></code></pre></td></tr></table></figure><ol start="2"><li>安装必要应用：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看kubelet的版本，方便在安装的时候使用k8s 1.23的新版本</span><br>yum search kubelet --showduplicates <br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据查询出来的kubelet，选择对应的安装版本，这里以1.23.9为例</span><br>yum install kubelet-1.23.9-0 kubeadm-1.23.9-0 kubectl-1.23.9-0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置kubelet自动启动，但是查看状态的时候是没有启动的，在kubeadm初始化集群的时候会自动启动</span><br>systemctl enable kubelet &amp;&amp; systemctl start kubelet<br><br></code></pre></td></tr></table></figure><p>ps: 由于官网未开放同步方式, 可能会有索引gpg检查失败的情况, 这时请用 <code>yum install -y --nogpgcheck kubelet kubeadm kubectl</code> 安装</p><h5 id="旧版配置方法"><a href="#旧版配置方法" class="headerlink" title="旧版配置方法"></a>旧版配置方法</h5><p>目前由于kubernetes官方变更了仓库的存储路径以及使用方式，旧版 kubernetes 源只更新到 1.28 部分版本，后续更新版本请使用 新源配置方法 进行配置。</p><h6 id="Debian-Ubuntu-1"><a href="#Debian-Ubuntu-1" class="headerlink" title="Debian &#x2F; Ubuntu"></a>Debian &#x2F; Ubuntu</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update &amp;&amp; apt-get install -y apt-transport-https<br>curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - <br>cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list<br>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main<br>EOF<br>apt-get update<br>apt-get install -y kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><h6 id="CentOS-RHEL-Fedora-1"><a href="#CentOS-RHEL-Fedora-1" class="headerlink" title="CentOS &#x2F; RHEL &#x2F; Fedora"></a>CentOS &#x2F; RHEL &#x2F; Fedora</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看kubelet的版本，方便在安装的时候使用k8s 1.23的新版本</span><br>yum search kubelet --showduplicates <br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据查询出来的kubelet，选择对应的安装版本，这里以1.23.9为例</span><br>yum install kubelet-1.23.9-0 kubeadm-1.23.9-0 kubectl-1.23.9-0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置kubelet自动启动，但是查看状态的时候是没有启动的，在kubeadm初始化集群的时候会自动启动</span><br>systemctl enable kubelet &amp;&amp; systemctl start kubelet<br></code></pre></td></tr></table></figure><p>ps: 由于官网未开放同步方式, 可能会有索引gpg检查失败的情况, 这时请用 <code>yum install -y --nogpgcheck kubelet kubeadm kubectl</code> 安装</p><h4 id="使用kubeadm初始化安装"><a href="#使用kubeadm初始化安装" class="headerlink" title="使用kubeadm初始化安装"></a>使用kubeadm初始化安装</h4><h5 id="配置k8s使用阿里云源"><a href="#配置k8s使用阿里云源" class="headerlink" title="配置k8s使用阿里云源"></a>配置k8s使用阿里云源</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master01 ~]# <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">repo_gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h5 id="查看k8s版本使用的镜像（可以先拉取下来这样比较快一点）"><a href="#查看k8s版本使用的镜像（可以先拉取下来这样比较快一点）" class="headerlink" title="查看k8s版本使用的镜像（可以先拉取下来这样比较快一点）"></a>查看k8s版本使用的镜像（可以先拉取下来这样比较快一点）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看最新版本有那些镜像</span><br>[root@k8s-master01 ~]# kubeadm config images list --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers<br><br><span class="hljs-comment"># 如果想要查看默认配置，可以使用下面的这个命令将配置重定向到文件当中，后面自行修改</span><br>[root@k8s-master01 ~]# kubeadm config <span class="hljs-built_in">print</span> init-defaults &gt; kubeadm-init.yaml<br><br><span class="hljs-comment"># 上面的配置文件配置完成了之后，使用指定配置文件的方式初始化集群</span><br>[root@k8s-master01 ~]# kubeadm init --config=kubeadm.yaml<br><br><span class="hljs-comment"># 如果安装失败，执行下面的命令</span><br><span class="hljs-comment"># 重新初始化</span><br>[root@k8s-master01 ~]# kubeadm reset<br><br><span class="hljs-comment"># 使用参数的形式初始化</span><br>[root@k8s-master01 ~]# kubeadminit--kubernetes-version=1.23.9 --apiserver-advertise-address=10.0.0.19       --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16 <br><br><span class="hljs-comment"># 这个参数可加可不加（因为前面关闭了swap，并重启了机器）</span><br>--ignore-preflight-errors=Swap<br></code></pre></td></tr></table></figure><h5 id="安装完成后"><a href="#安装完成后" class="headerlink" title="安装完成后"></a>安装完成后</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]#  <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>[root@k8s-master01 ~]#  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>[root@k8s-master01 ~]#  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h5 id="把其他节点以node方式加入k8s"><a href="#把其他节点以node方式加入k8s" class="headerlink" title="把其他节点以node方式加入k8s"></a>把其他节点以node方式加入k8s</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把其他的节点作为master（control-plane ）加入</span><br><span class="hljs-comment"># 但是下面的命令不要复制这里的，kubeadm安装完成后会自己输出在终端内</span><br>You can now <span class="hljs-built_in">join</span> any number of control-plane nodes by copying certificate authorities<br>and service account keys on each node and <span class="hljs-keyword">then</span> running the following as root:<br><br>  kubeadm <span class="hljs-built_in">join</span> 192.168.1.36:9443 --token abcdef.0123456789abcdef \<br>--discovery-token-ca-cert-hash sha256:583ddadd1318dae447c3890aa3a2469c5b00c6775e87102458db07e691c724be \<br>--control-plane <br><br><span class="hljs-comment"># 把其他节点作为work节点加入</span><br>Then you can <span class="hljs-built_in">join</span> any number of worker nodes by running the following on each as root:<br><br>kubeadm <span class="hljs-built_in">join</span> 192.168.1.36:9443 --token abcdef.0123456789abcdef \<br>--discovery-token-ca-cert-hash sha256:583ddadd1318dae447c3890aa3a2469c5b00c6775e87102458db07e691c724be <br></code></pre></td></tr></table></figure><h4 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h4><h5 id="打开k8s官网网址提供的网络插件"><a href="#打开k8s官网网址提供的网络插件" class="headerlink" title="打开k8s官网网址提供的网络插件"></a>打开k8s官网网址提供的网络插件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://kubernetes.io/docs/concepts/cluster-administration/addons/<br><span class="hljs-comment"># 找到Networking and Network Policy  这个部分，根据需要安装网络插件</span><br><span class="hljs-comment"># 这里选择的是flannel网络插件，可以直接复制这里的地址打开github上的地址，也可以自己打开上面的k8s页面，自己找到对应的网址，建议还是打开看一下</span><br>https://github.com/flannel-io/flannel#deploying-flannel-manually<br><br><span class="hljs-comment"># For Kubernetes v1.17+ Deploying Flannel with kubectl</span><br>[root@master01 ~]# kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml<br><br><span class="hljs-comment"># 如果想用calico网络插件</span><br>[root@master01 ~]# kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml<br><br><span class="hljs-comment"># 等待kube-flannel命名空间内的pod容器启动完成</span><br><span class="hljs-comment"># 可以使用下面的命令监视</span><br>watch -n 1 kubectl get po  -n kube-flannel<br></code></pre></td></tr></table></figure><h4 id="查看k8s集群状态"><a href="#查看k8s集群状态" class="headerlink" title="查看k8s集群状态"></a>查看k8s集群状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]# kubectl get nodes<br>NAME           STATUS     ROLES           AGE     VERSION<br>k8s-master01   NotReady   control-plane   2m14s   v1.23.9<br>k8s-node01     NotReady   &lt;none&gt;          19s     v1.23.9<br>k8s-node02     NotReady   &lt;none&gt;          9s      v1.23.9<br></code></pre></td></tr></table></figure><h4 id="安装后完善"><a href="#安装后完善" class="headerlink" title="安装后完善"></a>安装后完善</h4><h5 id="执行下面命令，使kubectl可以自动补充"><a href="#执行下面命令，使kubectl可以自动补充" class="headerlink" title="执行下面命令，使kubectl可以自动补充"></a>执行下面命令，使kubectl可以自动补充</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master01 ~]# <span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br>[root@master01 ~]# <span class="hljs-built_in">source</span> &lt;(kubeadm completion bash)<br></code></pre></td></tr></table></figure><h4 id="安装kubernetes-dashboard"><a href="#安装kubernetes-dashboard" class="headerlink" title="安装kubernetes-dashboard"></a>安装kubernetes-dashboard</h4><h5 id="为dashboard配置nodeport端口"><a href="#为dashboard配置nodeport端口" class="headerlink" title="为dashboard配置nodeport端口"></a>为dashboard配置nodeport端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 官方部署`dashboard`的服务没使用`nodeport`，将yaml文件下载到本地，在service里添加nodeport</span><br>[root@master01 ~]# wget  https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc7/aio/deploy/recommended.yaml<br>[root@master01 ~]# vim recommended.yaml<br>kind: Service<br>apiVersion: v1<br>metadata:<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>  name: kubernetes-dashboard<br>  namespace: kubernetes-dashboard<br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>    - port: 443<br>      targetPort: 8443<br>      nodePort: 30000<br>  selector:<br>    k8s-app: kubernetes-dashboard<br><br>[root@master01 ~]# kubectl create -f recommended.yaml<br>namespace/kubernetes-dashboard created<br>serviceaccount/kubernetes-dashboard created<br>service/kubernetes-dashboard created<br>secret/kubernetes-dashboard-certs created<br>secret/kubernetes-dashboard-csrf created<br>secret/kubernetes-dashboard-key-holder created<br>configmap/kubernetes-dashboard-settings created<br>role.rbac.authorization.k8s.io/kubernetes-dashboard created<br>clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created<br>rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created<br>clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created<br>deployment.apps/kubernetes-dashboard created<br>service/dashboard-metrics-scraper created<br>deployment.apps/dashboard-metrics-scraper created<br></code></pre></td></tr></table></figure><h5 id="查看pod，service"><a href="#查看pod，service" class="headerlink" title="查看pod，service"></a>查看pod，service</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NAME</span>                                        READY   STATUS    RESTARTS   AGE<br><span class="hljs-attribute">dashboard</span>-metrics-scraper-dc6947fbf-<span class="hljs-number">869</span>kf   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">37</span>s<br><span class="hljs-attribute">kubernetes</span>-dashboard-<span class="hljs-number">5</span>d4dc8b976-sdxxt       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">37</span>s<span class="hljs-meta"></span><br><span class="hljs-meta">[root@master01 ~]# kubectl get svc -n kubernetes-dashboard</span><br><span class="hljs-meta">NAME                        TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE</span><br><span class="hljs-meta">dashboard-metrics-scraper   ClusterIP   10.10.58.93    &lt;none&gt;        8000/TCP        44s</span><br><span class="hljs-meta">kubernetes-dashboard        NodePort    10.10.132.66   &lt;none&gt;        443:30000/TCP   44s</span><br></code></pre></td></tr></table></figure><h5 id="通过页面访问，推荐使用firefox浏览器"><a href="#通过页面访问，推荐使用firefox浏览器" class="headerlink" title="通过页面访问，推荐使用firefox浏览器"></a>通过页面访问，推荐使用firefox浏览器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据自己的网络环境打开对应的网址</span><br>打开浏览器输入https://192.168.1.30000  <br></code></pre></td></tr></table></figure><h5 id="使用token进行登录，执行下面命令获取token"><a href="#使用token进行登录，执行下面命令获取token" class="headerlink" title="使用token进行登录，执行下面命令获取token"></a>使用token进行登录，执行下面命令获取token</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master01 ~]# kubectl describe secrets -n kubernetes-dashboard kubernetes-dashboard-token-t4hxz  | grep token | awk <span class="hljs-string">&#x27;NR==3&#123;print $2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>登录后，如果没有namespace可选，并且提示找不到资源 ，那么就是权限问题。</p><p>通过查看dashboard日志，得到如下 信息，出现以下信息的原因是，登录dashboard的权限不够，不能获取到内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">2023/04/08 01:54:31 Non-critical <span class="hljs-built_in">error</span> occurred during<span class="hljs-built_in"> resource </span>retrieval: jobs.batch is forbidden:<span class="hljs-built_in"> User </span><span class="hljs-string">&quot;system:serviceaccount:kubernetes-dashboard:kubernetes-dashboard&quot;</span> cannot list<span class="hljs-built_in"> resource </span><span class="hljs-string">&quot;jobs&quot;</span> <span class="hljs-keyword">in</span> API<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;batch&quot;</span> <span class="hljs-keyword">in</span> the namespace <span class="hljs-string">&quot;default&quot;</span><br></code></pre></td></tr></table></figure><h5 id="创建集群角色绑定"><a href="#创建集群角色绑定" class="headerlink" title="创建集群角色绑定"></a>创建集群角色绑定</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解决办法就是创建集群角色绑定，以集群管理员的方式，管理dashboard</span><br>[root@master01 ~]# kubectl create clusterrolebinding serviceaccount-cluster-admin --clusterrole=cluster-admin --group=system:serviceaccount <br>clusterrolebinding.rbac.authorization.k8s.io/serviceaccount-cluster-admin created<br></code></pre></td></tr></table></figure><h5 id="查看dashboard日志"><a href="#查看dashboard日志" class="headerlink" title="查看dashboard日志"></a>查看dashboard日志</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master01 ~]# kubectl logs -f -n kubernetes-dashboard kubernetes-dashboard-5d4dc8b976-sdxx<br></code></pre></td></tr></table></figure><h5 id="此时再查看dashboard，即可看到有资源展示"><a href="#此时再查看dashboard，即可看到有资源展示" class="headerlink" title="此时再查看dashboard，即可看到有资源展示"></a>此时再查看dashboard，即可看到有资源展示</h5>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s、云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes集群包管理解决方案-helm</title>
    <link href="/2025/03/19/Kubernetes%E9%9B%86%E7%BE%A4%E5%8C%85%E7%AE%A1%E7%90%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-helm/"/>
    <url>/2025/03/19/Kubernetes%E9%9B%86%E7%BE%A4%E5%8C%85%E7%AE%A1%E7%90%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-helm/</url>
    
    <content type="html"><![CDATA[<h5 id="一、引入helm原因"><a href="#一、引入helm原因" class="headerlink" title="一、引入helm原因"></a>一、引入helm原因</h5><pre><code class="hljs">当今的软件开发，随着云原生技术的普及，我们的工程应用进行微服务化和容器化的现象也变得越来越普遍。而Kubernetes几乎已经成了云原生服务编排绕不开的标准和技术。实际生产中，微服务项目可能有十几个模块，若还需要进行安全访问和控制，那么需要创建诸如Role、ServiceAccount等资源。部署和版本升级时也往往需要修改或添加配置文件中的一些参数（例如：服务占用的CPU、内存、副本数、端口等），维护大量的yaml文件极为不便，所以，我们需要将这些YAML文件作为一个**整体**管理，并高效复用。</code></pre><ul><li>在Linux操作系统软件部署中，我们可以使用批量管理工具完成软件的批量管理等，例如yum、dnf等；</li><li>在容器应用中Docker使用Dockerfile文件解决了容器镜像制作难题；</li><li>在kubernetes应用中，通过YAML格式文件解决容器编排部署难题，例如可以通过YAML格式的资源清单文件，非常方便部署不同控制器类型的应用;但是如何维护大量的，系统性的YAML文件，需要我们拥有更好的工具，不能简单使用YAML资源清单托管服务器就可以解决的。</li></ul><h5 id="二、helm是什么"><a href="#二、helm是什么" class="headerlink" title="二、helm是什么"></a>二、helm是什么</h5><ul><li><p>官方: <a href="https://helm.sh/">https://helm.sh/</a></p></li><li><p>作为CNCF的毕业项目。它的官方的定义是：Helm是一个为K8s进行包管理的工具</p></li></ul><ul><li>Helm(舵柄; 舵轮)是一个Kubernetes的包管理工具，就像Linux下的包管理器，如yum&#x2F;apt等。</li><li>helm一个命令行客户端工具，主要用于Kubernetes应用chart的创建、打包、发布和管理。</li><li>通过helm可以很方便的将之前打包好的yaml文件部署到kubernetes上。</li><li>对于应用发布者而言，可以通过Helm打包应用，管理应用依赖关系，管理应用版本并发布应用到软件仓库。</li><li>对于使用者而言，使用Helm后不用需要了解Kubernetes的Yaml语法并编写应用部署文件，可以通过Helm下载并在kubernetes上安装需要的应用。</li><li>除此以外，Helm还提供了kubernetes上的软件部署，删除，升级，回滚应用的强大功能。</li><li>Helm 社区已经维护了一个官方 Helm Hub，我们可以直接使用已经做好的 Helm Chart，部署和管理比较复杂的应用程序</li><li>早期的hub.helm.dev转移到了<a href="https://artifacthub.io/%E3%80%82">https://artifacthub.io/。</a></li></ul><h5 id="三、helm作用及核心概念"><a href="#三、helm作用及核心概念" class="headerlink" title="三、helm作用及核心概念"></a>三、helm作用及核心概念</h5><pre><code class="hljs">Helm基于go模板语言，用户只要提供规定的目录结构和模板文件。在真正部署时Helm模板引擎便可以将其渲染成真正的K8s资源配置文件，并按照正确的顺序将它们部署到节点上。</code></pre><h6 id="Helm中有三个重要概念，分别为Chart、Repository和Release。"><a href="#Helm中有三个重要概念，分别为Chart、Repository和Release。" class="headerlink" title="Helm中有三个重要概念，分别为Chart、Repository和Release。"></a><strong>Helm中有三个重要概念，分别为Chart、Repository和Release。</strong></h6><ul><li><p>Chart代表中Helm包。它包含在K8s集群内部运行应用程序，工具或服务所需的所有资源定义，为所有项目资源清单yaml文件的集合，采用TAR格式，可以类比成yum中的RPM。</p></li><li><p>Repository就是用来存放和共享Chart的地方，可以类比成YUM仓库。</p></li><li><p>Release是运行在K8s集群中的Chart的实例(<strong>部署时候起的名字)</strong>，一个Chart可以在同一个集群中安装多次。Chart就像流水线中初始化好的模板，Release就是这个“模板”所生产出来的各个产品。</p></li></ul><h5 id="三、helm架构"><a href="#三、helm架构" class="headerlink" title="三、helm架构"></a>三、helm架构</h5><pre><code class="hljs">v2版本的时候需要在k8s集群当中安装一个Tiller服务，在v3版本当中，直接使用kubeconfig与apiserver进行对话。</code></pre><p><img src="https://www.t-ao.cn/usr/uploads/2024/06/754913602.png" alt="image-20220728135524226.png"></p><p>Helm客户端使用<strong>REST+JSON</strong>的方式与K8s中的apiserver进行交互，进而管理deployment、service等资源，并且客户端本身并不需要数据库，它会把相关的信息储存在K8s集群内的Secrets中。</p><p><img src="https://www.t-ao.cn/usr/uploads/2024/06/3728478168.png" alt="image-20220728140109073.png"></p><h5 id="四、helm部署"><a href="#四、helm部署" class="headerlink" title="四、helm部署"></a>四、helm部署</h5><p><img src="https://www.t-ao.cn/usr/uploads/2024/06/1773491326.png" alt="image-20220728140501620.png"><br><img src="https://www.t-ao.cn/usr/uploads/2024/06/1791632736.png" alt="image-20220728140538044.png"><br><img src="https://www.t-ao.cn/usr/uploads/2024/06/1791632736.png" alt="image-20220728140538044.png"><br><img src="https://www.t-ao.cn/usr/uploads/2024/06/2878045302.png" alt="image-20220728141000714.png"><br><img src="https://www.t-ao.cn/usr/uploads/2024/06/579956143.png" alt="image-20220728141101419.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># wget https://get.helm.sh/helm-v3.9.2-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment">#  ls</span><br>helm<span class="hljs-literal">-v3</span>.<span class="hljs-number">9.2</span><span class="hljs-literal">-linux-amd64</span>.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># tar xf helm-v3.9.2-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># ls</span><br>linux<span class="hljs-literal">-amd64</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># cd linux-amd64/</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">linux</span>-<span class="hljs-type">amd64</span>]<span class="hljs-comment"># ls</span><br>helm  LICENSE  README.md<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">linux</span>-<span class="hljs-type">amd64</span>]<span class="hljs-comment"># mv helm /usr/bin</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">linux</span>-<span class="hljs-type">amd64</span>]<span class="hljs-comment"># helm version</span><br>version.BuildInfo&#123;Version:<span class="hljs-string">&quot;v3.9.2&quot;</span>, GitCommit:<span class="hljs-string">&quot;1addefbfe665c350f4daf868a9adc5600cc064fd&quot;</span>, GitTreeState:<span class="hljs-string">&quot;clean&quot;</span>, GoVersion:<span class="hljs-string">&quot;go1.17.12&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="五、helm基础使用"><a href="#五、helm基础使用" class="headerlink" title="五、helm基础使用"></a>五、helm基础使用</h5><h6 id="5-1-添加及删除仓库"><a href="#5-1-添加及删除仓库" class="headerlink" title="5.1 添加及删除仓库"></a>5.1 添加及删除仓库</h6><h6 id="5-1-1-查看仓库"><a href="#5-1-1-查看仓库" class="headerlink" title="5.1.1 查看仓库"></a>5.1.1 查看仓库</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">master1</span> ~]<span class="hljs-comment"># helm repo list</span><br>Error: no repositories to show<br></code></pre></td></tr></table></figure><h6 id="5-1-2-添加新的仓库地址"><a href="#5-1-2-添加新的仓库地址" class="headerlink" title="5.1.2 添加新的仓库地址"></a>5.1.2 添加新的仓库地址</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">微软源<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo add stable http://mirror.azure.cn/kubernetes/charts/</span><br><br>bitnami源  <br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><br>prometheus源<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo add prometheus-community https://prometheus-community.github.io/helm-charts</span><br></code></pre></td></tr></table></figure><h6 id="5-1-3-查看已经添加的仓库"><a href="#5-1-3-查看已经添加的仓库" class="headerlink" title="5.1.3 查看已经添加的仓库"></a>5.1.3 查看已经添加的仓库</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo list</span><br>NAME    URL<br>stable  http://mirror.azure.cn/kubernetes/charts/<br></code></pre></td></tr></table></figure><h6 id="5-1-4-更新仓库"><a href="#5-1-4-更新仓库" class="headerlink" title="5.1.4 更新仓库"></a>5.1.4 更新仓库</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm repo update</span><br>Hang tight <span class="hljs-keyword">while</span> we grab the latest from your chart repositories...<br>...Successfully got an update from the <span class="hljs-string">&quot;stable&quot;</span> chart repository<br>Update Complete. ⎈Happy Helming!⎈<br></code></pre></td></tr></table></figure><h6 id="5-2-查看charts"><a href="#5-2-查看charts" class="headerlink" title="5.2 查看charts"></a>5.2 查看charts</h6><p>使用<code>helm search repo 关键字</code>可以查看相关charts</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm search repo stable</span><br>NAME                                    CHART VERSION   APP VERSION             DESCRIPTION<br>stable/acs<span class="hljs-literal">-engine-autoscaler</span>            <span class="hljs-number">2.2</span>.<span class="hljs-number">2</span>           <span class="hljs-number">2.1</span>.<span class="hljs-number">1</span>                   DEPRECATED Scales worker nodes within agent pools<br>stable/aerospike                        <span class="hljs-number">0.3</span>.<span class="hljs-number">5</span>           v4.<span class="hljs-number">5.0</span>.<span class="hljs-number">5</span>                DEPRECATED A Helm chart <span class="hljs-keyword">for</span> Aerospike <span class="hljs-keyword">in</span> Kubern...<br>stable/airflow                          <span class="hljs-number">7.13</span>.<span class="hljs-number">3</span>          <span class="hljs-number">1.10</span>.<span class="hljs-number">12</span>                 DEPRECATED - please use: https://github.com/air...<br>stable/ambassador                       <span class="hljs-number">5.3</span>.<span class="hljs-number">2</span>           <span class="hljs-number">0.86</span>.<span class="hljs-number">1</span>                  DEPRECATED A Helm chart <span class="hljs-keyword">for</span> Datawire Ambassador<br>stable/anchore<span class="hljs-literal">-engine</span>                   <span class="hljs-number">1.7</span>.<span class="hljs-number">0</span>           <span class="hljs-number">0.7</span>.<span class="hljs-number">3</span>                   Anchore container analysis and policy evaluatio...<br>stable/apm<span class="hljs-literal">-server</span>                       <span class="hljs-number">2.1</span>.<span class="hljs-number">7</span>           <span class="hljs-number">7.0</span>.<span class="hljs-number">0</span>                   DEPRECATED The server receives <span class="hljs-keyword">data</span> from the El...<br>stable/ark                              <span class="hljs-number">4.2</span>.<span class="hljs-number">2</span>           <span class="hljs-number">0.10</span>.<span class="hljs-number">2</span>                  DEPRECATED A Helm chart <span class="hljs-keyword">for</span> ark<br>stable/artifactory                      <span class="hljs-number">7.3</span>.<span class="hljs-number">2</span>           <span class="hljs-number">6.1</span>.<span class="hljs-number">0</span>                   DEPRECATED Universal Repository Manager support...<br>stable/artifactory<span class="hljs-literal">-ha</span>                   <span class="hljs-number">0.4</span>.<span class="hljs-number">2</span>           <span class="hljs-number">6.2</span>.<span class="hljs-number">0</span>                   DEPRECATED Universal Repository Manager support...<br>stable/atlantis                         <span class="hljs-number">3.12</span>.<span class="hljs-number">4</span>          v0.<span class="hljs-number">14.0</span>                 DEPRECATED A Helm chart <span class="hljs-keyword">for</span> Atlantis https://ww...<br>stable/auditbeat                        <span class="hljs-number">1.1</span>.<span class="hljs-number">2</span>           <span class="hljs-number">6.7</span>.<span class="hljs-number">0</span>                   DEPRECATED A lightweight shipper to audit the a...<br>stable/aws<span class="hljs-literal">-cluster-autoscaler</span>           <span class="hljs-number">0.3</span>.<span class="hljs-number">4</span>                                   DEPRECATED Scales worker nodes within autoscali...<br>stable/aws<span class="hljs-literal">-iam-authenticator</span>            <span class="hljs-number">0.1</span>.<span class="hljs-number">5</span>           <span class="hljs-number">1.0</span>                     DEPRECATED A Helm chart <span class="hljs-keyword">for</span> aws<span class="hljs-literal">-iam-authenticator</span><br>stable/bitcoind                         <span class="hljs-number">1.0</span>.<span class="hljs-number">2</span>           <span class="hljs-number">0.17</span>.<span class="hljs-number">1</span>                  DEPRECATED Bitcoin is an innovative payment net...<br>stable/bookstack                        <span class="hljs-number">1.2</span>.<span class="hljs-number">4</span>           <span class="hljs-number">0.27</span>.<span class="hljs-number">5</span>                  DEPRECATED BookStack is a simple, self<span class="hljs-literal">-hosted</span>, ...<br>......<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm search repo nginx</span><br>NAME                            CHART VERSION   APP VERSION     DESCRIPTION<br>stable/nginx<span class="hljs-literal">-ingress</span>            <span class="hljs-number">1.41</span>.<span class="hljs-number">3</span>          v0.<span class="hljs-number">34.1</span>         DEPRECATED! An nginx Ingress controller that us...<br>stable/nginx<span class="hljs-literal">-ldapauth-proxy</span>     <span class="hljs-number">0.1</span>.<span class="hljs-number">6</span>           <span class="hljs-number">1.13</span>.<span class="hljs-number">5</span>          DEPRECATED - nginx proxy with ldapauth<br>stable/nginx<span class="hljs-literal">-lego</span>               <span class="hljs-number">0.3</span>.<span class="hljs-number">1</span>                           Chart <span class="hljs-keyword">for</span> nginx<span class="hljs-literal">-ingress-controller</span> and kube<span class="hljs-literal">-lego</span><br>stable/gcloud<span class="hljs-literal">-endpoints</span>         <span class="hljs-number">0.1</span>.<span class="hljs-number">2</span>           <span class="hljs-number">1</span>               DEPRECATED Develop, deploy, protect and monitor...<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm search repo tomcat</span><br>NAME            CHART VERSION   APP VERSION     DESCRIPTION<br>stable/tomcat   <span class="hljs-number">0.4</span>.<span class="hljs-number">3</span>           <span class="hljs-number">7.0</span>             DEPRECATED - Deploy a basic tomcat application ...<br></code></pre></td></tr></table></figure><h6 id="5-3-部署应用-MySQL"><a href="#5-3-部署应用-MySQL" class="headerlink" title="5.3 部署应用 MySQL"></a>5.3 部署应用 MySQL</h6><blockquote><p>环境说明：k8s集群中存在storageclass:nfs-client</p></blockquote><p>我们现在安装一个 <code>mysql</code> 应用：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm search repo mysql</span><br>NAME                                    CHART VERSION   APP VERSION     DESCRIPTION<br>stable/mysql                            <span class="hljs-number">1.6</span>.<span class="hljs-number">9</span>           <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          DEPRECATED - Fast, reliable, scalable, and easy...<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># --generate-name 自动生成部署的release</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm install stable/mysql --generate-name  --set persistence.storageClass=nfs-client --set mysqlRootPassword=test123</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs powershell">部署过程输出的信息：<br>NAME: mysql<span class="hljs-literal">-1658996042</span><br>LAST DEPLOYED: Thu Jul <span class="hljs-number">28</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">03</span> <span class="hljs-number">2022</span><br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: <span class="hljs-number">1</span><br>NOTES:<br>MySQL can be accessed via port <span class="hljs-number">3306</span> on the following DNS name from within your cluster:<br>mysql<span class="hljs-literal">-1658996042</span>.default.svc.cluster.local<br><br>To get your root password run:<br><br>    MYSQL_ROOT_PASSWORD=<span class="hljs-variable">$</span>(kubectl get secret <span class="hljs-literal">--namespace</span> default mysql<span class="hljs-literal">-1658996042</span> <span class="hljs-literal">-o</span> jsonpath=<span class="hljs-string">&quot;&#123;.data.mysql-root-password&#125;&quot;</span> | base64 <span class="hljs-literal">--decode</span>; <span class="hljs-built_in">echo</span>)<br><br>To connect to your database:<br><br><span class="hljs-number">1</span>. Run an Ubuntu pod that you can use as a client:<br><br>    kubectl run <span class="hljs-literal">-i</span> <span class="hljs-literal">--tty</span> ubuntu <span class="hljs-literal">--image</span>=ubuntu:<span class="hljs-number">16.04</span> <span class="hljs-literal">--restart</span>=Never <span class="hljs-literal">--</span> bash <span class="hljs-literal">-il</span><br><br><span class="hljs-number">2</span>. Install the mysql client:<br><br>    <span class="hljs-variable">$</span> apt<span class="hljs-literal">-get</span> update &amp;&amp; apt<span class="hljs-literal">-get</span> install mysql<span class="hljs-literal">-client</span> <span class="hljs-literal">-y</span><br><br><span class="hljs-number">3</span>. Connect <span class="hljs-keyword">using</span> the mysql cli, then provide your password:<br>    <span class="hljs-variable">$</span> mysql <span class="hljs-literal">-h</span> mysql<span class="hljs-literal">-1658996042</span> <span class="hljs-literal">-p</span><br><br>To connect to your database directly from outside the K8s cluster:<br>    MYSQL_HOST=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>    MYSQL_PORT=<span class="hljs-number">3306</span><br><br>    <span class="hljs-comment"># Execute the following command to route the connection:</span><br>    kubectl port<span class="hljs-literal">-forward</span> svc/mysql<span class="hljs-literal">-1658996042</span> <span class="hljs-number">3306</span><br><br>    mysql <span class="hljs-literal">-h</span> <span class="hljs-variable">$</span>&#123;MYSQL_HOST&#125; <span class="hljs-literal">-P</span><span class="hljs-variable">$</span>&#123;MYSQL_PORT&#125; <span class="hljs-literal">-u</span> root <span class="hljs-literal">-p</span><span class="hljs-variable">$</span>&#123;MYSQL_ROOT_PASSWORD&#125;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看helm已经安装的release（这个release是部署时候的应用名称）</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm list</span><br>NAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION<br><br>mysql<span class="hljs-literal">-1658996042</span>        default         <span class="hljs-number">1</span>               <span class="hljs-number">2022</span><span class="hljs-literal">-07-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">03.530489788</span> +<span class="hljs-number">0800</span> CST deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods</span><br>NAME                                     READY   STATUS    RESTARTS   AGE<br>mysql<span class="hljs-literal">-1658996042-755f5f64f6-j5s67</span>        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">82</span>s<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pvc</span><br>NAME               STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE<br>mysql<span class="hljs-literal">-1658996042</span>   Bound    pvc<span class="hljs-literal">-7fcb894e-5b8c-4f3e-945d-21b60b9309e5</span>   <span class="hljs-number">8</span><span class="hljs-built_in">Gi</span>        RWO            nfs<span class="hljs-literal">-client</span>     <span class="hljs-number">93</span>s<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pv</span><br>NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                      STORAGECLASS   REASON   AGE<br>pvc<span class="hljs-literal">-7fcb894e-5b8c-4f3e-945d-21b60b9309e5</span>   <span class="hljs-number">8</span><span class="hljs-built_in">Gi</span>        RWO            Delete           Bound    default/mysql<span class="hljs-literal">-1658996042</span>   nfs<span class="hljs-literal">-client</span>              <span class="hljs-number">97</span>s<br></code></pre></td></tr></table></figure><p><strong>一个 chart 包是可以多次安装到同一个集群中的，每次安装都会产生一个release, 每个release都可以独立管理和升级。</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm install stable/mysql --generate-name  --set persistence.storageClass=nfs-client --set mysqlRootPassword=root</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm ls</span><br>NAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION<br>mysql<span class="hljs-literal">-1658996042</span>        default         <span class="hljs-number">1</span>               <span class="hljs-number">2022</span><span class="hljs-literal">-07-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">14</span>:<span class="hljs-number">03.530489788</span> +<span class="hljs-number">0800</span> CST deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>mysql<span class="hljs-literal">-1658996297</span>        default         <span class="hljs-number">1</span>               <span class="hljs-number">2022</span><span class="hljs-literal">-07-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">18</span>:<span class="hljs-number">19.282074215</span> +<span class="hljs-number">0800</span> CST deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods</span><br>NAME                                     READY   STATUS    RESTARTS   AGE<br>mysql<span class="hljs-literal">-1658996042-755f5f64f6-j5s67</span>        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">45</span>m<br>mysql<span class="hljs-literal">-1658996297-75f6f86d84-5qd8r</span>        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m<br>nfs<span class="hljs-literal">-client-provisioner-9d46587b5-7n2vf</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">123</span>m<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl exec -it mysql-1658996042-755f5f64f6-j5s67 -- bash</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs powershell">root@mysql<span class="hljs-literal">-1658996042-755f5f64f6-j5s67</span>:/<span class="hljs-comment"># mysql -uroot -ptest123</span><br>mysql: [<span class="hljs-type">Warning</span>] <span class="hljs-keyword">Using</span> a password on the <span class="hljs-keyword">command</span> line interface can be insecure.<br>Welcome to the MySQL monitor.  Commands <span class="hljs-keyword">end</span> with ; or \g.<br>Your MySQL connection id is <span class="hljs-number">547</span><br>Server version: <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span> MySQL Community Server (GPL)<br><br>Copyright (c) <span class="hljs-number">2000</span>, <span class="hljs-number">2020</span>, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br><span class="hljs-built_in">Type</span> <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> help. <span class="hljs-built_in">Type</span> <span class="hljs-string">&#x27;\c&#x27;</span> to <span class="hljs-built_in">clear</span> the current input statement.<br><br>mysql&gt; show databases;<br>+<span class="hljs-literal">--------------------</span>+<br>| Database           |<br>+<span class="hljs-literal">--------------------</span>+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+<span class="hljs-literal">--------------------</span>+<br><span class="hljs-number">4</span> rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h6 id="5-4-查看chart资源"><a href="#5-4-查看chart资源" class="headerlink" title="5.4 查看chart资源"></a>5.4 查看chart资源</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get all -l release=mysql-1658996042</span><br>NAME                                    READY   STATUS    RESTARTS   AGE<br>pod/mysql<span class="hljs-literal">-1658996042-755f5f64f6-j5s67</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>m<br><br>NAME                       <span class="hljs-built_in">TYPE</span>        CLUSTER<span class="hljs-literal">-IP</span>    EXTERNAL<span class="hljs-literal">-IP</span>   PORT(S)    AGE<br>service/mysql<span class="hljs-literal">-1658996042</span>   ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">2.136</span>   &lt;none&gt;        <span class="hljs-number">3306</span>/TCP   <span class="hljs-number">72</span>m<br><br>NAME                               READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE<br>deployment.apps/mysql<span class="hljs-literal">-1658996042</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">72</span>m<br><br>NAME                                          DESIRED   CURRENT   READY   AGE<br>replicaset.apps/mysql<span class="hljs-literal">-1658996042-755f5f64f6</span>   <span class="hljs-number">1</span>         <span class="hljs-number">1</span>         <span class="hljs-number">1</span>       <span class="hljs-number">72</span>m<br></code></pre></td></tr></table></figure><p>我们也可以 <code>helm show chart</code> 命令来了解 MySQL 这个 chart 包的一些特性：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm show chart stable/mysql</span><br>apiVersion: v1<br>appVersion: <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>deprecated: true<br>description: DEPRECATED - Fast, reliable, scalable, and easy to use <span class="hljs-built_in">open-source</span> relational<br>  database system.<br>home: https://www.mysql.com/<br>icon: https://www.mysql.com/common/logos/logo<span class="hljs-literal">-mysql-170x115</span>.png<br>keywords:<br>- mysql<br>- database<br>- sql<br>name: mysql<br>sources:<br>- https://github.com/kubernetes/charts<br>- https://github.com/docker<span class="hljs-literal">-library</span>/mysql<br>version: <span class="hljs-number">1.6</span>.<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>如果想要了解更多信息，可以用 <code>helm show all</code> 命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm show all stable/mysql</span><br>......<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm show chart 是 Helm 命令行工具中的一个命令，用于展示 Chart 的详细信息。Chart 是 Helm 用来打包 Kubernetes 资源的一个概念，它包含了部署一个应用到 Kubernetes 集群所需的所有必要配置文件和依赖。当你运行 helm show chart [chart-name] 命令时，Helm 会输出指定 Chart 包含的元数据和结构信息，这对于理解和验证 Chart 的内容以及其设计方式非常有帮助。下面是该命令显示内容的一些关键部分解析：<br><br>Chart.yaml: 这是 Chart 的主要元数据文件，helm show chart 会显示这个文件的内容。它包括但不限于以下信息：<br><br>name: Chart 的名称。<br>version: Chart 的版本。<br>description: Chart 的简短描述。<br>keywords: 与 Chart 相关的关键词列表。<br>home: Chart 的项目主页 URL。<br>sources: Chart 源代码的 URL 列表。<br>maintainers: 维护者的信息列表，包括名字、电子邮件和角色。<br>dependencies: 本 Chart 依赖的其他 Chart 列表。<br>values.yaml（部分显示或引用）: 这个文件定义了 Chart 的默认配置值。虽然 helm show chart 不会直接完整显示这个文件的内容，但它可能会提到或引用某些默认值，特别是在描述如何使用或自定义 Chart 时。values.yaml 包含了所有可配置项及其默认值，用户可以通过 Helm 的值覆盖功能来修改这些值。<br><br>Templates: 虽然 helm show chart 不会直接展示模板文件的全部内容，它通常会概述模板目录的存在及其重要性。模板目录包含了一系列的 YAML 文件，这些文件使用 Go 模板语言编写，用于生成最终部署到 Kubernetes 的资源配置文件。每个模板文件对应 Kubernetes 中的一种资源类型，如 Deployment、Service、ConfigMap 等，并可以根据 values.yaml 中的值动态生成。<br><br>Chart 的目录结构: 输出可能还会简要介绍 Chart 目录的基本结构，包括但不限于 templates、charts（存放依赖 Chart 的目录）、files（用于存放静态文件）等。<br><br>说明和提示: 在某些情况下，如果 Chart 开发者在 Chart.yaml 或 README 文件中包含了额外的说明或安装提示，helm show chart 输出也可能包含这些信息，帮助用户更好地理解如何使用或配置该 Chart。<br></code></pre></td></tr></table></figure><h6 id="5-5-删除Release"><a href="#5-5-删除Release" class="headerlink" title="5.5 删除Release"></a>5.5 删除Release</h6><p>如果需要删除这个 release，也很简单，只需要使用 <code>helm uninstall</code>或<code>helm delete</code> 命令即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm uninstall mysql-1605195227</span><br>release <span class="hljs-string">&quot;mysql-1605195227&quot;</span> uninstalled<br></code></pre></td></tr></table></figure><p><code>uninstall</code> 命令会从 Kubernetes 中删除 release，也会删除与 release 相关的所有 Kubernetes 资源以及 release 历史记录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm ls</span><br>NAME              NAMESPACE     REVISION     UPDATED    STATUS        CHART           APP VERSION<br>mysql<span class="hljs-literal">-1605192239</span>     default     <span class="hljs-number">1</span>        .........     deployed      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>       <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>在删除的时候使用 <code>--keep-history</code> 参数，则会保留 release 的历史记录，该 release 的状态就是 <code>UNINSTALLED</code>，</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm uninstall mysql-1605192239 --keep-history</span><br>release <span class="hljs-string">&quot;mysql-1605192239&quot;</span> uninstalled<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm ls -a</span><br>NAME                    NAMESPACE       REVISION        UPDATED     STATUS        CHART     APP VERSION<br>mysql<span class="hljs-literal">-1605192239</span>        default         <span class="hljs-number">1</span>              ........    uninstalled     mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>状态为uninstalled<br></code></pre></td></tr></table></figure><p>审查历史时甚至可以取消删除<code>release</code>。</p><p><code>Usage:  helm rollback &lt;RELEASE&gt; [REVISION] [flags]</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm rollback mysql-1605192239 1</span><br>Rollback was a success! Happy Helming!<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm ls</span><br>NAME              NAMESPACE     REVISION     UPDATED    STATUS        CHART           APP VERSION<br>mysql<span class="hljs-literal">-1605192239</span>     default     <span class="hljs-number">2</span>        .........     deployed      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>       <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>rollback后，又回到deployed状态<br></code></pre></td></tr></table></figure><h6 id="5-6-定制参数部署应用"><a href="#5-6-定制参数部署应用" class="headerlink" title="5.6 定制参数部署应用"></a>5.6 定制参数部署应用</h6><p>上面我们都是直接使用的 <code>helm install</code> 命令安装的 chart 包，这种情况下只会使用 chart 的默认配置选项，但是更多的时候，是各种各样的需求，所以我们希望根据自己的需求来定制 chart 包的配置参数。</p><p>我们可以使用 <code>helm show values</code> 命令来查看一个 chart 包的所有可配置的参数选项：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm show values stable/mysql</span><br>......<br>......<br></code></pre></td></tr></table></figure><p>上面我们看到的所有参数都是可以用自己的数据来覆盖的，可以在安装的时候通过 YAML 格式的文件来传递这些参数</p><p>1，准备参数文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># vim mysql-config.yml</span><br>mysqlDatabase: helm<br>persistence:<br>  enabled: true  <span class="hljs-comment"># 没有存储卷情况下，改为false</span><br>  storageClass: nfs<span class="hljs-literal">-client</span><br></code></pre></td></tr></table></figure><p>2, 使用<code>-f mysql-config.yml</code>安装应用并覆盖参数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm install mysql -f mysql-config.yml stable/mysql</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs powershell">输出内容：<br><br>NAME: mysql<br>LAST DEPLOYED: Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">07</span>:<span class="hljs-number">17</span> <span class="hljs-number">2022</span><br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: <span class="hljs-number">1</span><br>NOTES:<br>MySQL can be accessed via port <span class="hljs-number">3306</span> on the following DNS name from within your cluster:<br>mysql.default.svc.cluster.local<br><br>To get your root password run:<br><br>    MYSQL_ROOT_PASSWORD=<span class="hljs-variable">$</span>(kubectl get secret <span class="hljs-literal">--namespace</span> default mysql <span class="hljs-literal">-o</span> jsonpath=<span class="hljs-string">&quot;&#123;.data.mysql-root-password&#125;&quot;</span> | base64 <span class="hljs-literal">--decode</span>; <span class="hljs-built_in">echo</span>)<br><br>To connect to your database:<br><br><span class="hljs-number">1</span>. Run an Ubuntu pod that you can use as a client:<br><br>    kubectl run <span class="hljs-literal">-i</span> <span class="hljs-literal">--tty</span> ubuntu <span class="hljs-literal">--image</span>=ubuntu:<span class="hljs-number">16.04</span> <span class="hljs-literal">--restart</span>=Never <span class="hljs-literal">--</span> bash <span class="hljs-literal">-il</span><br><br><span class="hljs-number">2</span>. Install the mysql client:<br><br>    <span class="hljs-variable">$</span> apt<span class="hljs-literal">-get</span> update &amp;&amp; apt<span class="hljs-literal">-get</span> install mysql<span class="hljs-literal">-client</span> <span class="hljs-literal">-y</span><br><br><span class="hljs-number">3</span>. Connect <span class="hljs-keyword">using</span> the mysql cli, then provide your password:<br>    <span class="hljs-variable">$</span> mysql <span class="hljs-literal">-h</span> mysql <span class="hljs-literal">-p</span><br><br>To connect to your database directly from outside the K8s cluster:<br>    MYSQL_HOST=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>    MYSQL_PORT=<span class="hljs-number">3306</span><br><br>    <span class="hljs-comment"># Execute the following command to route the connection:</span><br>    kubectl port<span class="hljs-literal">-forward</span> svc/mysql <span class="hljs-number">3306</span><br><br>    mysql <span class="hljs-literal">-h</span> <span class="hljs-variable">$</span>&#123;MYSQL_HOST&#125; <span class="hljs-literal">-P</span><span class="hljs-variable">$</span>&#123;MYSQL_PORT&#125; <span class="hljs-literal">-u</span> root <span class="hljs-literal">-p</span><span class="hljs-variable">$</span>&#123;MYSQL_ROOT_PASSWORD&#125;<br></code></pre></td></tr></table></figure><p>3, 查看覆盖的参数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 这是查看除了默认的配置之外自己配置的，但是部署mysql的时候是--set指定的，如果是直接部署，没有任何的指定，获取values的值为空</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">master</span> ~]<span class="hljs-comment"># helm get values mysql</span><br>USER<span class="hljs-literal">-SUPPLIED</span> VALUES:<br>mysqlDatabase: helm<br>persistence:<br>  enabled: true<br>  storageClass: nfs<span class="hljs-literal">-client</span><br></code></pre></td></tr></table></figure><p>4, 查看部署的相关资源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get all -l release=mysql</span><br>NAME                         READY   STATUS    RESTARTS   AGE<br>pod/mysql<span class="hljs-literal">-855976764d-npvgm</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">40</span>m<br><br>NAME            <span class="hljs-built_in">TYPE</span>        CLUSTER<span class="hljs-literal">-IP</span>   EXTERNAL<span class="hljs-literal">-IP</span>   PORT(S)    AGE<br>service/mysql   ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">0.84</span>   &lt;none&gt;        <span class="hljs-number">3306</span>/TCP   <span class="hljs-number">40</span>m<br><br>NAME                    READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE<br>deployment.apps/mysql   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">40</span>m<br><br>NAME                               DESIRED   CURRENT   READY   AGE<br>replicaset.apps/mysql<span class="hljs-literal">-855976764d</span>   <span class="hljs-number">1</span>         <span class="hljs-number">1</span>         <span class="hljs-number">1</span>       <span class="hljs-number">40</span>m<br></code></pre></td></tr></table></figure><p>5, 查看pod的IP</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get pods -o wide -l release=mysql</span><br>NAME                     READY   STATUS    RESTARTS   AGE   IP              NODE           NOMINATED NODE   READINESS GATES<br>mysql<span class="hljs-literal">-855976764d-npvgm</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m   <span class="hljs-number">100.119</span>.<span class="hljs-number">84.71</span>   k8s<span class="hljs-literal">-worker01</span>   &lt;none&gt;           &lt;none&gt;<br><br>得到pod的IP为<span class="hljs-number">100.119</span>.<span class="hljs-number">84.71</span><br></code></pre></td></tr></table></figure><p>6, 安装mysql客户端并连接测试</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># yum install mariadb -y</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 获取helm部署的mysql的root密码</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get secret --namespace default mysql -o jsonpath=&quot;&#123;.data.mysql-root-password&#125;&quot; | base64 --decode; echo</span><br>wL2SD0RCsT<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get svc</span><br>NAME         <span class="hljs-built_in">TYPE</span>        CLUSTER<span class="hljs-literal">-IP</span>   EXTERNAL<span class="hljs-literal">-IP</span>   PORT(S)    AGE<br>kubernetes   ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">0.1</span>    &lt;none&gt;        <span class="hljs-number">443</span>/TCP    <span class="hljs-number">27</span><span class="hljs-built_in">h</span><br>mysql        ClusterIP   <span class="hljs-number">10.96</span>.<span class="hljs-number">0.84</span>   &lt;none&gt;        <span class="hljs-number">3306</span>/TCP   <span class="hljs-number">5</span>m21s<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># mysql -h 10.96.0.84 -uroot -pwL2SD0RCsT -e &quot;show databases;&quot;</span><br>+<span class="hljs-literal">--------------------</span>+<br>| Database           |<br>+<span class="hljs-literal">--------------------</span>+<br>| information_schema |<br>| helm               |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+<span class="hljs-literal">--------------------</span>+<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get pods -o wide -l release=mysql</span><br>NAME                     READY   STATUS    RESTARTS   AGE   IP              NODE           NOMINATED NODE   READINESS GATES<br>mysql<span class="hljs-literal">-855976764d-npvgm</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">41</span>m   <span class="hljs-number">100.119</span>.<span class="hljs-number">84.71</span>   k8s<span class="hljs-literal">-worker01</span>   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># mysql -h 100.119.84.71 -uroot -pwL2SD0RCsT -e &quot;show databases;&quot;</span><br>+<span class="hljs-literal">--------------------</span>+<br>| Database           |<br>+<span class="hljs-literal">--------------------</span>+<br>| information_schema |<br>| helm               |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+<span class="hljs-literal">--------------------</span>+<br></code></pre></td></tr></table></figure><h6 id="5-7-升级和回滚"><a href="#5-7-升级和回滚" class="headerlink" title="5.7 升级和回滚"></a>5.7 升级和回滚</h6><p>当新版本的 chart 包发布的时候，或者当你要更改 release 的配置的时候，你可以使用 <code>helm upgrade</code> 命令来操作。升级需要一个现有的 release，并根据提供的信息对其进行升级。因为 Kubernetes charts 可能很大而且很复杂，Helm 会尝试以最小的侵入性进行升级，它只会更新自上一版本以来发生的变化：</p><p>1, 升级前查看版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># mysql -h 10.96.0.84 -uroot -pwL2SD0RCsT -e &quot;select version()&quot;</span><br>+<span class="hljs-literal">-----------</span>+<br>| version() |<br>+<span class="hljs-literal">-----------</span>+<br>| <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>    |     版本为<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br>+<span class="hljs-literal">-----------</span>+<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment">#  kubectl get deployment mysql -o wide</span><br>NAME    READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR<br>mysql   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">54</span>m   mysql        mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>   app=mysql,release=mysql<br>images版本为<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>2，修改配置并升级</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># vim mysql-config.yml</span><br>mysqlDatabase: kubemsb<br>persistence:<br>  enabled: true<br>  storageClass: nfs<span class="hljs-literal">-client</span><br></code></pre></td></tr></table></figure><p>升级并且加一个<code>--set imageTag=5.7.31</code>参数设置为5.7.31版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># helm upgrade mysql -f mysql-config.yml --set imageTag=5.7.31 stable/mysql</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs powershell">升级过程中的输出：<br><br>WARNING: This chart is deprecated<br>Release <span class="hljs-string">&quot;mysql&quot;</span> has been upgraded. Happy Helming!<br>NAME: mysql<br>LAST DEPLOYED: Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">04</span>:<span class="hljs-number">20</span> <span class="hljs-number">2022</span><br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: <span class="hljs-number">2</span><br>NOTES:<br>MySQL can be accessed via port <span class="hljs-number">3306</span> on the following DNS name from within your cluster:<br>mysql.default.svc.cluster.local<br><br>To get your root password run:<br><br>    MYSQL_ROOT_PASSWORD=<span class="hljs-variable">$</span>(kubectl get secret <span class="hljs-literal">--namespace</span> default mysql <span class="hljs-literal">-o</span> jsonpath=<span class="hljs-string">&quot;&#123;.data.mysql-root-password&#125;&quot;</span> | base64 <span class="hljs-literal">--decode</span>; <span class="hljs-built_in">echo</span>)<br><br>To connect to your database:<br><br><span class="hljs-number">1</span>. Run an Ubuntu pod that you can use as a client:<br><br>    kubectl run <span class="hljs-literal">-i</span> <span class="hljs-literal">--tty</span> ubuntu <span class="hljs-literal">--image</span>=ubuntu:<span class="hljs-number">16.04</span> <span class="hljs-literal">--restart</span>=Never <span class="hljs-literal">--</span> bash <span class="hljs-literal">-il</span><br><br><span class="hljs-number">2</span>. Install the mysql client:<br><br>    <span class="hljs-variable">$</span> apt<span class="hljs-literal">-get</span> update &amp;&amp; apt<span class="hljs-literal">-get</span> install mysql<span class="hljs-literal">-client</span> <span class="hljs-literal">-y</span><br><br><span class="hljs-number">3</span>. Connect <span class="hljs-keyword">using</span> the mysql cli, then provide your password:<br>    <span class="hljs-variable">$</span> mysql <span class="hljs-literal">-h</span> mysql <span class="hljs-literal">-p</span><br><br>To connect to your database directly from outside the K8s cluster:<br>    MYSQL_HOST=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>    MYSQL_PORT=<span class="hljs-number">3306</span><br><br>    <span class="hljs-comment"># Execute the following command to route the connection:</span><br>    kubectl port<span class="hljs-literal">-forward</span> svc/mysql <span class="hljs-number">3306</span><br><br>    mysql <span class="hljs-literal">-h</span> <span class="hljs-variable">$</span>&#123;MYSQL_HOST&#125; <span class="hljs-literal">-P</span><span class="hljs-variable">$</span>&#123;MYSQL_PORT&#125; <span class="hljs-literal">-u</span> root <span class="hljs-literal">-p</span><span class="hljs-variable">$</span>&#123;MYSQL_ROOT_PASSWORD&#125;<br>    <br> 注意：更新过程中，密码会被更新，但是实际使用中，密码并未更新。<br></code></pre></td></tr></table></figure><p>3, 升级后确认版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get deployment mysql -o wide</span><br>NAME    READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR<br>mysql   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">58</span>m   mysql        mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">31</span>   app=mysql,release=mysql<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get pods -o wide</span><br>NAME                                     READY   STATUS    RESTARTS       AGE     IP              NODE           NOMINATED NODE   READINESS GATES<br>mysql<span class="hljs-literal">-6f57f64c9d-sc72v</span>                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>              <span class="hljs-number">2</span>m20s   <span class="hljs-number">100.119</span>.<span class="hljs-number">84.72</span>   k8s<span class="hljs-literal">-worker01</span>   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># mysql -h 100.119.84.72 -uroot -pwL2SD0RCsT -e &quot;select version()&quot;</span><br>+<span class="hljs-literal">-----------</span>+<br>| version() |<br>+<span class="hljs-literal">-----------</span>+<br>| <span class="hljs-number">5.7</span>.<span class="hljs-number">31</span>    |   版本升级为<span class="hljs-number">5.7</span>.<span class="hljs-number">31</span><br>+<span class="hljs-literal">-----------</span>+<br></code></pre></td></tr></table></figure><p>4, 回滚</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm history mysql</span><br>REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION<br><span class="hljs-number">1</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">07</span>:<span class="hljs-number">17</span> <span class="hljs-number">2022</span>        superseded      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Install complete<br><span class="hljs-number">2</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">04</span>:<span class="hljs-number">20</span> <span class="hljs-number">2022</span>        deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Upgrade complete<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm rollback mysql 1</span><br>Rollback was a success! Happy Helming!<br></code></pre></td></tr></table></figure><p>5, 验证</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># kubectl get deployment mysql -o wide</span><br>NAME    READY   UP<span class="hljs-literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR<br>mysql   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">65</span>m   mysql        mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>   app=mysql,release=mysql<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm history mysql</span><br>REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION<br><span class="hljs-number">1</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">14</span>:<span class="hljs-number">07</span>:<span class="hljs-number">17</span> <span class="hljs-number">2022</span>        superseded      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Install complete<br><span class="hljs-number">2</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">04</span>:<span class="hljs-number">20</span> <span class="hljs-number">2022</span>        superseded      mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Upgrade complete<br><span class="hljs-number">3</span>               Fri Jul <span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">12</span>:<span class="hljs-number">24</span> <span class="hljs-number">2022</span>        deployed        mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>     <span class="hljs-number">5.7</span>.<span class="hljs-number">30</span>          Rollback to <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h6 id="5-8-更多安装方式"><a href="#5-8-更多安装方式" class="headerlink" title="5.8 更多安装方式"></a>5.8 更多安装方式</h6><p>和yum命令类似</p><ul><li>chart 仓库</li><li>本地 chart 压缩包</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">persistence.storageClass<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm pull stable/mysql</span><br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># ls mysql-1.6.9.tgz</span><br>mysql<span class="hljs-literal">-1</span>.<span class="hljs-number">6.9</span>.tgz<br><br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> <span class="hljs-type">helmdir</span>]<span class="hljs-comment"># helm install mysql2 mysql-1.6.9.tgz</span><br></code></pre></td></tr></table></figure><ul><li>在线的 URL（helm install fool <a href="https://example.com/charts/foo-1.2.3.tgz%EF%BC%89">https://example.com/charts/foo-1.2.3.tgz）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes-helm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>containerd配置文件备份</title>
    <link href="/2025/03/19/containerd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/"/>
    <url>/2025/03/19/containerd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim /etc/containerd/config.toml</span><br><br><span class="hljs-comment"># cat /etc/containerd/config.toml</span><br>root = <span class="hljs-string">&quot;/var/lib/containerd&quot;</span><br>state = <span class="hljs-string">&quot;/run/containerd&quot;</span><br>oom_score = <span class="hljs-literal">-999</span><br><br>[<span class="hljs-type">grpc</span>]<br>  address = <span class="hljs-string">&quot;/run/containerd/containerd.sock&quot;</span><br>  uid = <span class="hljs-number">0</span><br>  gid = <span class="hljs-number">0</span><br>  max_recv_message_size = <span class="hljs-number">16777216</span><br>  max_send_message_size = <span class="hljs-number">16777216</span><br><br>[<span class="hljs-type">debug</span>]<br>  address = <span class="hljs-string">&quot;&quot;</span><br>  uid = <span class="hljs-number">0</span><br>  gid = <span class="hljs-number">0</span><br>  level = <span class="hljs-string">&quot;&quot;</span><br><br>[<span class="hljs-type">metrics</span>]<br>  address = <span class="hljs-string">&quot;&quot;</span><br>  grpc_histogram = false<br><br>[<span class="hljs-type">cgroup</span>]<br>  path = <span class="hljs-string">&quot;&quot;</span><br><br>[<span class="hljs-type">plugins</span>]<br>  [<span class="hljs-type">plugins.cgroups</span>]<br>    no_prometheus = false<br>  [<span class="hljs-type">plugins.cri</span>]<br>    stream_server_address = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>    stream_server_port = <span class="hljs-string">&quot;0&quot;</span><br>    enable_selinux = false<br>    <span class="hljs-comment"># sandbox_image = &quot;easzlab/pause-amd64:3.2&quot;</span><br>    sandbox_image = <span class="hljs-string">&quot;registry.aliyuncs.com/google_containers/pause:3.6&quot;</span><br>    stats_collect_period = <span class="hljs-number">10</span><br>    systemd_cgroup = true<br>    enable_tls_streaming = false<br>    max_container_log_line_size = <span class="hljs-number">16384</span><br>    [<span class="hljs-type">plugins.cri.containerd</span>]<br>      snapshotter = <span class="hljs-string">&quot;overlayfs&quot;</span><br>      no_pivot = false<br>      [<span class="hljs-type">plugins.cri.containerd.default_runtime</span>]<br>        runtime_type = <span class="hljs-string">&quot;io.containerd.runtime.v1.linux&quot;</span><br>        runtime_engine = <span class="hljs-string">&quot;&quot;</span><br>        runtime_root = <span class="hljs-string">&quot;&quot;</span><br>      [<span class="hljs-type">plugins.cri.containerd.untrusted_workload_runtime</span>]<br>        runtime_type = <span class="hljs-string">&quot;&quot;</span><br>        runtime_engine = <span class="hljs-string">&quot;&quot;</span><br>        runtime_root = <span class="hljs-string">&quot;&quot;</span><br>    [<span class="hljs-type">plugins.cri.cni</span>]<br>      bin_dir = <span class="hljs-string">&quot;/opt/kube/bin&quot;</span><br>      conf_dir = <span class="hljs-string">&quot;/etc/cni/net.d&quot;</span><br>      conf_template = <span class="hljs-string">&quot;/etc/cni/net.d/10-default.conf&quot;</span><br>    [<span class="hljs-type">plugins.cri.registry</span>]<br>      [<span class="hljs-type">plugins.cri.registry.mirrors</span>]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;docker.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>            <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;gcr.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://gcr.mirrors.ustc.edu.cn&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;k8s.gcr.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://gcr.mirrors.ustc.edu.cn/google-containers/&quot;</span><br>          ]<br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;quay.io&quot;</span>]<br>          endpoint = [<br>            <span class="hljs-string">&quot;https://quay.mirrors.ustc.edu.cn&quot;</span><br>          ]<br><span class="hljs-comment"># Harbor做为本地容器镜像仓库。</span><br>        [<span class="hljs-type">plugins.cri.registry.mirrors.</span><span class="hljs-string">&quot;harbor.localcluster.com&quot;</span>] <br>          endpoint = [<br>            <span class="hljs-string">&quot;http://harbor.localcluster.com&quot;</span><br>          ]<br>    [<span class="hljs-type">plugins.cri.x509_key_pair_streaming</span>]<br>      tls_cert_file = <span class="hljs-string">&quot;&quot;</span><br>      tls_key_file = <span class="hljs-string">&quot;&quot;</span><br>  [<span class="hljs-type">plugins.diff</span>-<span class="hljs-type">service</span>]<br>    default = [<span class="hljs-string">&quot;walking&quot;</span>]<br>  [<span class="hljs-type">plugins.linux</span>]<br>    shim = <span class="hljs-string">&quot;containerd-shim&quot;</span><br>    runtime = <span class="hljs-string">&quot;runc&quot;</span><br>    runtime_root = <span class="hljs-string">&quot;&quot;</span><br>    no_shim = false<br>    shim_debug = false<br>  [<span class="hljs-type">plugins.opt</span>]<br>    path = <span class="hljs-string">&quot;/opt/containerd&quot;</span><br>  [<span class="hljs-type">plugins.restart</span>]<br>    interval = <span class="hljs-string">&quot;10s&quot;</span><br>  [<span class="hljs-type">plugins.scheduler</span>]<br>    pause_threshold = <span class="hljs-number">0.02</span><br>    deletion_threshold = <span class="hljs-number">0</span><br>    mutation_threshold = <span class="hljs-number">100</span><br>    schedule_delay = <span class="hljs-string">&quot;0s&quot;</span><br>    startup_delay = <span class="hljs-string">&quot;100ms&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>containerd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Etcd概念及安装</title>
    <link href="/2025/03/19/Etcd%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <url>/2025/03/19/Etcd%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1-etcd概念"><a href="#1-etcd概念" class="headerlink" title="1. etcd概念"></a>1. etcd概念</h1><h2 id="1-1-etcd介绍"><a href="#1-1-etcd介绍" class="headerlink" title="1.1. etcd介绍"></a>1.1. etcd介绍</h2><p>etcd的名字来源于<code>/etc</code>和<code>distibuted</code>，即Unix下配置文件目录和分布式两个关键词。Etcd是一个分布式、可靠的k-v分布式数据库，同时还能提供配置共享、服务发现等功能，常常用在go语言的项目中。etcd主要有以下几个方面的特点：</p><ul><li>部署简单：只有一个二进制文件，可以开箱即用</li><li>使用简单：etcd有着丰富的client SDK</li><li>安全性高：支持SSL证书认证，数据加密，节点之间相互验证身份</li><li>强一致性：通过raft算法实现数据的强一致性，少于二分之一节点宕机仍然能提供服务，通常部署3个或者5个节点</li><li>数据落地：etcd的数据会通过wal格式的数据持久化到磁盘，并且支持snapshot快照</li></ul><p>etcd的架构主要由以下四个部分：</p><ul><li>HTTP Server：请求的入口，用来处理各种API请求</li><li>Store：用于处理etcd支持的各类功能的事务，包括数据索引、节点状态变更、监控与反馈、事件处理与执行等等，是etcd对用户提供的大多数API功能的具体实现</li><li>Raft状态机：实现多节点的etcd集群中数据一致性和节点选主</li><li>WAL：Write Ahead Log（预写式日志），是etcd的数据存储方式。除了在内存中存有所有数据的状态以及节点的索引以外，etcd就通过WAL进行持久化存储。WAL中，所有的数据提交前都会事先记录日志。Snapshot是为了防止数据过多而进行的状态快照；Entry表示存储的具体日志内容。</li></ul><h2 id="1-2-Raft"><a href="#1-2-Raft" class="headerlink" title="1.2. Raft"></a>1.2. Raft</h2><p>Raft 是etcd保障分布式节点中数据一致性的关键，该算法本身有一定的复杂度。网上有很多etcd的raft算法的博客，详细介绍了节点直接如何选主、如何同步数据、如何补偿数据的。</p><ul><li><a href="https://www.jianshu.com/p/5aed73b288f7">ETCD背后的Raft一致性算法原理</a></li><li>[分布式一致性算法 Raft 和 Etcd 原理解析](<a href="http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF%EF%BC%88%E5%AE%8C%EF%BC%89/09">http://learn.lianglianglee.com/专栏/分布式中间件实践之路（完）/09</a> 分布式一致性算法 Raft 和 Etcd 原理解析.md)</li><li><a href="https://www.cnblogs.com/xybaby/p/10124083.html">一文搞懂Raft算法</a></li></ul><hr><h1 id="2-etcd部署"><a href="#2-etcd部署" class="headerlink" title="2. etcd部署"></a>2. etcd部署</h1><h2 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1. 准备工作"></a>2.1. 准备工作</h2><h3 id="2-1-1-硬件需求"><a href="#2-1-1-硬件需求" class="headerlink" title="2.1.1. 硬件需求"></a>2.1.1. 硬件需求</h3><p>这里简单介绍下ectd对硬件的要求，详情需要参考<a href="https://etcd.io/docs/v3.5/op-guide/hardware/">官方文档</a>。</p><ol><li>CPU</li></ol><p>etcd对CPU的消耗不是很大，通常需要2-4个核心即可。在高负载集群下，如同时给上千个客户端提供服务，或者每秒有上万个请求的场景，需要8-16核心。一般规模，可以先使用2-4核心的CPU，后续如果CPU使用率较高，可以逐个节点升级配置。</p><ol><li>Memory</li></ol><p>etcd对内存的需求不是很大，但是也会积极的缓存k-v数据到内存，并用剩余的内存跟踪watcher。一般而言，8G内存也足够了。</p><ol><li>Disk</li></ol><p>磁盘的写入速度是影响etcd性能的关键，etcd的raft共识协议依赖于将元数据写入到日志中，每个etcd节点都要将每个请求写入磁盘。并且，etcd还需要将增量的checkpoint写入磁盘，用来截断日志。如果写入时间过长，可能因为超过心跳时间造成集群重新选举，从而破坏集群的稳定性。在检查磁盘性能的时候，可以使用 fio 进行测试，具体可以参考<a href="https://www.ibm.com/cloud/blog/using-fio-to-tell-whether-your-storage-is-fast-enough-for-etcd">IBM的这篇文章</a>。</p><p>磁盘的性能要从两个方面去评估，第一个是IOPS能力：一般而言，需要50顺序IOPS的速度(比如7200RPM的机械盘)，高负载集群需要500顺序IOPS速度(通常是固态)。第二个是磁盘带宽，这个决定了新节点或者失败节点同步数据的时间，典型的10MB&#x2F;s的磁盘通常在15秒内能恢复100MB数据，100MB&#x2F;s可以在15秒内恢复1GB的数据。</p><p>etcd的数据会相互同步，不要担心节点坏盘问题，因此没必要做RAID5这种RAID10，如果需要做RAID提升磁盘性能，请考虑使用RAID0。</p><ol><li>Network</li></ol><p>etcd集群需要快速网络，并且保障网络的稳定性，通常1GbE的内部网络可以满足大部分场景的需求，通常建议将etcd节点部署到一个网络域内，减少跨网络的延迟。</p><p>etcd官方文档还提供了，不同规模下的kubernetes的对etcd集群配置的要求，需要注意的是，这些集群中etcd是单独部署的，并不是和master节点共用。</p><ol><li>小集群</li></ol><p>请求客户端少于100个，每秒请求少于200个，并且存储数据少于100MB。如50个node的kuberentes集群：</p><table><thead><tr><th>Provider</th><th>Type</th><th>vCPUs</th><th>Memory (GB)</th><th>Max concurrent IOPS</th><th>Disk bandwidth (MB&#x2F;s)</th></tr></thead><tbody><tr><td>AWS</td><td>m4.large</td><td>2</td><td>8</td><td>3600</td><td>56.25</td></tr><tr><td>GCE</td><td>n1-standard-2 + 50GB PD SSD</td><td>2</td><td>7.5</td><td>1500</td><td>25</td></tr></tbody></table><ol><li>中等规模集群</li></ol><p>请求客户端少于500个，每秒请求少于1000个，并且存储数据少于500MB。如250个node的kuberentes集群：</p><table><thead><tr><th>Provider</th><th>Type</th><th>vCPUs</th><th>Memory (GB)</th><th>Max concurrent IOPS</th><th>Disk bandwidth (MB&#x2F;s)</th></tr></thead><tbody><tr><td>AWS</td><td>m4.xlarge</td><td>4</td><td>16</td><td>6000</td><td>93.75</td></tr><tr><td>GCE</td><td>n1-standard-4 + 150GB PD SSD</td><td>4</td><td>15</td><td>4500</td><td>75</td></tr></tbody></table><ol><li>大规模集群</li></ol><p>请求客户端少于1500个，每秒请求少于10000个，并且存储数据少于1000MB。如1000个node的kuberentes集群</p><table><thead><tr><th>Provider</th><th>Type</th><th>vCPUs</th><th>Memory (GB)</th><th>Max concurrent IOPS</th><th>Disk bandwidth (MB&#x2F;s)</th></tr></thead><tbody><tr><td>AWS</td><td>m4.2xlarge</td><td>8</td><td>32</td><td>8000</td><td>125</td></tr><tr><td>GCE</td><td>n1-standard-8 + 250GB PD SSD</td><td>8</td><td>30</td><td>7500</td><td>125</td></tr></tbody></table><ol><li>超大规模集群</li></ol><p>请求客户端超过1500个，每秒请求超过10000个，并且存储数据大于1000MB。如3000个node的kuberentes集群</p><table><thead><tr><th>Provider</th><th>Type</th><th>vCPUs</th><th>Memory (GB)</th><th>Max concurrent IOPS</th><th>Disk bandwidth (MB&#x2F;s)</th></tr></thead><tbody><tr><td>AWS</td><td>m4.4xlarge</td><td>16</td><td>64</td><td>16,000</td><td>250</td></tr><tr><td>GCE</td><td>n1-standard-16 + 500GB PD SSD</td><td>16</td><td>60</td><td>15,000</td><td>250</td></tr></tbody></table><h3 id="2-1-2-机器规划"><a href="#2-1-2-机器规划" class="headerlink" title="2.1.2. 机器规划"></a>2.1.2. 机器规划</h3><p>规划小规模测试集群，集群中节均关闭swap分区，安装chronyd时间同步服务。</p><p>磁盘写入性能由 fio 测试得出，具体可以参考<a href="https://www.ibm.com/cloud/blog/using-fio-to-tell-whether-your-storage-is-fast-enough-for-etcd">IBM的这篇文章</a>。</p><table><thead><tr><th>节点</th><th>IP</th><th>系统</th><th>CPU&#x2F;Memory</th><th>Disk</th><th>write IOPS avg</th><th>write bandwidth avg(MB&#x2F;s)</th></tr></thead><tbody><tr><td>etcd-1</td><td>10.4.7.121</td><td>ubuntu 18.04.5</td><td>2C 4G</td><td>20G SSD</td><td>min&#x3D; 2706, max&#x3D; 2758, avg&#x3D;2727.14</td><td>min&#x3D; 6077, max&#x3D; 6194,avg&#x3D;6124.86</td></tr><tr><td>etcd-2</td><td>10.4.7.122</td><td>ubuntu 18.04.5</td><td>2C 4G</td><td>20G SSD</td><td></td><td></td></tr><tr><td>etcd-3</td><td>10.4.7.123</td><td>ubuntu 18.04.5</td><td>2C 4G</td><td>20G SSD</td><td></td><td></td></tr></tbody></table><h2 id="2-2-etcd集群部署"><a href="#2-2-etcd集群部署" class="headerlink" title="2.2. etcd集群部署"></a>2.2. etcd集群部署</h2><p>ectd 版本下载页面：<a href="https://github.com/etcd-io/etcd/releases%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BB%A5">https://github.com/etcd-io/etcd/releases，这里以</a> 3.5.1 版本为例，进行安装和学习。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# wget https://github.com/etcd-io/etcd/releases/download/v3.5.1/etcd-v3.5.1-linux-amd64.tar.gz<br>[root@duduniao etcd]# tar -xf etcd-v3.5.1-linux-amd64.tar.gz<br>[root@duduniao etcd]# ls etcd-v3.5.1-linux-amd64/etcd* -l<br>-rwxr-xr-x 1 114762 114762 23568384 Oct 15 22:22 etcd-v3.5.1-linux-amd64/etcd<br>-rwxr-xr-x 1 114762 114762 17981440 Oct 15 22:22 etcd-v3.5.1-linux-amd64/etcdctl<br>-rwxr-xr-x 1 114762 114762 16056320 Oct 15 22:22 etcd-v3.5.1-linux-amd64/etcdutl<br><br># 下发etcd软件到各个服务器上<br>[root@duduniao etcd]# scan_host.sh push -h 10.4.7.121 10.4.7.122 10.4.7.123 etcd-v3.5.1-linux-amd64/etcd* /usr/local/bin/<br>10.4.7.123        etcd-v3.5.1-linux-amd64/etcd etcd-v3.5.1-linux-amd64/etcdctl etcd-v3.5.1-linux-amd64/etcdutl --&gt; /usr/local/bin/ Y<br>10.4.7.121        etcd-v3.5.1-linux-amd64/etcd etcd-v3.5.1-linux-amd64/etcdctl etcd-v3.5.1-linux-amd64/etcdutl --&gt; /usr/local/bin/ Y<br>10.4.7.122        etcd-v3.5.1-linux-amd64/etcd etcd-v3.5.1-linux-amd64/etcdctl etcd-v3.5.1-linux-amd64/etcdutl --&gt; /usr/local/bin/ Y<br><br># 配置启动的etcd.service文件<br>[root@duduniao etcd]# scp etcd-1.service 10.4.7.121:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-2.service 10.4.7.122:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-3.service 10.4.7.123:/lib/systemd/system/etcd.service<br><br># 启动etcd<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;mkdir /data/etcd ; systemctl daemon-reload&quot;<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl start etcd &amp;&amp; systemctl enable etcd&quot;<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl is-enabled etcd &amp;&amp; systemctl is-active etcd&quot;<br><br># 检查集群状态<br>[root@duduniao etcd]# ./etcd-v3.5.1-linux-amd64/etcdctl --endpoints=10.4.7.121:2379 member list --write-out=table<br>+------------------+---------+--------+------------------------+------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS       |      CLIENT ADDRS      | IS LEARNER |<br>+------------------+---------+--------+------------------------+------------------------+------------+<br>| 4c45db44e1021917 | started | etcd-1 | http://10.4.7.121:2380 | http://10.4.7.121:2379 |      false |<br>| 721eef2714f1477a | started | etcd-2 | http://10.4.7.122:2380 | http://10.4.7.122:2379 |      false |<br>| f6d5f5c8eef4f092 | started | etcd-3 | http://10.4.7.123:2380 | http://10.4.7.123:2379 |      false |<br>+------------------+---------+--------+------------------------+------------------------+------------+<br><br># 测试读写<br>[root@duduniao etcd]# ./etcd-v3.5.1-linux-amd64/etcdctl --endpoints=10.4.7.121:2379 put k1 test-value-1<br>[root@duduniao etcd]# ./etcd-v3.5.1-linux-amd64/etcdctl --endpoints=10.4.7.123:2379 get k1<br>k1<br>test-value-1<br># etcd-1.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-1 \<br>  --initial-advertise-peer-urls http://10.4.7.121:2380 \<br>  --listen-peer-urls http://10.4.7.121:2380 \<br>  --listen-client-urls http://10.4.7.121:2379,http://127.0.0.1:2379 \<br>  --advertise-client-urls http://10.4.7.121:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=http://10.4.7.121:2380,etcd-2=http://10.4.7.122:2380,etcd-3=http://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --data-dir /data/etcd \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br># etcd-2.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-2 \<br>  --initial-advertise-peer-urls http://10.4.7.122:2380 \<br>  --listen-peer-urls http://10.4.7.122:2380 \<br>  --listen-client-urls http://10.4.7.122:2379,http://127.0.0.1:2379 \<br>  --advertise-client-urls http://10.4.7.122:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=http://10.4.7.121:2380,etcd-2=http://10.4.7.122:2380,etcd-3=http://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --data-dir /data/etcd \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br># etcd-3.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-3 \<br>  --initial-advertise-peer-urls http://10.4.7.123:2380 \<br>  --listen-peer-urls http://10.4.7.123:2380 \<br>  --listen-client-urls http://10.4.7.123:2379,http://127.0.0.1:2379 \<br>  --advertise-client-urls http://10.4.7.123:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=http://10.4.7.121:2380,etcd-2=http://10.4.7.122:2380,etcd-3=http://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --data-dir /data/etcd \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="2-3-TLS加密通信的etcd集群部署"><a href="#2-3-TLS加密通信的etcd集群部署" class="headerlink" title="2.3. TLS加密通信的etcd集群部署"></a>2.3. TLS加密通信的etcd集群部署</h2><p>etcd有两个对外暴露的端口：2379 和 2380。其中2379是的用来接收客户端请求的，2380用来和集群内部其它节点通信和数据同步的。这两种通信都可以进行TLS加密，并且可以使用CA证书进行验证对方是否合法。etcd默认是没用启动RBAC认证的，所有连接上的客户端都是可以操作所有的key。在k8s集群中，ectd服务端是通过客户端证书验证是否合法的，只有客户端拿etcd认可的CA签发的证书才能通过认证。核心参数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain"># client和server直接通信<br>--trusted-ca-file=&lt;path&gt;受信任的CA证书<br>--cert-file=&lt;path&gt;etcd 服务端证书<br>--key-file=&lt;path&gt;etcd 服务端证书私钥<br>--client-cert-auth指定该参数后，服务端要求客户端证书也是trusted-ca-file签发的证书<br><br># etcd节点之间通信(peer)<br>--peer-trusted-ca-file=&lt;path&gt;受信任的CA证书<br>--peer-cert-file=&lt;path&gt;etcd 服务端证书<br>--peer-key-file=&lt;path&gt;etcd 服务端证书私钥<br>--peer-client-cert-auth指定该参数后，要求对端证书也是peer-trusted-ca-file签发的证书<br></code></pre></td></tr></table></figure><h3 id="2-3-1-签发证书"><a href="#2-3-1-签发证书" class="headerlink" title="2.3.1. 签发证书"></a>2.3.1. 签发证书</h3><p>通常我们会同时加密 client-server 以及 peer 节点证书，为了简化，client-server 和 peer 的ca证书通常是相同的，甚至peer证书和server证书都可以相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 下载证书签发工具<br>[root@duduniao etcd]# wget -O /usr/local/bin/cfssl  https://pkg.cfssl.org/R1.2/cfssl_linux-amd64<br>[root@duduniao etcd]# wget -O /usr/local/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64<br>[root@duduniao etcd]# chmod +x /usr/local/bin/cfssljson  /usr/local/bin/cfssl<br># 签发ca证书，这里有个很大的坑：<br>#     etcd节点会不断以客户端身份访问自身的2379端口，并且使用的是server证书，因此ca的server配置必须添加line:19 &quot;client auth&quot;。否则会报以下错误:<br>#     WARNING: 2021/10/17 09:55:56 [core] grpc: addrConn.createTransport failed to connect to &#123;127.0.0.1:2379 127.0.0.1:2379 &lt;nil&gt; 0 &lt;nil&gt;&#125;. <br>#     Err: connection error: desc = &quot;transport: authentication handshake failed: remote error: tls: bad certificate&quot;. Reconnecting...<br>[root@duduniao etcd]# mkdir ssl/ &amp;&amp; cd ssl<br>[root@duduniao ssl]# cat ca-config.json<br>&#123;<br>    &quot;signing&quot;: &#123;<br>        &quot;default&quot;: &#123;<br>            &quot;expiry&quot;: &quot;43800h&quot;<br>        &#125;,<br>        &quot;profiles&quot;: &#123;<br>            &quot;server&quot;: &#123;<br>                &quot;expiry&quot;: &quot;43800h&quot;,<br>                &quot;usages&quot;: [<br>                    &quot;signing&quot;,<br>                    &quot;key encipherment&quot;,<br>                    &quot;server auth&quot;,<br>                    &quot;client auth&quot;<br>                ]<br>            &#125;,<br>            &quot;client&quot;: &#123;<br>                &quot;expiry&quot;: &quot;43800h&quot;,<br>                &quot;usages&quot;: [<br>                    &quot;signing&quot;,<br>                    &quot;key encipherment&quot;,<br>                    &quot;client auth&quot;<br>                ]<br>            &#125;,<br>            &quot;peer&quot;: &#123;<br>                &quot;expiry&quot;: &quot;43800h&quot;,<br>                &quot;usages&quot;: [<br>                    &quot;signing&quot;,<br>                    &quot;key encipherment&quot;,<br>                    &quot;server auth&quot;,<br>                    &quot;client auth&quot;<br>                ]<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>[root@duduniao ssl]# cat ca-csr.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd-ca&quot;,<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;rsa&quot;,<br>        &quot;size&quot;: 2048<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;O&quot;: &quot;duduniao&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;,<br>            &quot;OU&quot;: &quot;devops&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# cfssl gencert -initca ca-csr.json | cfssljson -bare ca -<br>[root@duduniao ssl]# ll<br>total 20<br>-rw-r--r-- 1 root root  832 2021-10-17 15:23:33 ca-config.json<br>-rw-r--r-- 1 root root  274 2021-10-17 15:26:46 ca-csr.json<br>-rw------- 1 root root 1679 2021-10-17 15:27:08 ca-key.pem<br>-rw-r--r-- 1 root root 1013 2021-10-17 15:27:08 ca.csr<br>-rw-r--r-- 1 root root 1387 2021-10-17 15:27:08 ca.pem<br># 签发server证书， client验证server使用，同时server自检也需要<br>[root@duduniao ssl]# cat server.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd.duduniao.com&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;10.4.7.121&quot;,<br>        &quot;10.4.7.122&quot;,<br>        &quot;10.4.7.123&quot;,<br>        &quot;127.0.0.1&quot;,<br>        &quot;etcd-1&quot;,<br>        &quot;etcd-2&quot;,<br>        &quot;etcd-3&quot;,<br>        &quot;localhost&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;ecdsa&quot;,<br>        &quot;size&quot;: 256<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server server.json | cfssljson -bare server<br>[root@duduniao ssl]# ll server*<br>-rw------- 1 root root  227 2021-10-17 15:32:56 server-key.pem<br>-rw-r--r-- 1 root root  558 2021-10-17 15:32:56 server.csr<br>-rw-r--r-- 1 root root  391 2021-10-17 15:32:24 server.json<br>-rw-r--r-- 1 root root 1184 2021-10-17 15:32:56 server.pem<br># 签发peer证书，推荐每个节点一个, 以etcd-1为例，其它节点修改IP、域名和主机名<br>[root@duduniao ssl]# cat etcd-1.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd-1.duduniao.com&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;10.4.7.121&quot;,<br>        &quot;etcd-1&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;ecdsa&quot;,<br>        &quot;size&quot;: 256<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-1.json | cfssljson -bare etcd-1<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-2.json | cfssljson -bare etcd-2<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-3.json | cfssljson -bare etcd-3<br></code></pre></td></tr></table></figure><h3 id="2-3-2-部署etcd集群"><a href="#2-3-2-部署etcd集群" class="headerlink" title="2.3.2. 部署etcd集群"></a>2.3.2. 部署etcd集群</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 停止掉非加密的etcd集群，清理etcd数据<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl stop etcd&quot; <br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;rm -fr /data/etcd&quot;<br># 下发证书<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;mkdir -p /data/etcd/data /data/etcd/ssl&quot;<br>[root@duduniao etcd]# scan_host.sh push -h 10.4.7.121 10.4.7.122 10.4.7.123 ssl/ca.pem ssl/server.pem ssl/server-key.pem  /data/etcd/ssl/<br>[root@duduniao etcd]# scp ssl/etcd-1-key.pem ssl/etcd-1.pem 10.4.7.121:/data/etcd/ssl/<br>[root@duduniao etcd]# scp ssl/etcd-2-key.pem ssl/etcd-2.pem 10.4.7.122:/data/etcd/ssl/<br>[root@duduniao etcd]# scp ssl/etcd-3-key.pem ssl/etcd-3.pem 10.4.7.123:/data/etcd/ssl/<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;ls -l /data/etcd/ssl&quot;<br>10.4.7.122<br>total 20<br>-rw-r--r-- 1 root root 1387 Oct 17 07:53 ca.pem<br>-rw------- 1 root root  227 Oct 17 07:54 etcd-2-key.pem<br>-rw-r--r-- 1 root root 1147 Oct 17 07:54 etcd-2.pem<br>-rw------- 1 root root  227 Oct 17 07:53 server-key.pem<br>-rw-r--r-- 1 root root 1184 Oct 17 07:53 server.pem<br>10.4.7.121<br>total 20<br>-rw-r--r-- 1 root root 1387 Oct 17 07:53 ca.pem<br>-rw------- 1 root root  227 Oct 17 07:54 etcd-1-key.pem<br>-rw-r--r-- 1 root root 1147 Oct 17 07:54 etcd-1.pem<br>-rw------- 1 root root  227 Oct 17 07:53 server-key.pem<br>-rw-r--r-- 1 root root 1184 Oct 17 07:53 server.pem<br>10.4.7.123<br>total 20<br>-rw-r--r-- 1 root root 1387 Oct 17 07:53 ca.pem<br>-rw------- 1 root root  227 Oct 17 07:55 etcd-3-key.pem<br>-rw-r--r-- 1 root root 1147 Oct 17 07:55 etcd-3.pem<br>-rw------- 1 root root  227 Oct 17 07:53 server-key.pem<br>-rw-r--r-- 1 root root 1184 Oct 17 07:53 server.pem<br># 修改servcie文件<br># etcd-1.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-1 \<br>  --initial-advertise-peer-urls https://10.4.7.121:2380 \<br>  --listen-peer-urls https://10.4.7.121:2380 \<br>  --listen-client-urls https://10.4.7.121:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.121:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-1.pem \<br>  --peer-key-file ssl/etcd-1-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br># etcd-2.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-2 \<br>  --initial-advertise-peer-urls https://10.4.7.122:2380 \<br>  --listen-peer-urls https://10.4.7.122:2380 \<br>  --listen-client-urls https://10.4.7.122:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.122:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-2.pem \<br>  --peer-key-file ssl/etcd-2-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br># etcd-3.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>ExecStart=/usr/local/bin/etcd \<br>  --name etcd-3 \<br>  --initial-advertise-peer-urls https://10.4.7.123:2380 \<br>  --listen-peer-urls https://10.4.7.123:2380 \<br>  --listen-client-urls https://10.4.7.123:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.123:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.123:2380 \<br>  --initial-cluster-state new \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-3.pem \<br>  --peer-key-file ssl/etcd-3-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br># 启动集群<br>[root@duduniao etcd]# scp etcd-1.service 10.4.7.121:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-2.service 10.4.7.122:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-3.service 10.4.7.123:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl daemon-reload&quot;<br>10.4.7.122<br>10.4.7.123<br>10.4.7.121<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.123 &quot;systemctl restart etcd &amp;&amp; systemctl enable etcd&quot;<br></code></pre></td></tr></table></figure><h3 id="2-3-3-客户端验证"><a href="#2-3-3-客户端验证" class="headerlink" title="2.3.3. 客户端验证"></a>2.3.3. 客户端验证</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 不加证书<br>root@ubuntu-1804-122:~# etcdctl --endpoints=10.4.7.121:2379 member list --write-out=table<br>&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-17T10:26:16.722Z&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc000318380/10.4.7.121:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = latest balancer error: last connection error: connection closed&quot;&#125;<br>Error: context deadline exceeded<br><br># 加上证书<br>root@ubuntu-1804-122:~# cd /data/etcd/ssl/ &amp;&amp; etcdctl --cacert ca.pem --cert server.pem --key server-key.pem --endpoints https://10.4.7.121:2379 member list<br>4fe2b98ed7b794f7, started, etcd-3, https://10.4.7.123:2380, https://10.4.7.123:2379, false<br>bbd6739258f69625, started, etcd-1, https://10.4.7.121:2380, https://10.4.7.121:2379, false<br>c5542f3740ec56cd, started, etcd-2, https://10.4.7.122:2380, https://10.4.7.122:2379, false<br></code></pre></td></tr></table></figure><h2 id="2-4-etcd命令行"><a href="#2-4-etcd命令行" class="headerlink" title="2.4. etcd命令行"></a>2.4. etcd命令行</h2><h3 id="2-4-1-etcd"><a href="#2-4-1-etcd" class="headerlink" title="2.4.1. etcd"></a>2.4.1. etcd</h3><p>ectd 启动参数非常多，核心的启动参数有以下部分，其它请参考<a href="https://etcd.io/docs/v3.5/op-guide/configuration/">官方文档</a>。</p><ul><li>member flgas</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">-name 节点名称,用于组建集群，默认 default<br>-data-dir 数据存储目录，默认工作目录下 $&#123;name&#125;.etcd<br>-wal-dirwal日志目录，默认为data-dir<br>-snapshot-count触发snapshot的事务提交次数，默认值 100000<br>-listen-peer-urls集群节点中间对等网络监听URL，可以是http也可以是https, 0.0.0.0表示所有地址。默认 http://localhost:2380<br>-listen-peer-urls 用于暴露给客户端的URL地址，可以是http也可以是https, 0.0.0.0表示所有地址。默认 http://localhost:2379<br><br>–max-request-bytes客户端最大请求的字节数，默认1572864<br>-quota-backend-bytes后端配额大小，默认为2G.最大为8G，超过会导致数据无法写入<br></code></pre></td></tr></table></figure><ul><li>cluster flags</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">–initial-cluster引导并初始化一个新集群。仅在启动新的集群成员时生效，后续运行中会忽略该参数<br>–initial-advertise-peer-urls对外发布peer节点通信地址。仅在启动新的集群成员时生效，后续运行中会忽略该参数<br>-initial-cluster-state集群状态。new:表示所有节点都是第一次启动并组建集群;existing表示加入一个已存在的集群。仅在启动新的集群成员时生效，后续运行中会忽略该参数<br>-initial-cluster-token集群的token，所有节点启动时需要指定。默认为 etcd-cluster。仅在启动新的集群成员时生效，后续运行中会忽略该参数<br>-advertise-client-urls发布给其它成员，告知他们当前节点暴露给客户端的地址。默认为 http://localhost:2379<br></code></pre></td></tr></table></figure><ul><li>secirity flags</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">-trusted-ca-file# 服务端信任的CA证书，用来验证客户端是否合法<br>-cert-file# 服务端证书，由信任的CA签发，加密与客户端的通信，并且被客户端验证<br>-key-file# 服务端证书私钥<br>-client-cert-auth# 启用该参数表示服务端验证客户端证书是否为受信任的CA签发<br><br>–peer-trusted-ca-file# peer节点通信信任的CA证书，用来验证其它节点是否合法<br>-peer-cert-file# peer节点证书，由信任的CA签发，加密与客户端的通信，并且被其它节点验证<br>-peer-key-file# peer节点证书私钥<br>-peer-client-cert-auth# 启用该参数表示验证对端证书是否为受信任的CA签发<br></code></pre></td></tr></table></figure><ul><li>logging flags</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">-log-level指定日志级别，默认info.可选: debug, info, warn, error, panic, fatal<br></code></pre></td></tr></table></figure><h3 id="2-4-2-etcdctl"><a href="#2-4-2-etcdctl" class="headerlink" title="2.4.2. etcdctl"></a>2.4.2. etcdctl</h3><h4 id="2-4-2-1-常用参数"><a href="#2-4-2-1-常用参数" class="headerlink" title="2.4.2.1. 常用参数"></a>2.4.2.1. 常用参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">--endpoints指定服务端GRPC接口，默认 127.0.0.1:2379<br><br>--cacert指定ca证书，用来验证服务端是否合法<br>--cert指定客户端证书<br>--key指定客户端证书的私钥<br></code></pre></td></tr></table></figure><p>对于需要通过证书访问的场景，可以配置命令的别名，以下的案例均使用别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">alias etc=&#x27;etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379&#x27;<br></code></pre></td></tr></table></figure><h4 id="2-4-2-2-常用指令"><a href="#2-4-2-2-常用指令" class="headerlink" title="2.4.2.2. 常用指令"></a>2.4.2.2. 常用指令</h4><p>etcdctl 是etcd的客户端工具，通常用来查询集群和节点状态，偶尔用来查询指定key的值。</p><ol><li>指定API版本</li></ol><p>etcd的API有v2和v3，etcdctl 命令在3.4之前默认为v2，之后为v3。v2和v3版本的API数据不兼容，在查询的时候需要通过环境变量指定版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">export ETCDCTL_API=3  # 指定v3版本<br>export ETCDCTL_API=2# 指定v2版本<br></code></pre></td></tr></table></figure><ol><li>写入key</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc put key-1 value-1<br>[root@duduniao etcd]# etc put key-2 value-2<br>[root@duduniao etcd]# etc put key-3 value-3<br></code></pre></td></tr></table></figure><ol><li>查询key</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 精确查询<br>[root@duduniao etcd]# etc get key-1<br># 根据前缀查询<br>[root@duduniao etcd]# etc get --prefix key<br># 只显示value<br>[root@duduniao etcd]# etc get --prefix key --print-value-only<br># 现在查询结果的数量<br>[root@duduniao etcd]# etc get --prefix key --limit 2<br></code></pre></td></tr></table></figure><ol><li>watch key</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc watch key-1<br></code></pre></td></tr></table></figure><ol><li>删除key</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc del key-watch<br></code></pre></td></tr></table></figure><ol><li>查看集群状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc member list --write-out=table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>查看节点状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc endpoint status --write-out=table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.121:2379 | bbd6739258f69625 |   3.5.1 |   20 kB |      true |      false |         2 |         23 |                 23 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etc endpoint health --write-out=table<br>+-------------------------+--------+----------+-------+<br>|        ENDPOINT         | HEALTH |   TOOK   | ERROR |<br>+-------------------------+--------+----------+-------+<br>| https://10.4.7.121:2379 |   true | 6.6739ms |       |<br>+-------------------------+--------+----------+-------+<br></code></pre></td></tr></table></figure><h3>原文来自：运维渡渡鸟</h3>-----------------]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Etcd集群维护</title>
    <link href="/2025/03/19/Etcd%E9%9B%86%E7%BE%A4%E7%BB%B4%E6%8A%A4/"/>
    <url>/2025/03/19/Etcd%E9%9B%86%E7%BE%A4%E7%BB%B4%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="1-集群维护"><a href="#1-集群维护" class="headerlink" title="1. 集群维护"></a>1. 集群维护</h1><p>etcd启动参数中<code>--initial-advertise-peer-urls</code> <code>--initial-cluster</code> <code>--initial-cluster-state</code> <code>--initial-cluster-token</code>仅在创建新的member节点中使用，对于已经添加到集群中的节点而言是不生效的，因此在大部分情况，不需要修改现有etcd启动命令中的这几个参数的，同理这个参数也不能代表集群中节点的真实状态。集群的维护操作主要有以下几种：</p><ul><li>增加集群节点：比如从3个节点增加到5个节点，提升客户端读取性能</li><li>移除集群节点：比如从5个节点减少到3个节点，提升客户端写入性能</li><li>节点迁移维护：节点磁盘故障、节点配置升级、系统升级需要停服维护</li><li>集群灾难恢复：多数节点不可用，需要用旧数据重新建立集群</li><li>etcd版本升级：需要参考官方文档，确认各个版本区别，然后逐个升级</li><li>etcd证书替换：证书到期后更换证书</li></ul><h2 id="1-1-增加集群节点"><a href="#1-1-增加集群节点" class="headerlink" title="1.1. 增加集群节点"></a>1.1. 增加集群节点</h2><p>向当前集群添加 <code>etcd-4: https://10.4.7.123:2380</code>和 <code>etcd-5: https://10.4.7.125:2380</code>，操作步骤如下：</p><ol><li>确认当前集群成员信息，确保当前集群能正常对外提供服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etc member list --write-out=table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>签发新节点的证书</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 重新签发server证书，因为原来的server证书不包含etcd-4和etcd-5。<br># 从v3.2.0开始，每次客户端连接会自动加载server证书和peer证书，可以动态替换旧证书。<br>[root@duduniao ssl]# cat server.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd.duduniao.com&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;10.4.7.121&quot;,<br>        &quot;10.4.7.122&quot;,<br>        &quot;10.4.7.123&quot;,<br>        &quot;10.4.7.124&quot;,<br>        &quot;10.4.7.125&quot;,<br>        &quot;127.0.0.1&quot;,<br>        &quot;etcd-1&quot;,<br>        &quot;etcd-2&quot;,<br>        &quot;etcd-3&quot;,<br>        &quot;etcd-4&quot;,<br>        &quot;etcd-5&quot;,<br>        &quot;localhost&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;ecdsa&quot;,<br>        &quot;size&quot;: 256<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# rm -f server.csr server*.pem<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server server.json | cfssljson -bare server<br><br># 以 etcd-4为例，签发 peer 证书<br>[root@duduniao ssl]# cat etcd-4.json<br>&#123;<br>    &quot;CN&quot;: &quot;local-etcd-4.duduniao.com&quot;,<br>    &quot;hosts&quot;: [<br>        &quot;10.4.7.124&quot;,<br>        &quot;etcd-4&quot;<br>    ],<br>    &quot;key&quot;: &#123;<br>        &quot;algo&quot;: &quot;ecdsa&quot;,<br>        &quot;size&quot;: 256<br>    &#125;,<br>    &quot;names&quot;: [<br>        &#123;<br>            &quot;C&quot;: &quot;CN&quot;,<br>            &quot;L&quot;: &quot;Shanghai&quot;,<br>            &quot;ST&quot;: &quot;Shanghai&quot;<br>        &#125;<br>    ]<br>&#125;<br>[root@duduniao ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-4.json | cfssljson -bare etcd-4<br>[root@duduniao ssl]# ll etcd-4*.pem etcd-5*.pem<br>-rw------- 1 root root  227 2021-10-19 23:06:14 etcd-4-key.pem<br>-rw-r--r-- 1 root root 1147 2021-10-19 23:06:14 etcd-4.pem<br>-rw------- 1 root root  227 2021-10-19 23:06:26 etcd-5-key.pem<br>-rw-r--r-- 1 root root 1147 2021-10-19 23:06:26 etcd-5.pem<br><br># 下发etcd证书<br>[root@duduniao ssl]# ssh 10.4.7.124 &quot;mkdir -pv /data/etcd/&#123;ssl,data&#125;&quot;<br>mkdir: created directory &#x27;/data/etcd&#x27;<br>mkdir: created directory &#x27;/data/etcd/ssl&#x27;<br>mkdir: created directory &#x27;/data/etcd/data&#x27;<br>[root@duduniao ssl]# scp ca.pem etcd-4.pem etcd-4-key.pem 10.4.7.124:/data/etcd/ssl/<br># 同步所有节点的server证书，这里只是为了方便管理，旧节点可以不用替换。<br>[root@duduniao ssl]# for i in 10.4.7.12&#123;1..5&#125;;do echo $i ; scp server.pem server-key.pem $i:/data/etcd/ssl/ ;done<br></code></pre></td></tr></table></figure><ol><li>添加新节点</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member add etcd-4 --peer-urls https://10.4.7.124:2380<br>Member 79b3746506cf2fc1 added to cluster 23ce29301256c4ff<br><br>ETCD_NAME=&quot;etcd-4&quot;<br>ETCD_INITIAL_CLUSTER=&quot;etcd-3=https://10.4.7.123:2380,etcd-4=https://10.4.7.124:2380,etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380&quot;<br>ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.4.7.124:2380&quot;<br>ETCD_INITIAL_CLUSTER_STATE=&quot;existing&quot;<br><br>[root@duduniao etcd]# etc member list --write-out=table  # 当前状态是未启动<br>+------------------+-----------+--------+-------------------------+-------------------------+------------+<br>|        ID        |  STATUS   |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+-----------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 |   started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| 79b3746506cf2fc1 | unstarted |        | https://10.4.7.124:2380 |                         |      false |<br>| bbd6739258f69625 |   started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd |   started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+-----------+--------+-------------------------+-------------------------+------------+<br><br># 查看任意一台节点的etcd日志：<br>Oct 19 15:17:05 ubuntu-1804-121 etcd[23741]: &#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-19T15:17:05.569Z&quot;,&quot;caller&quot;:&quot;rafthttp/probing_status.go:68&quot;,&quot;msg&quot;:&quot;prober detected unhealthy status&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_RAFT_MESSAGE&quot;,&quot;remote-peer-id&quot;:&quot;79b3746506cf2fc1&quot;,&quot;rtt&quot;:&quot;0s&quot;,&quot;error&quot;:&quot;dial tcp 10.4.7.124:2380: connect: connection refused&quot;&#125;<br>Oct 19 15:17:05 ubuntu-1804-121 etcd[23741]: &#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-19T15:17:05.569Z&quot;,&quot;caller&quot;:&quot;rafthttp/probing_status.go:68&quot;,&quot;msg&quot;:&quot;prober detected unhealthy status&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_SNAPSHOT&quot;,&quot;remote-peer-id&quot;:&quot;79b3746506cf2fc1&quot;,&quot;rtt&quot;:&quot;0s&quot;,&quot;error&quot;:&quot;dial tcp 10.4.7.124:2380: connect: connection refused&quot;&#125;<br></code></pre></td></tr></table></figure><ol><li>启动新节点(etcd-4)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# cat etcd-4.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>Environment=ETCD_NAME=&quot;etcd-4&quot;<br>Environment=ETCD_INITIAL_CLUSTER=&quot;etcd-3=https://10.4.7.123:2380,etcd-4=https://10.4.7.124:2380,etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380&quot;<br>Environment=ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.4.7.124:2380&quot;<br>Environment=ETCD_INITIAL_CLUSTER_STATE=&quot;existing&quot;<br><br>ExecStart=/usr/local/bin/etcd \<br>  --listen-peer-urls https://10.4.7.124:2380 \<br>  --listen-client-urls https://10.4.7.124:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.124:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-4.pem \<br>  --peer-key-file ssl/etcd-4-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br><br>[root@duduniao etcd]# scp etcd-4.service 10.4.7.124:/lib/systemd/system/etcd.service<br>[root@duduniao etcd]# scp etcd-v3.5.1-linux-amd64/etcd* 10.4.7.124:/usr/local/bin/<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl start etcd&quot;<br><br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.124:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.124:2379 | 79b3746506cf2fc1 |   3.5.1 |   20 kB |     false |      false |         2 |         76 |                 76 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.124:2379 member list  --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| 79b3746506cf2fc1 | started | etcd-4 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>添加etcd-5</li></ol><p>重复操作步骤3和步骤4即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.125:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.125:2379 | d0756e0778ff59b4 |   3.5.1 |   20 kB |     false |      false |         2 |         78 |                 78 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.124:2379 member list  --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| 79b3746506cf2fc1 | started | etcd-4 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>| d0756e0778ff59b4 | started | etcd-5 | https://10.4.7.125:2380 | https://10.4.7.125:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><h2 id="1-2-移除集群节点"><a href="#1-2-移除集群节点" class="headerlink" title="1.2. 移除集群节点"></a>1.2. 移除集群节点</h2><p>当集群中，需要缩减集群规模，需要移除现有的节点。如从5节点缩减至3节点，操作方式如下：</p><ol><li>检查集群状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list  --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| 79b3746506cf2fc1 | started | etcd-4 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>| d0756e0778ff59b4 | started | etcd-5 | https://10.4.7.125:2380 | https://10.4.7.125:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>移除节点</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 移除etcd-5<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member remove d0756e0778ff59b4<br>Member d0756e0778ff59b4 removed from cluster 23ce29301256c4ff<br># 移除etcd-4<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member remove 79b3746506cf2fc1<br>Member 79b3746506cf2fc1 removed from cluster 23ce29301256c4ff<br><br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list  --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>停止移除节点上的etcd服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl stop etcd &amp;&amp; systemctl disable etcd&quot;<br>[root@duduniao etcd]# ssh 10.4.7.125 &quot;systemctl stop etcd &amp;&amp; systemctl disable etcd&quot;<br></code></pre></td></tr></table></figure><h2 id="1-3-节点迁移维护"><a href="#1-3-节点迁移维护" class="headerlink" title="1.3. 节点迁移维护"></a>1.3. 节点迁移维护</h2><p>如果只是当前节点升级配置、服务器重启等操作，直接停服后操作即可，无需特殊处理。针对节点数据磁盘故障、或者当前节点数据迁移到新的节点上的两种场景，有两种解决方案：</p><ul><li>按照1.2 方式移旧节点，再按照 1.1 方式新增节点，如果新旧节点IP不变，则不需要签发新的证书</li><li>如果数据较大(大于50MB)且旧节点数据未损坏，可用迁移节点方式</li></ul><p>这里针对需要进行数据迁移的场景进行演示，迁移etcd-3节点到 10.4.7.124：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.123:2380 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>模拟etcd-3故障</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">root@ubuntu-1804-123:~# systemctl stop etcd<br></code></pre></td></tr></table></figure><ol><li>迁移 10.4.7.123 上的etcd数据到 10.4.7.124</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.123 &quot;cd /data/etcd &amp;&amp; tar -zcf etcd-3.tar.gz data&quot;<br>[root@duduniao etcd]# scp 10.4.7.123 /data/etcd/etcd-3.tar.gz ./<br><br>[root@duduniao etcd]# scp etcd-3.tar.gz 10.4.7.124:/tmp/ <br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;rm -fr /data/etcd/data ; mkdir -pv /data/etcd/ssl ; tar -xf /tmp/etcd-3.tar.gz -C /data/etcd &amp;&amp; rm -f /tmp/etcd-3.tar.gz &amp;&amp; ls -l /data/etcd&quot;<br></code></pre></td></tr></table></figure><ol><li>生成 10.4.7.124 上的etcd server证书和peer证书</li></ol><p>参考 1.1 添加新节点中证书签发步骤，最终结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.124 &quot;ls -l /data/etcd/ssl&quot;<br>total 20<br>-rw-r--r-- 1 root root 1387 Oct 19 15:31 ca.pem<br>-rw------- 1 root root  227 Oct 19 15:31 etcd-3-key.pem<br>-rw-r--r-- 1 root root 1147 Oct 19 15:31 etcd-3.pem<br>-rw------- 1 root root  227 Oct 19 15:37 server-key.pem<br>-rw-r--r-- 1 root root 1245 Oct 19 15:37 server.pem<br></code></pre></td></tr></table></figure><ol><li>更新集群中的member成员信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member update 4fe2b98ed7b794f7 --peer-urls=&quot;https://10.4.7.124:2379&quot;<br>Member 4fe2b98ed7b794f7 updated in cluster 23ce29301256c4ff<br><br># client URL需要启动后etcd进程后才能更新<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.123:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br></code></pre></td></tr></table></figure><ol><li>启动新节点的 etcd 服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs plain"># /lib/systemd/system/etcd.service<br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/data/etcd<br>Environment=ETCD_NAME=&quot;etcd-3&quot;<br><br>ExecStart=/usr/local/bin/etcd \<br>  --listen-peer-urls https://10.4.7.124:2380 \<br>  --listen-client-urls https://10.4.7.124:2379,https://127.0.0.1:2379 \<br>  --advertise-client-urls https://10.4.7.124:2379 \<br>  --initial-cluster-token etcd-cluster-1 \<br>  --client-cert-auth \<br>  --cert-file ssl/server.pem \<br>  --key-file ssl/server-key.pem \<br>  --trusted-ca-file ssl/ca.pem \<br>  --peer-client-cert-auth \<br>  --peer-trusted-ca-file ssl/ca.pem \<br>  --peer-cert-file ssl/etcd-3.pem \<br>  --peer-key-file ssl/etcd-3-key.pem \<br>  --data-dir data \<br>  --snapshot-count 50000 \<br>  --auto-compaction-retention 1 \<br>  --auto-compaction-mode periodic \<br>  --max-request-bytes 10485760 \<br>  --quota-backend-bytes 8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl start etcd &amp;&amp; systemctl enable etcd&quot;<br><br># 此时集群中的etcd节点 client URL已经发生了变化<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br><br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.124:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.124:2379 | 4fe2b98ed7b794f7 |   3.5.1 |   20 kB |     false |      false |         2 |        135 |                135 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br></code></pre></td></tr></table></figure><h2 id="1-4-集群灾难恢复"><a href="#1-4-集群灾难恢复" class="headerlink" title="1.4. 集群灾难恢复"></a>1.4. 集群灾难恢复</h2><p>etcd集群选择leader时，是少数服从多数，因此不会出现脑裂问题。当集群中的大部分节点不可用时，集群无法对外提供正常的服务，此时需要尽快启动不可用节点，只要节点数据超过半数，集群状态会自动恢复：</p><ol><li>当少数节点不可用时</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br><br># 停止etcd-3模拟集群中少数节点故障<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl stop etcd&quot;<br># 节点状态正常<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 endpoint health --write-out table<br>+-------------------------+--------+----------+-------+<br>|        ENDPOINT         | HEALTH |   TOOK   | ERROR |<br>+-------------------------+--------+----------+-------+<br>| https://10.4.7.121:2379 |   true | 6.6047ms |       |<br>+-------------------------+--------+----------+-------+<br><br># 集群读写正常<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 put k1 v1<br>OK<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 get k1<br>k1<br>v1<br></code></pre></td></tr></table></figure><ol><li>模拟多数节点宕机</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.122 &quot;systemctl stop etcd&quot;<br><br># 节点状态异常，集群状态异常<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 endpoint health --write-out table<br>&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:1634910316.3861823,&quot;logger&quot;:&quot;client&quot;,&quot;caller&quot;:&quot;v3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc0004308c0/10.4.7.121:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = context deadline exceeded&quot;&#125;<br>+-------------------------+--------+-----------+---------------------------+<br>|        ENDPOINT         | HEALTH |   TOOK    |           ERROR           |<br>+-------------------------+--------+-----------+---------------------------+<br>| https://10.4.7.121:2379 |  false | 5.001016s | context deadline exceeded |<br>+-------------------------+--------+-----------+---------------------------+<br>Error: unhealthy cluster<br><br># 节点读写报错<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 put k1 v1<br>&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-22T21:46:29.288+0800&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc000622540/10.4.7.121:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = context deadline exceeded&quot;&#125;<br>Error: context deadline exceeded<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 get k1<br>&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-22T21:46:13.352+0800&quot;,&quot;logger&quot;:&quot;etcd-client&quot;,&quot;caller&quot;:&quot;v3/retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;etcd-endpoints://0xc0004348c0/10.4.7.121:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = context deadline exceeded&quot;&#125;<br>Error: context deadline exceeded<br></code></pre></td></tr></table></figure><ol><li>模拟多数节点顺利启动</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl start etcd&quot;<br><br># 集群状态和节点状态正常<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 endpoint health --write-out table<br>+-------------------------+--------+----------+-------+<br>|        ENDPOINT         | HEALTH |   TOOK   | ERROR |<br>+-------------------------+--------+----------+-------+<br>| https://10.4.7.121:2379 |   true | 6.8057ms |       |<br>+-------------------------+--------+----------+-------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 4fe2b98ed7b794f7 | started | etcd-3 | https://10.4.7.124:2379 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 put k1 v1<br>OK<br></code></pre></td></tr></table></figure><p>考虑到一种极端情况，当大部分节点无法启动etcd，需要从快照或者历史备份中恢复数据，并组建一个新的集群：</p><ol><li>停止大部分节点，使得集群无法对外提供服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.122 &quot;systemctl stop etcd&quot;<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl stop etcd&quot;<br></code></pre></td></tr></table></figure><ol><li>从可用节点生成V3的快照，如果全部节点不可用则从etcd的数据目录下找到<code>member/snap/db</code>进行恢复，或者从历史备份恢复</li></ol><p>v2版本的恢复方式和v3不太一样，可参考<a href="https://etcd.io/docs/v2.3/admin_guide#disaster-recovery">官方文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ETCDCTL_API=3 etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 snapshot save snapshot.db<br>[root@duduniao etcd]# ll -h snapshot.db<br>-rw------- 1 root root 21K 2021-10-22 22:08:43 snapshot.d<br></code></pre></td></tr></table></figure><ol><li>停止节点上etcd进程，清理历史数据目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# ssh 10.4.7.121 &quot;systemctl stop etcd ; mv /data/etcd/data /data/etcd/data.20211022.bak&quot;<br>[root@duduniao etcd]# ssh 10.4.7.122 &quot;systemctl stop etcd ; mv /data/etcd/data /data/etcd/data.20211022.bak&quot;<br>[root@duduniao etcd]# ssh 10.4.7.124 &quot;systemctl stop etcd ; mv /data/etcd/data /data/etcd/data.20211022.bak&quot;<br><br>[root@duduniao etcd]# scp snapshot.db 10.4.7.121:/tmp/<br>[root@duduniao etcd]# scp snapshot.db 10.4.7.122:/tmp/<br>[root@duduniao etcd]# scp snapshot.db 10.4.7.124:/tmp/<br></code></pre></td></tr></table></figure><ol><li>重建集群</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">root@ubuntu-1804-121:~# ETCDCTL_API=3 etcdctl snapshot restore /tmp/snapshot.db --data-dir /data/etcd/data --initial-advertise-peer-urls https://10.4.7.121:2380 --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.124:2380 --initial-cluster-token etcd-cluster-1 --name etcd-1<br>root@ubuntu-1804-122:~# ETCDCTL_API=3 etcdctl snapshot restore /tmp/snapshot.db --data-dir /data/etcd/data --initial-advertise-peer-urls https://10.4.7.122:2380 --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.124:2380 --initial-cluster-token etcd-cluster-1 --name etcd-2<br>root@ubuntu-1804-124:~# ETCDCTL_API=3 etcdctl snapshot restore /tmp/snapshot.db --data-dir /data/etcd/data --initial-advertise-peer-urls https://10.4.7.124:2380 --initial-cluster etcd-1=https://10.4.7.121:2380,etcd-2=https://10.4.7.122:2380,etcd-3=https://10.4.7.124:2380 --initial-cluster-token etcd-cluster-1 --name etcd-3<br><br>root@ubuntu-1804-121:~# systemctl start etcd<br>root@ubuntu-1804-122:~# systemctl start etcd<br>root@ubuntu-1804-124:~# systemctl start etcd<br># 验证集群<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 8bb2a873a59fd89b | started | etcd-3 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>[root@duduniao etcd]# etcdctl --cacert ssl/ca.pem --cert ssl/client.pem --key ssl/client-key.pem --endpoints https://10.4.7.121:2379 get k1<br>k1<br>v1<br></code></pre></td></tr></table></figure><h2 id="1-5-etcd版本升级"><a href="#1-5-etcd版本升级" class="headerlink" title="1.5. etcd版本升级"></a>1.5. etcd版本升级</h2><p>后续推出新版本升级了再补充</p><h2 id="1-6-etcd证书替换"><a href="#1-6-etcd证书替换" class="headerlink" title="1.6. etcd证书替换"></a>1.6. etcd证书替换</h2><p>etcd的证书替换分为四种类型：</p><ol><li>server 证书更换：从v3.2.0开始，每个请求会重载证书，因此证书替换会变得非常方便</li><li>peer 证书更换：从v3.2.0开始，每个请求会重载证书，因此证书替换会变得非常方便</li><li>ca 证书更换: ca证书的替换会变得比较麻烦，需要停服维护，做好前期准备工作，停服时间在1分钟以内</li></ol><p>上述的第一和第二种情况很容易处理，签发证书直接下发即可，老版本的etcd可用逐个重启服务。以下针对第三种情况进行操作：</p><ol><li><p>生成新的证书</p></li><li><p>下发证书，并重启etcd</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plain">[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;cp -r /data/etcd/ssl /data/etcd/ssl-20211021.bak&quot;<br>[root@duduniao ssl-new]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;mkdir /data/etcd/ssl-new&quot;<br>[root@duduniao ssl-new]# scp ca.pem server.pem server-key.pem etcd-1.pem etcd-1-key.pem 10.4.7.121:/data/etcd/ssl-new/<br>[root@duduniao ssl-new]# scp ca.pem server.pem server-key.pem etcd-2.pem etcd-2-key.pem 10.4.7.122:/data/etcd/ssl-new/<br>[root@duduniao ssl-new]# scp ca.pem server.pem server-key.pem etcd-3.pem etcd-3-key.pem 10.4.7.124:/data/etcd/ssl-new/<br><br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;systemctl stop etcd &quot;<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;rm -fr /data/etcd/ssl ; mv /data/etcd/ssl-new /data/etcd/ssl&quot;<br>[root@duduniao etcd]# scan_host.sh cmd -h 10.4.7.121 10.4.7.122 10.4.7.124 &quot;systemctl start etcd &quot;<br>[root@duduniao etcd]# etcdctl --cacert ssl-new/ca.pem --cert ssl-new/client.pem --key ssl-new/client-key.pem --endpoints https://10.4.7.121:2379 member list --write-out table<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>|        ID        | STATUS  |  NAME  |       PEER ADDRS        |      CLIENT ADDRS       | IS LEARNER |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>| 8bb2a873a59fd89b | started | etcd-3 | https://10.4.7.124:2380 | https://10.4.7.124:2379 |      false |<br>| bbd6739258f69625 | started | etcd-1 | https://10.4.7.121:2380 | https://10.4.7.121:2379 |      false |<br>| c5542f3740ec56cd | started | etcd-2 | https://10.4.7.122:2380 | https://10.4.7.122:2379 |      false |<br>+------------------+---------+--------+-------------------------+-------------------------+------------+<br>[root@duduniao etcd]# etcdctl --cacert ssl-new/ca.pem --cert ssl-new/client.pem --key ssl-new/client-key.pem --endpoints https://10.4.7.121:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.121:2379 | bbd6739258f69625 |   3.5.1 |   20 kB |     false |      false |         7 |         37 |                 37 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etcdctl --cacert ssl-new/ca.pem --cert ssl-new/client.pem --key ssl-new/client-key.pem --endpoints https://10.4.7.122:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.122:2379 | c5542f3740ec56cd |   3.5.1 |   20 kB |     false |      false |         7 |         37 |                 37 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@duduniao etcd]# etcdctl --cacert ssl-new/ca.pem --cert ssl-new/client.pem --key ssl-new/client-key.pem --endpoints https://10.4.7.124:2379 endpoint status --write-out table<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://10.4.7.124:2379 | 8bb2a873a59fd89b |   3.5.1 |   20 kB |      true |      false |         7 |         37 |                 37 |        |<br>+-------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br></code></pre></td></tr></table></figure><hr><h1 id="2-备份和恢复"><a href="#2-备份和恢复" class="headerlink" title="2. 备份和恢复"></a>2. 备份和恢复</h1><p>大部分etcd集群的数据都是很小的，可以考虑每个小时备份一次，只需要从一个节点进行备份即可，不需要每个节点都进行备份。数据恢复是指通过现有的快照数据，重新建立集群，备份和恢复的方式可以参考 1.4. 集群灾难恢复。</p><h3>原文来自：运维渡渡鸟</h3>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins基于k8s容器化构建Pipline</title>
    <link href="/2025/03/19/Jenkins%E5%9F%BA%E4%BA%8Ek8s%E5%AE%B9%E5%99%A8%E5%8C%96%E6%9E%84%E5%BB%BAPipline/"/>
    <url>/2025/03/19/Jenkins%E5%9F%BA%E4%BA%8Ek8s%E5%AE%B9%E5%99%A8%E5%8C%96%E6%9E%84%E5%BB%BAPipline/</url>
    
    <content type="html"><![CDATA[<p>jenkins使用kubernetes插件可以实现，动态创建流水线相关的任务Pod在流水线执行结束后会删除相应的任务Pod以达到资源的释放。</p><p><strong>具体kubernetes的agent使用详解</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span> <br>      cloud &#x27;kubernetes&#x27;  <span class="hljs-comment">//这里需要指定相关jenkins中创建的kubernetes对接信息的名称</span><br>      slaveConnectTimeout <span class="hljs-number">1200</span>  <span class="hljs-comment">//超时配置</span><br>      workspaceVolume emptyDirWorkspaceVolume()  <span class="hljs-comment">//jenkins的工作目录，必须设置起到一个Pod中不同container的目录共享jenkins工作目录</span><br>      yaml &#x27;&#x27;&#x27;  <span class="hljs-comment">//这里以下都是Pod定义信息</span><br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span> <br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp        <span class="hljs-comment">//jnlp容器是必须的他负责连接jenkins，这里保持默认使用即可</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br><span class="hljs-comment">//以下容器为具体的工作容器，所有流水线中的任何阶段的任务都在容器中执行，可以定义多个在流水线中指定任务使用那个容器进行执行</span><br>  - command<span class="hljs-punctuation">:</span>   <span class="hljs-comment">//所有容器推荐使用cat命令保证容器在启动后保持运行不退出   </span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//保持tty，起到容器不退出</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/bash/alpine:latest&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo&quot;</span>  <span class="hljs-comment">//container的名称</span><br>  restartPolicy<span class="hljs-punctuation">:</span> Never<br><span class="hljs-comment">// 在k8s上的节点上打上label，这里的nodeselector就是选择打了对应标签的node</span><br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//这里为流水线定义</span><br>    stage(&#x27;echo&#x27;) <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">//stage名称</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;echo&#x27;) <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">//这里定义这个步骤使用那个container进行执行，指定container的名称</span><br>          sh <span class="hljs-string">&quot;echo hello word&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="1-1-相关镜像准备"><a href="#1-1-相关镜像准备" class="headerlink" title="1.1 相关镜像准备"></a>1.1 相关镜像准备</h2><p>有些镜像需自己准备，如docker镜像用于构建docker镜像，kubectl镜像用于连接k8s进行服务更新。其余镜像使用官方镜像即可，但是前提是必须要有一个jnlp的镜像，用于连接jenkins的master。</p><h3 id="1-docker镜像"><a href="#1-docker镜像" class="headerlink" title="1.docker镜像"></a>1.docker镜像</h3><p><strong>镜像构建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#直接使用alpine镜像拷贝docker二进制执行文件到容器即可</span><br>[17:38:58 root@nexus docker]#<span class="hljs-built_in">cat</span> Dockerfile <br>FROM 192.168.10.254:5000/bash/alpine:latest<br>COPY docker /usr/bin/<br><span class="hljs-comment">#构建</span><br>docker build -t 192.168.10.254:5000/kubernetes/docker:alpine .<br></code></pre></td></tr></table></figure><p><strong>jenkins中验证</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span> <br>      cloud &#x27;kubernetes&#x27;  <br>      slaveConnectTimeout <span class="hljs-number">1200</span> <br>      workspaceVolume emptyDirWorkspaceVolume()   <span class="hljs-comment">//  相当于k8s卷当中的emptdir()</span><br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span> <br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp  <br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.15/kubernetes/docker:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-comment">// 将本地的docker.sock映射到容器当中，容器当中就能使用docker相关的命令，相当于是操作宿主机本地的docker，构建好的镜像也是本地的。</span><br>    volumeMounts<span class="hljs-punctuation">:</span><br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>      name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>      readOnly<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  volumes<span class="hljs-punctuation">:</span>   <br>  #注意docker容器必须被调度到存在docker的k8s节点，并且挂载主机的docker.sock文件到容器<br>  - hostPath<span class="hljs-punctuation">:</span><br>      path<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>  restartPolicy<span class="hljs-punctuation">:</span> Never <br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    stage(&#x27;docker info&#x27;) <span class="hljs-punctuation">&#123;</span>   <br>      steps <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 使用k8s 当中的docker 镜像容器进行操作</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;docker&#x27;) <span class="hljs-punctuation">&#123;</span>  <br>          sh <span class="hljs-string">&quot;docker info&quot;</span>    <span class="hljs-comment">//执行docker info有正常输出即可</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-kubectl镜像"><a href="#2-kubectl镜像" class="headerlink" title="2.kubectl镜像"></a>2.kubectl镜像</h3><p><strong>镜像构建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[17:46:21 root@nexus kubectl]#<span class="hljs-built_in">cat</span> Dockerfile <br>FROM 192.168.10.254:5000/bash/alpine:latest<br><span class="hljs-comment"># 这里复制的是一个kubelet的二进制文件，配合kubeconfig进行使用</span><br>COPY kubectl /usr/bin/<br><span class="hljs-comment">#构建</span><br>[17:46:01 root@nexus kubectl]#docker build -t 192.168.10.254:5000/kubernetes/kubectl:alpine .<br></code></pre></td></tr></table></figure><p><strong>使用验证</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span> <br>      cloud &#x27;kubernetes&#x27;  <span class="hljs-comment">//这里需要指定相关jenkins中创建的kubernetes对接信息的名称</span><br>      slaveConnectTimeout <span class="hljs-number">1200</span>  <span class="hljs-comment">//超时配置</span><br>      workspaceVolume emptyDirWorkspaceVolume()  <span class="hljs-comment">//jenkins的工作目录，必须设置起到一个Pod中不同container的目录共享jenkins工作目录</span><br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span> <br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp  <br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  restartPolicy<span class="hljs-punctuation">:</span> Never <br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//这里为流水线定义</span><br>    stage(&#x27;kubectl get&#x27;) <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">//stage名称</span><br>      <span class="hljs-comment">// 使用credentials加载kubeconfig配置文件</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;) <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">//这里定义这个步骤使用那个container进行执行，指定container的名称</span><br>          sh <span class="hljs-string">&quot;kubectl get pod -A --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="二、自动化构建-Java-应用"><a href="#二、自动化构建-Java-应用" class="headerlink" title="二、自动化构建 Java 应用"></a>二、自动化构建 Java 应用</h1><h2 id="1-流水线结构"><a href="#1-流水线结构" class="headerlink" title="1.流水线结构"></a>1.流水线结构</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/460127944.png" alt="48616-wxdhj40oko.png"><br>注意这里的Jenkinsfile与Dockerfile文件都存放在git仓库中。java应用会使用mvn进行打包，mvn会下载一系列依赖的包，默认会下载到mvn容器的**&#x2F;root&#x2F;.m2**目录最好使用volume进行持久化。</p><h2 id="2-需要克隆开源代码到自己gitlab仓库"><a href="#2-需要克隆开源代码到自己gitlab仓库" class="headerlink" title="2.需要克隆开源代码到自己gitlab仓库"></a>2.需要克隆开源代码到自己gitlab仓库</h2><p>仓库地址：<a href="https://github.com/AdlerED/bolo-solo">https://github.com/AdlerED/bolo-solo</a><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3433033418.png" alt="68302-21ztfgmuost.png"></p><h2 id="3-Jenkinsfile文件"><a href="#3-Jenkinsfile文件" class="headerlink" title="3.Jenkinsfile文件"></a>3.Jenkinsfile文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//顶层环境变量设置</span><br>  environment <span class="hljs-punctuation">&#123;</span><br>    namespace = <span class="hljs-string">&quot;bolo&quot;</span>                     <span class="hljs-comment">//服务部署在那个namespace中</span><br>    registries = <span class="hljs-string">&quot;192.168.10.15/bolo&quot;</span>      <span class="hljs-comment">//生成镜像存放镜像的仓库地址</span><br>    GIT = <span class="hljs-string">&quot;git@192.168.10.14:kubernetes/bolo-solo.git&quot;</span>  <span class="hljs-comment">//代码仓库地址</span><br>    TAG = <span class="hljs-string">&quot;&quot;</span>                               <span class="hljs-comment">//镜像tag,会在下面生成,这里只是定义全局变量</span><br>    NANE = <span class="hljs-string">&quot;&quot;</span>                              <span class="hljs-comment">//jenkins项目名称,会在下面生成,这里只是定义全局变量</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//全局配置</span><br>  options <span class="hljs-punctuation">&#123;</span><br>    timestamps()                     <span class="hljs-comment">//所有输出每行都会打印时间戳</span><br>    buildDiscarder(logRotator(numToKeepStr<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">5</span>&#x27;))  <span class="hljs-comment">//保留5个历史构建版本</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//手动构建时选择分支参数</span><br>  parameters <span class="hljs-punctuation">&#123;</span> <br>    gitParameter(branch<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> branchFilter<span class="hljs-punctuation">:</span> &#x27;origin/(.*)&#x27;<span class="hljs-punctuation">,</span> defaultValue<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> description<span class="hljs-punctuation">:</span> &#x27;Branch for build and deploy&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;BRANCH&#x27;<span class="hljs-punctuation">,</span> quickFilterEnabled<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> selectedValue<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span> sortMode<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span>  tagFilter<span class="hljs-punctuation">:</span> &#x27;*&#x27;<span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> &#x27;PT_BRANCH&#x27;)<br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//agent配置</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span><br>      cloud &#x27;kubernetes&#x27;<br>      slaveConnectTimeout <span class="hljs-number">1200</span><br>      workspaceVolume emptyDirWorkspaceVolume()   <span class="hljs-comment">//这里使用临时目录共享jenkins的工作目录默认路径为/home/jenkins/agent</span><br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span><br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.254</span><span class="hljs-punctuation">:</span><span class="hljs-number">5000</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp    #这个容器必须有，保持默认即可<br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/maven:3.8.5-openjdk-8-slim&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maven&quot;</span>  #maven打包镜像<br>    volumeMounts<span class="hljs-punctuation">:</span>  #持久化依赖包，重复构建不会进行重复下载 <br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/root/.m2&quot;</span>  <br>      name<span class="hljs-punctuation">:</span> mvn-data<br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/docker:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span>  #docker容器需要挂载docker.sock文件，需要调度到有docker的node节点<br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    volumeMounts<span class="hljs-punctuation">:</span><br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>      name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>      readOnly<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:apline&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span>  #kubectl镜像<br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  volumes<span class="hljs-punctuation">:</span>          <br>  - name<span class="hljs-punctuation">:</span> mvn-data<br>    # 绑定已有的pvc用于加速maven的文件下载，相当于是maven的缓存<br>    persistentVolumeClaim<span class="hljs-punctuation">:</span>  <br>      claimName<span class="hljs-punctuation">:</span> mvn <br>  - hostPath<span class="hljs-punctuation">:</span><br>      path<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span>  <br>  restartPolicy<span class="hljs-punctuation">:</span> Never<br>  nodeSelector<span class="hljs-punctuation">:</span>   #这里需要给有docker的node节点打标签调度Pod到这个节点<br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//克隆代码</span><br>    stage(&#x27;git clone&#x27;) <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">//并行执行</span><br>      failFast <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//并行执行的分支只要有一个失败立即结束流水线</span><br>      parallel <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//手动执行jenkins流水线</span><br>        stage(&#x27;git clone by Jenkins&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>             <span class="hljs-comment">// when表达式，当中环境变量当中的gitbranch为null的时候执行下面的steps</span><br>              env.gitlabBranch == <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-comment">// 在parameters 当中指定了对应的branch，使用gitlab-key的拉取凭证。</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;BRANCH&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// returnStdout 返回标准输出，也就是执行结果 echo -n 表示不换行</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;BRANCH&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//gitlab触发构建</span><br>        stage(&#x27;git clone trigger&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-comment">// 如果在构建的时候给定了branch的构建参数</span><br>              env.gitlabBranch != <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;env.gitlabBranch&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.gitlabBranch&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//初始化项目名称，项目名称用于docker镜像名称,不能有大写字母,转义</span><br>        stage(&#x27;init env&#x27;) <span class="hljs-punctuation">&#123;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// 对编译的job名称进行小写</span><br>              NAME = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.JOB_NAME&#125;&quot;</span>).toLowerCase()<br>            <span class="hljs-punctuation">&#125;</span><br>            sh <span class="hljs-string">&quot;echo $&#123;NAME&#125;&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-comment">//打包java程序</span><br>    stage(&#x27;mvn build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;maven&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;mvn package -DskipTests -Pci&quot;</span><br>          sh <span class="hljs-string">&quot;ls -l&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-comment">//构建镜像并且推送镜像仓库</span><br>    stage(&#x27;docker build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        HARBOR_USER = credentials(&#x27;harbor-account&#x27;)  <span class="hljs-comment">//获取镜像仓库认证信息</span><br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 本步是使用了上面agent当中初始化好的docker镜像</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;docker&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;docker login -u $&#123;HARBOR_USER_USR&#125; -p $&#123;HARBOR_USER_PSW&#125; $&#123;registries&#125;&quot;</span><br>            <span class="hljs-comment">// 这里的build 要基于下面的dockerfile进行构建</span><br>          sh <span class="hljs-string">&quot;docker build -t $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; .&quot;</span><br>          sh <span class="hljs-string">&quot;docker push $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-comment">//更新k8s相关应用</span><br>    stage(&#x27;update deploy&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 加载kubeconfig到环境变量当中</span><br>        MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;) <span class="hljs-punctuation">&#123;</span><br>           <span class="hljs-comment">// 这里的部署是使用deploy先部署好的，然后进行镜像更新，实现自动构建部署，deploy 文件内容在下面</span><br>          sh <span class="hljs-string">&quot;kubectl get deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          <span class="hljs-comment">// 指定使用新的镜像进行更新</span><br>          sh <span class="hljs-string">&quot;kubectl set image deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; $&#123;NAME&#125;=$&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>           <span class="hljs-comment">// 重新启动deployment，让deploy控制器控制的pod加载新打包的镜像。</span><br>          sh <span class="hljs-string">&quot;kubectl rollout status deployment -n $&#123;namespace&#125; $&#123;NAME&#125; --timeout=60s --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-Dockerfile文件"><a href="#4-Dockerfile文件" class="headerlink" title="4.Dockerfile文件"></a>4.Dockerfile文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM 192.168.10.254:5000/kubernetes/openjdk:8-alpine<br>WORKDIR /opt/bolo/<br>COPY target/bolo /opt/bolo<br>COPY src/main/resources/docker /opt/bolo/WEB-INF/classes/<br>ENV TZ=Asia/Shanghai<br>EXPOSE 8080<br>ENTRYPOINT [ <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-cp&quot;</span>, <span class="hljs-string">&quot;WEB-INF/lib/*:WEB-INF/classes&quot;</span>, <span class="hljs-string">&quot;org.b3log.solo.Starter&quot;</span> ]<br></code></pre></td></tr></table></figure><h2 id="5-创建流水线"><a href="#5-创建流水线" class="headerlink" title="5.创建流水线"></a>5.创建流水线</h2><p><strong>创建流水线</strong><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3840925103.png" alt="35816-khesyz80aa.png"><br>进行配置<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/1296180031.png" alt="05790-0xcztgh1phkq.png"><br><strong>第一次需进行构建读取jenkinsfile文件，会报错</strong></p><h2 id="6-部署应用进行测试"><a href="#6-部署应用进行测试" class="headerlink" title="6.部署应用进行测试"></a>6.部署应用进行测试</h2><p><strong>部署相关应用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: apps/v1 <br>kind: Deployment    <br>metadata:           <br>  name: bolo      <br>  namespace: bolo<br>  labels:<br>    image: bolo   <span class="hljs-comment">#jenkinsfile中更新我使用lable进行筛选，这里必须设置</span><br>spec:              <br>  replicas: 1  <br>  selector:<br>    matchLabels:     <br>      app: bolo   <br>  template:          <br>    metadata:<br>      creationTimestamp: null<br>      labels:<br>        app: bolo<br>    spec:<br>      containers:<br>      - name: bolo<br>        image: 192.168.10.15/bolo/bolo:jenkins-bolo-23 <br>        args:<br>        - --listen_port=8080 <br>        - --server_scheme=http <br>        - --server_host=192.168.10.13<br>        ports:  <br>        - name: http    <br>          containerPort: 8080    <br>          protocol: TCP <br>        <span class="hljs-built_in">env</span>:    <span class="hljs-comment">#这里如果要正常使用需部署mysql数据库</span><br>        - name: RUNTIME_DB     <br>          value: <span class="hljs-string">&quot;MYSQL&quot;</span><br>        - name: JDBC_DRIVER<br>          value: <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><br>        - name: JDBC_URL<br>          value: <span class="hljs-string">&quot;jdbc:mysql://mysql:3306/bolo?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true&quot;</span><br>        - name: JDBC_USERNAME<br>          value: <span class="hljs-string">&quot;bolo&quot;</span><br>        - name: JDBC_PASSWORD<br>          value: <span class="hljs-string">&quot;123456&quot;</span><br>---<br>apiVersion: v1     <br>kind: Service      <br>metadata:          <br>  name: bolo    <br>  namespace: bolo  <br>spec:              <br>  ports:           <br>  - name: mysql   <br>    port: 8080      <br>    protocol: TCP  <br>    targetPort: http <br>  selector:        <br>    app: bolo   <br>  <span class="hljs-built_in">type</span>: ClusterIP<br></code></pre></td></tr></table></figure><p><strong>测试手动执行流水线</strong><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3212630026.png" alt="05602-zftwmqilwed.png"></p><h1 id="三、自动化构建-Vue-H5-前端应用"><a href="#三、自动化构建-Vue-H5-前端应用" class="headerlink" title="三、自动化构建 Vue&#x2F;H5 前端应用"></a>三、自动化构建 Vue&#x2F;H5 前端应用</h1><h2 id="1-流水线结构-1"><a href="#1-流水线结构-1" class="headerlink" title="1.流水线结构"></a>1.流水线结构</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/2097081703.png" alt="42342-e9ltpyddna5.png"><br>注意这里的Jenkinsfile与Dockerfile文件都存放在git仓库中。Vue应用会使用npm进行打包，npm会下载一系列依赖的包，默认会下载到npm容器的运行npm的目录<strong>node_modules</strong>中所以为了重复构建不进行重复下载需要持久化，这里推荐直接持久化jenkins工作目录即可。</p><h2 id="2-需要克隆开源代码到自己gitlab仓库-1"><a href="#2-需要克隆开源代码到自己gitlab仓库-1" class="headerlink" title="2.需要克隆开源代码到自己gitlab仓库"></a>2.需要克隆开源代码到自己gitlab仓库</h2><p>源码仓库：<a href="https://github.com/SD-Gaming/Vue3-Todo-List-AddName">https://github.com/SD-Gaming/Vue3-Todo-List-AddName</a></p><h2 id="3-Jenkinsfile文件-1"><a href="#3-Jenkinsfile文件-1" class="headerlink" title="3.Jenkinsfile文件"></a>3.Jenkinsfile文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//顶层环境变量设置</span><br>  environment <span class="hljs-punctuation">&#123;</span><br>    namespace = <span class="hljs-string">&quot;bolo&quot;</span>                      <span class="hljs-comment">//服务部署在那个namespace中</span><br>    registries = <span class="hljs-string">&quot;192.168.10.15/vue&quot;</span>        <span class="hljs-comment">//镜像仓库地址</span><br>    GIT = <span class="hljs-string">&quot;git@192.168.10.14:root/Vue3-Todo-List-AddName.git&quot;</span>  <span class="hljs-comment">//代码仓库地址</span><br>    TAG = <span class="hljs-string">&quot;&quot;</span>                               <span class="hljs-comment">//镜像tag,会在下面生成,这里只是定义全局变量</span><br>    NANE = <span class="hljs-string">&quot;&quot;</span>                              <span class="hljs-comment">//jenkins项目名称,会在下面生成,这里只是定义全局变量</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//全局配置</span><br>  options <span class="hljs-punctuation">&#123;</span><br>    timestamps()                     <span class="hljs-comment">//所有输出每行都会打印时间戳</span><br>    buildDiscarder(logRotator(numToKeepStr<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">5</span>&#x27;))  <span class="hljs-comment">//保留5个历史构建版本</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//手动构建时选择分支参数</span><br>  parameters <span class="hljs-punctuation">&#123;</span> <br>    gitParameter(branch<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> branchFilter<span class="hljs-punctuation">:</span> &#x27;origin/(.*)&#x27;<span class="hljs-punctuation">,</span> defaultValue<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> description<span class="hljs-punctuation">:</span> &#x27;Branch for build and deploy&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;BRANCH&#x27;<span class="hljs-punctuation">,</span> quickFilterEnabled<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> selectedValue<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span> sortMode<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span>  tagFilter<span class="hljs-punctuation">:</span> &#x27;*&#x27;<span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> &#x27;PT_BRANCH&#x27;)<br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//agent配置</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span><br>      cloud &#x27;kubernetes&#x27;<br>      slaveConnectTimeout <span class="hljs-number">1200</span><br>      workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm-data&quot;</span><span class="hljs-punctuation">,</span> mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><span class="hljs-punctuation">,</span> readOnly<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span>)<br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span><br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.254</span><span class="hljs-punctuation">:</span><span class="hljs-number">5000</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp<br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/node:latest&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodejs&quot;</span> <br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/docker:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    volumeMounts<span class="hljs-punctuation">:</span><br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>      name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>      readOnly<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:apline&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  volumes<span class="hljs-punctuation">:</span>          <br>  - hostPath<span class="hljs-punctuation">:</span><br>      path<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span>  <br>  restartPolicy<span class="hljs-punctuation">:</span> Never<br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//克隆代码</span><br>    stage(&#x27;git clone&#x27;) <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">//并行执行</span><br>      failFast <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//并行执行的分支只要有一个失败立即结束流水线</span><br>      parallel <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//手动执行jenkins流水线</span><br>        stage(&#x27;git clone by Jenkins&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">//  手动构建的时候，在环境变量当中，branch为空，所以就走手动构建的部分</span><br>              env.gitlabBranch == <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;BRANCH&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-comment">// 标准输出构建tag信息</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;BRANCH&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//gitlab触发构建</span><br>        stage(&#x27;git clone trigger&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>              env.gitlabBranch != <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;env.gitlabBranch&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.gitlabBranch&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//初始化项目名称，项目名称用于docker镜像名称,不能有大写字母,转义</span><br>        stage(&#x27;init env&#x27;) <span class="hljs-punctuation">&#123;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              NAME = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.JOB_NAME&#125;&quot;</span>).toLowerCase()<br>            <span class="hljs-punctuation">&#125;</span><br>            sh <span class="hljs-string">&quot;echo $&#123;NAME&#125;&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;npm build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 在nodejs 容器内</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;nodejs&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;npm install --registry=https://registry.npm.taobao.org&quot;</span><br>          sh <span class="hljs-string">&quot;npm run build&quot;</span><br>          sh <span class="hljs-string">&quot;ls -l&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;docker build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        HARBOR_USER = credentials(&#x27;harbor-account&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;docker&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;docker login -u $&#123;HARBOR_USER_USR&#125; -p $&#123;HARBOR_USER_PSW&#125; $&#123;registries&#125;&quot;</span><br>          sh <span class="hljs-string">&quot;docker build -t $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; .&quot;</span><br>          sh <span class="hljs-string">&quot;docker push $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;update deploy&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh  <span class="hljs-string">&quot;kubectl get deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          sh  <span class="hljs-string">&quot;kubectl set image deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; $&#123;NAME&#125;=$&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          sh  <span class="hljs-string">&quot;kubectl rollout status deployment -n $&#123;namespace&#125; $&#123;NAME&#125; --timeout=60s --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-Dockerfile文件-1"><a href="#4-Dockerfile文件-1" class="headerlink" title="4.Dockerfile文件"></a>4.Dockerfile文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM 192.168.10.254:5000/bash/nginx:latest<br>WORKDIR /usr/share/nginx/html/<br>COPY dist/ /usr/share/nginx/html/<br>ENV TZ=Asia/Shanghai<br>EXPOSE 80<br></code></pre></td></tr></table></figure><h2 id="5-创建流水线-1"><a href="#5-创建流水线-1" class="headerlink" title="5.创建流水线"></a>5.创建流水线</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/1051577822.png" alt="57168-zkvjh6cmzl.png"></p><h2 id="6-部署应用进行测试-1"><a href="#6-部署应用进行测试-1" class="headerlink" title="6.部署应用进行测试"></a>6.部署应用进行测试</h2><p><strong>部署应用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>    <br><span class="hljs-attr">metadata:</span>           <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">vue</span>      <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bolo</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">vue</span>  <span class="hljs-comment">#这里必须定义为镜像名称</span><br><span class="hljs-attr">spec:</span>              <br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>        <br>  <span class="hljs-attr">selector:</span>         <br>    <span class="hljs-attr">matchLabels:</span>    <br>      <span class="hljs-attr">app:</span> <span class="hljs-string">vue</span> <br>  <span class="hljs-attr">template:</span>          <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">vue</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vue</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span><span class="hljs-string">/vue/vuevue3-addname:main-6</span><br>        <span class="hljs-attr">ports:</span>  <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span>    <br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span>    <br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>     <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span>     <br><span class="hljs-attr">metadata:</span>         <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">vue</span>   <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bolo</span>  <br><span class="hljs-attr">spec:</span>              <br>  <span class="hljs-attr">ports:</span>          <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vue</span>    <br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>       <br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span>  <br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span>     <br>    <span class="hljs-attr">app:</span> <span class="hljs-string">vue</span>   <br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><p><strong>测试流水线</strong><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3834379080.png" alt="61641-b97abzj01ir.png"></p><h1 id="四、自动化构建-Golang-项目"><a href="#四、自动化构建-Golang-项目" class="headerlink" title="四、自动化构建 Golang 项目"></a>四、自动化构建 Golang 项目</h1><h2 id="1-流水线结构-2"><a href="#1-流水线结构-2" class="headerlink" title="1.流水线结构"></a>1.流水线结构</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/949935775.png" alt="48032-5u3ropw0if.png"><br>注意这里的Jenkinsfile与Dockerfile文件都存放在git仓库中。go应用会使用<code>go build</code>进行编译，会下载一系列依赖的包，默认会下载到容器的**&#x2F;opt&#x2F;pkg**目录中所以为了重复构建不进行重复下载需要持久化。</p><h2 id="2-需要克隆开源代码到自己gitlab仓库-2"><a href="#2-需要克隆开源代码到自己gitlab仓库-2" class="headerlink" title="2.需要克隆开源代码到自己gitlab仓库"></a>2.需要克隆开源代码到自己gitlab仓库</h2><p>源码仓库：<a href="https://gitee.com/dukuan/go-project.git">https://gitee.com/dukuan/go-project.git</a></p><h2 id="3-Jenkinsfile文件-2"><a href="#3-Jenkinsfile文件-2" class="headerlink" title="3.Jenkinsfile文件"></a>3.Jenkinsfile文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//顶层环境变量设置</span><br>  environment <span class="hljs-punctuation">&#123;</span><br>    namespace = <span class="hljs-string">&quot;bolo&quot;</span>                      <span class="hljs-comment">//服务部署在那个namespace中</span><br>    registries = <span class="hljs-string">&quot;192.168.10.15/go&quot;</span>         <span class="hljs-comment">//镜像仓库地址</span><br>    GIT = <span class="hljs-string">&quot;git@192.168.10.14:root/go-project.git&quot;</span>  <span class="hljs-comment">//代码仓库地址</span><br>    TAG = <span class="hljs-string">&quot;&quot;</span>                               <span class="hljs-comment">//镜像tag,会在下面生成,这里只是定义全局变量</span><br>    NANE = <span class="hljs-string">&quot;&quot;</span>                              <span class="hljs-comment">//jenkins项目名称,会在下面生成,这里只是定义全局变量</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//全局配置</span><br>  options <span class="hljs-punctuation">&#123;</span><br>    timestamps()                     <span class="hljs-comment">//所有输出每行都会打印时间戳</span><br>    buildDiscarder(logRotator(numToKeepStr<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">5</span>&#x27;))  <span class="hljs-comment">//保留5个历史构建版本</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//手动构建时选择分支参数</span><br>  parameters <span class="hljs-punctuation">&#123;</span> <br>    gitParameter(branch<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> branchFilter<span class="hljs-punctuation">:</span> &#x27;origin/(.*)&#x27;<span class="hljs-punctuation">,</span> defaultValue<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> description<span class="hljs-punctuation">:</span> &#x27;Branch for build and deploy&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;BRANCH&#x27;<span class="hljs-punctuation">,</span> quickFilterEnabled<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> selectedValue<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span> sortMode<span class="hljs-punctuation">:</span> &#x27;NONE&#x27;<span class="hljs-punctuation">,</span>  tagFilter<span class="hljs-punctuation">:</span> &#x27;*&#x27;<span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> &#x27;PT_BRANCH&#x27;)<br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//agent配置</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span><br>      cloud &#x27;kubernetes&#x27;<br>      slaveConnectTimeout <span class="hljs-number">1200</span><br>      workspaceVolume emptyDirWorkspaceVolume()<br>      yaml &#x27;&#x27;&#x27;<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span><br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.254</span><span class="hljs-punctuation">:</span><span class="hljs-number">5000</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp<br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/golang:1.18.3&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go&quot;</span><br>    # 对应go的依赖<br>    volumeMounts<span class="hljs-punctuation">:</span> <br>     # go 容器内的路径<br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/go/pkg&quot;</span><br>      name<span class="hljs-punctuation">:</span> go-pkg-data<br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/docker:alpine&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    volumeMounts<span class="hljs-punctuation">:</span><br>    - mountPath<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>      name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span><br>      readOnly<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:apline&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  volumes<span class="hljs-punctuation">:</span>          <br>  - name<span class="hljs-punctuation">:</span> go-pkg-data    <br>    persistentVolumeClaim<span class="hljs-punctuation">:</span>  <br>      claimName<span class="hljs-punctuation">:</span> go <br>  - hostPath<span class="hljs-punctuation">:</span><br>      path<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/run/docker.sock&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockersock&quot;</span>  <br>  restartPolicy<span class="hljs-punctuation">:</span> Never<br> # 把创建的容器调度到有标签build<span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span>的节点上<br>  nodeSelector<span class="hljs-punctuation">:</span>  <br>    build<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">//具体流水线配置</span><br>  stages <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//克隆代码</span><br>    stage(&#x27;git clone&#x27;) <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">//并行执行</span><br>      failFast <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//并行执行的分支只要有一个失败立即结束流水线</span><br>      parallel <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//手动执行jenkins流水线</span><br>        stage(&#x27;git clone by Jenkins&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>              env.gitlabBranch == <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;BRANCH&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;BRANCH&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//gitlab触发构建</span><br>        stage(&#x27;git clone trigger&#x27;) <span class="hljs-punctuation">&#123;</span><br>          when <span class="hljs-punctuation">&#123;</span><br>            expression <span class="hljs-punctuation">&#123;</span><br>              env.gitlabBranch != <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            git branch<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;env.gitlabBranch&#125;&quot;</span><span class="hljs-punctuation">,</span> credentialsId<span class="hljs-punctuation">:</span> &#x27;gitlab-key&#x27;<span class="hljs-punctuation">,</span> url<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;GIT&#125;&quot;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              TAG = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.gitlabBranch&#125;-$&#123;env.BUILD_ID&#125;&quot;</span>)<br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-comment">//初始化项目名称，项目名称用于docker镜像名称,不能有大写字母,转义</span><br>        stage(&#x27;init env&#x27;) <span class="hljs-punctuation">&#123;</span><br>          steps <span class="hljs-punctuation">&#123;</span><br>            script <span class="hljs-punctuation">&#123;</span><br>              NAME = sh(returnStdout<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> script<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo -n $&#123;env.JOB_NAME&#125;&quot;</span>).toLowerCase()<br>            <span class="hljs-punctuation">&#125;</span><br>            sh <span class="hljs-string">&quot;echo $&#123;NAME&#125;&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;go&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;export GO111MODULE=on&quot;</span><br>          sh <span class="hljs-string">&quot;go env -w GOPROXY=https://goproxy.cn,direct&quot;</span><br>          sh <span class="hljs-string">&quot;go mod tidy&quot;</span><br>          sh <span class="hljs-string">&quot;go build&quot;</span><br>          sh <span class="hljs-string">&quot;ls -l&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;docker build&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        HARBOR_USER = credentials(&#x27;harbor-account&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;docker&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh <span class="hljs-string">&quot;docker login -u $&#123;HARBOR_USER_USR&#125; -p $&#123;HARBOR_USER_PSW&#125; $&#123;registries&#125;&quot;</span><br>          sh <span class="hljs-string">&quot;docker build -t $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; .&quot;</span><br>          sh <span class="hljs-string">&quot;docker push $&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>    stage(&#x27;update deploy&#x27;) <span class="hljs-punctuation">&#123;</span><br>      environment <span class="hljs-punctuation">&#123;</span><br>        MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>      <span class="hljs-punctuation">&#125;</span><br>      steps <span class="hljs-punctuation">&#123;</span><br>        container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;) <span class="hljs-punctuation">&#123;</span><br>          sh  <span class="hljs-string">&quot;kubectl get deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          sh  <span class="hljs-string">&quot;kubectl set image deploy -n $&#123;namespace&#125; -l image=$&#123;NAME&#125; $&#123;NAME&#125;=$&#123;registries&#125;/$&#123;NAME&#125;:$&#123;TAG&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>          sh  <span class="hljs-string">&quot;kubectl rollout status deployment -n $&#123;namespace&#125; $&#123;NAME&#125; --timeout=60s --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-Dockerfile文件-2"><a href="#4-Dockerfile文件-2" class="headerlink" title="4.Dockerfile文件"></a>4.Dockerfile文件</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">10.254</span>:<span class="hljs-number">5000</span>/bash/alpine-glibc:glibc-<span class="hljs-number">2.35</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/workdir/</span><br><span class="hljs-comment"># go-project是jenkins的workspace的名称</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> go-project /opt/workdir/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> conf/ /opt/workdir/conf/</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;./go-project&quot;</span>]</span><br></code></pre></td></tr></table></figure><h2 id="5-创建流水线-2"><a href="#5-创建流水线-2" class="headerlink" title="5.创建流水线"></a>5.创建流水线</h2><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/137688574.png" alt="30345-r0khvp1vc9s.png"></p><h2 id="6-部署应用测试"><a href="#6-部署应用测试" class="headerlink" title="6.部署应用测试"></a>6.部署应用测试</h2><p><strong>部署应用</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>    <br><span class="hljs-attr">metadata:</span>           <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">go-project</span>      <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bolo</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">go-project</span>  <span class="hljs-comment">#这里使用lable匹配更新，必须设置这个，因为在jenkinsfile当中写了过去指定标签的pod</span><br><span class="hljs-attr">spec:</span>              <br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>        <br>  <span class="hljs-attr">selector:</span>          <br>    <span class="hljs-attr">matchLabels:</span>     <br>      <span class="hljs-attr">app:</span> <span class="hljs-string">go-project</span>   <br>  <span class="hljs-attr">template:</span>         <br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">go-project</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">go-project</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.15</span><span class="hljs-string">/vue/vuevue3-addname:main-6</span><br>        <span class="hljs-attr">ports:</span>  <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span>    <br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span>     <br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>    <br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span>    <br><span class="hljs-attr">metadata:</span>         <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">go-project</span>   <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">bolo</span> <br><span class="hljs-attr">spec:</span>              <br>  <span class="hljs-attr">ports:</span>           <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">go-project</span>    <br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span>     <br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">http</span> <br>  <span class="hljs-attr">selector:</span>       <br>    <span class="hljs-attr">app:</span> <span class="hljs-string">go-project</span>  <br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><p><strong>测试流水线</strong><br><img src="https://www.t-ao.cn/usr/uploads/2024/07/2773957435.png" alt="81806-cokov9c86p.png"></p><h1 id="五、配置自动触发构建"><a href="#五、配置自动触发构建" class="headerlink" title="五、配置自动触发构建"></a>五、配置自动触发构建</h1><p>之前的构建都是采用手动选择分支进行构建的，实际使用时，项目可能有很多，如果都是手动触发可能比较消耗人力。所以推荐可以按需配置自动触发，即提交代码后自动触发Jenkins进行构建任务。</p><h2 id="5-1-配置jenkins"><a href="#5-1-配置jenkins" class="headerlink" title="5.1 配置jenkins"></a>5.1 配置jenkins</h2><p>本次用 Java 项目进行演示。首先找到 Java 项目的 Job，点击 Configure</p><p>之后选择 Build Triggers，勾选 Build when a change…，记录 webhook URL（新版本[Version 2.452.2]的jenkins汉化后的选项是[<strong>触发远程构建 (例如,使用脚本)</strong>]）</p><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/2041871866.png" alt="32956-sahjntuh73j.png"><br>选择 Allow all branches，如果不想任何分支都可以触发该流水线，可以选择 Filter 进行条件匹配。之后点击 Generate 生成 Secret token， 最后点击 Save 即可。<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3812530265.png" alt="64313-z8clhrevg1k.png"></p><h2 id="5-2-配置gitlab"><a href="#5-2-配置gitlab" class="headerlink" title="5.2 配置gitlab"></a>5.2 配置gitlab</h2><p>接下来配置 GitLab，首先点击 Menu→Admin(这个设置是在总体设置里面，不是在单独的项目内)<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3476341503.png" alt="81636-mc5o7vwrnpp.png"><br>保存后，找到 <strong>Java 项目（在项目内进行设置）</strong>，点击 Settings→WebHooks（JENKINS_URL<code>/job/docker-pipline/build?token=</code>TOKEN_NAME粘贴在url内，下面的secret token就不用填写）<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/988653632.png" alt="70363-0mlvz2an5q2c.png"><br>确认无误后，点击 Add webhook</p><p>保存后没有问题可以进行测试</p><p><img src="https://www.t-ao.cn/usr/uploads/2024/07/2849705660.png" alt="38054-vf8gly9k2el.png"><br>验证流水线是否触发执行<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/832594147.png" alt="36937-t4zeinnzjup.png"></p><h1 id="六、一次构建多次部署"><a href="#六、一次构建多次部署" class="headerlink" title="六、一次构建多次部署"></a>六、一次构建多次部署</h1><p>创建一个新的 Job，名字为 go-project-uat，类型 Pipeline</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs json">pipeline <span class="hljs-punctuation">&#123;</span><br>  environment <span class="hljs-punctuation">&#123;</span><br>    HARBOR_ADDRESS = <span class="hljs-string">&quot;192.168.10.15&quot;</span>  <span class="hljs-comment">//镜像仓库地址</span><br>    NAMESPACE = <span class="hljs-string">&quot;bolo&quot;</span>                <span class="hljs-comment">//部署应用的命名空间</span><br>    IMAGE_NAME = <span class="hljs-string">&quot;go-project&quot;</span>         <span class="hljs-comment">//镜像名称</span><br>  <span class="hljs-punctuation">&#125;</span><br>  parameters <span class="hljs-punctuation">&#123;</span> <br>    imageTag(name<span class="hljs-punctuation">:</span> &#x27;DOCKER_IMAGE&#x27;<span class="hljs-punctuation">,</span> description<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> image<span class="hljs-punctuation">:</span> &#x27;go/go-project&#x27;<span class="hljs-punctuation">,</span> filter<span class="hljs-punctuation">:</span> &#x27;.*&#x27;<span class="hljs-punctuation">,</span> defaultTag<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> registry<span class="hljs-punctuation">:</span> &#x27;http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.10.15&#x27;, credentialId: &#x27;harbor-account&#x27;, tagOrder: &#x27;NATURAL&#x27;)   //获取镜像名称与tag，相关参数根据实际情况填写</span><br>  <span class="hljs-punctuation">&#125;</span>  <br>  <span class="hljs-comment">//全局配置</span><br>  options <span class="hljs-punctuation">&#123;</span><br>    timestamps()                     <span class="hljs-comment">//所有输出每行都会打印时间戳</span><br>    buildDiscarder(logRotator(numToKeepStr<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">5</span>&#x27;))  <span class="hljs-comment">//保留5个历史构建版本</span><br>  <span class="hljs-punctuation">&#125;</span><br>  agent <span class="hljs-punctuation">&#123;</span><br>    kubernetes <span class="hljs-punctuation">&#123;</span><br>      cloud &#x27;kubernetes&#x27;<br>      slaveConnectTimeout <span class="hljs-number">1200</span><br>      workspaceVolume emptyDirWorkspaceVolume()<br>      yaml &#x27;&#x27;&#x27;<br>apiVersion<span class="hljs-punctuation">:</span> v1<br>kind<span class="hljs-punctuation">:</span> Pod<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> jenkins-agent<br>  namespace<span class="hljs-punctuation">:</span> jenkins<br>spec<span class="hljs-punctuation">:</span><br>  containers<span class="hljs-punctuation">:</span><br>  - args<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\&#x27;$(JENKINS_SECRET)\&#x27;<span class="hljs-punctuation">,</span> \&#x27;$(JENKINS_NAME)\&#x27;<span class="hljs-punctuation">]</span><br>    image<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.254</span><span class="hljs-punctuation">:</span><span class="hljs-number">5000</span>/kubernetes/jnlp<span class="hljs-punctuation">:</span>alpine&#x27;<br>    name<span class="hljs-punctuation">:</span> jnlp<br>    imagePullPolicy<span class="hljs-punctuation">:</span> IfNotPresent<br>  - command<span class="hljs-punctuation">:</span><br>      - <span class="hljs-string">&quot;cat&quot;</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.10.254:5000/kubernetes/kubectl:apline&quot;</span><br>    imagePullPolicy<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IfNotPresent&quot;</span><br>    name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubectl&quot;</span><br>    tty<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>&#x27;&#x27;&#x27;<br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br> stages <span class="hljs-punctuation">&#123;</span><br>   stage(&#x27;Deploy&#x27;) <span class="hljs-punctuation">&#123;</span><br>     environment <span class="hljs-punctuation">&#123;</span><br>       MY_KUBECONFIG = credentials(&#x27;kubernetes-cluster&#x27;)<br>     <span class="hljs-punctuation">&#125;</span><br>     steps <span class="hljs-punctuation">&#123;</span><br>       container(name<span class="hljs-punctuation">:</span> &#x27;kubectl&#x27;)<span class="hljs-punctuation">&#123;</span><br>         sh <span class="hljs-string">&quot;echo $&#123;DOCKER_IMAGE&#125;&quot;</span><br>         sh  <span class="hljs-string">&quot;kubectl get deploy -n $&#123;NAMESPACE&#125; -l image=$&#123;IMAGE_NAME&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>         sh  <span class="hljs-string">&quot;kubectl set image deploy -n $&#123;NAMESPACE&#125; -l image=$&#123;IMAGE_NAME&#125; $&#123;IMAGE_NAME&#125;=$&#123;HARBOR_ADDRESS&#125;/$&#123;DOCKER_IMAGE&#125; --kubeconfig $MY_KUBECONFIG&quot;</span><br>         sh  <span class="hljs-string">&quot;kubectl rollout status deployment -n $&#123;NAMESPACE&#125; $&#123;IMAGE_NAME&#125; --timeout=60s --kubeconfig $MY_KUBECONFIG&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>执行流水线<br><img src="https://www.t-ao.cn/usr/uploads/2024/07/3494418146.png" alt="33052-cgm561oyaqf.png"></p><p><strong>原文来自：<a href="https://zhangzhuo.ltd/articles/2022/06/05/1654424805227.html">zhangzhuo</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes1.24/1.25集群使用docker作为容器</title>
    <link href="/2025/03/19/Kubernetes1-24_1-25%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8docker%E4%BD%9C%E4%B8%BA%E5%AE%B9%E5%99%A8/"/>
    <url>/2025/03/19/Kubernetes1-24_1-25%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8docker%E4%BD%9C%E4%B8%BA%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在新版本Kubernetes环境（1.24以及以上版本）下官方不在支持docker作为容器运行时了，若要继续使用docker 需要对docker进行配置一番。需要安装cri-docker作为Kubernetes容器</p><h3 id="查看当前容器运行时"><a href="#查看当前容器运行时" class="headerlink" title="查看当前容器运行时"></a>查看当前容器运行时</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看指定节点容器运行时</span><br>kubectl  describe node k8s-node05  | grep Container<br>  Container Runtime Version:  containerd://1.6.8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有节点容器运行时</span><br>kubectl  describe node  | grep Container<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br></code></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">更新源信息</span><br>yum update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装必要软件</span><br>yum install -y yum-utils   device-mapper-persistent-data   lvm2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">写入docker源信息</span><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新源信息并进行安装</span><br>yum update<br>yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置加速器</span><br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://hub-mirror.c.163.com&quot;],<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="安装cri-docker"><a href="#安装cri-docker" class="headerlink" title="安装cri-docker"></a>安装cri-docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">由于1.24以及更高版本不支持docker所以安装cri-docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载cri-docker</span> <br>wget  https://mirrors.chenby.cn/https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.5/cri-dockerd-0.2.5.amd64.tgz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压cri-docker</span><br>tar xvf cri-dockerd-0.2.5.amd64.tgz <br>cp cri-dockerd/cri-dockerd  /usr/bin/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">写入启动配置文件</span><br>cat &gt;  /usr/lib/systemd/system/cri-docker.service &lt;&lt;EOF<br>[Unit]<br>Description=CRI Interface for Docker Application Container Engine<br>Documentation=https://docs.mirantis.com<br>After=network-online.target firewalld.service docker.service<br>Wants=network-online.target<br>Requires=cri-docker.socket<br><br>[Service]<br>Type=notify<br>ExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.7<br>ExecReload=/bin/kill -s HUP $MAINPID<br>TimeoutSec=0<br>RestartSec=2<br>Restart=always<br><br>StartLimitBurst=3<br><br>StartLimitInterval=60s<br><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br><br>TasksMax=infinity<br>Delegate=yes<br>KillMode=process<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">写入socket配置文件</span><br>cat &gt; /usr/lib/systemd/system/cri-docker.socket &lt;&lt;EOF<br>[Unit]<br>Description=CRI Docker Socket for the API<br>PartOf=cri-docker.service<br><br>[Socket]<br>ListenStream=%t/cri-dockerd.sock<br>SocketMode=0660<br>SocketUser=root<br>SocketGroup=docker<br><br>[Install]<br>WantedBy=sockets.target<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进行启动cri-docker</span><br>systemctl daemon-reload ; systemctl enable cri-docker --now<br></code></pre></td></tr></table></figure><h3 id="为kubelet配置容器运行时"><a href="#为kubelet配置容器运行时" class="headerlink" title="为kubelet配置容器运行时"></a>为kubelet配置容器运行时</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.25 版本下 所有k8s节点配置kubelet service</span><br>cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF<br><br>[Unit]<br>Description=Kubernetes Kubelet<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=containerd.service<br>Requires=containerd.service<br><br>[Service]<br>ExecStart=/usr/local/bin/kubelet \\<br>    --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig  \\<br>    --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \\<br>    --config=/etc/kubernetes/kubelet-conf.yml \\<br>    --container-runtime-endpoint=unix:///run/cri-dockerd.sock  \\<br>    --node-labels=node.kubernetes.io/node=<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1.24 版本下 所有k8s节点配置kubelet service</span><br>cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF<br><br>[Unit]<br>Description=Kubernetes Kubelet<br>Documentation=https://github.com/kubernetes/kubernetes<br>After=containerd.service<br>Requires=containerd.service<br><br>[Service]<br>ExecStart=/usr/local/bin/kubelet \\<br>    --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig  \\<br>    --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \\<br>    --config=/etc/kubernetes/kubelet-conf.yml \\<br>    --container-runtime=remote  \\<br>    --runtime-request-timeout=15m  \\<br>    --container-runtime-endpoint=unix:///run/cri-dockerd.sock  \\<br>    --cgroup-driver=systemd \\<br>    --node-labels=node.kubernetes.io/node= \\<br>    --feature-gates=IPv6DualStack=true<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启</span><br>systemctl daemon-reload<br>systemctl restart kubelet<br>systemctl enable --now kubelet<br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看指定节点容器运行时</span><br>kubectl  describe node k8s-node05  | grep Container<br>  Container Runtime Version:  docker://20.10.17<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有节点容器运行时</span><br>kubectl  describe node  | grep Container<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  containerd://1.6.8<br>  Container Runtime Version:  docker://20.10.17<br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://www.oiox.cn/">https://www.oiox.cn/</a></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenELB部署及应用(分配LoadBalancer地址请求)</title>
    <link href="/2025/03/19/OpenELB%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%BA%94%E7%94%A8-%E5%88%86%E9%85%8DLoadBalancer%E5%9C%B0%E5%9D%80%E8%AF%B7%E6%B1%82/"/>
    <url>/2025/03/19/OpenELB%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%BA%94%E7%94%A8-%E5%88%86%E9%85%8DLoadBalancer%E5%9C%B0%E5%9D%80%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="一、OpenELB介绍"><a href="#一、OpenELB介绍" class="headerlink" title="一、OpenELB介绍"></a>一、OpenELB介绍</h2><blockquote><p>网址： openelb.io</p></blockquote><p>OpenELB 是一个开源的<a href="https://so.csdn.net/so/search?q=%E4%BA%91%E5%8E%9F%E7%94%9F&spm=1001.2101.3001.7020">云原生</a>负载均衡器实现，可以在基于裸金属服务器、边缘以及虚拟化的 Kubernetes 环境中使用 LoadBalancer 类型的 Service 对外暴露服务。OpenELB 项目最初由 KubeSphere 社区发起，目前已作为 CNCF 沙箱项目加入 CNCF 基金会，由 OpenELB 开源社区维护与支持。</p><p>与 MetalLB 类似，OpenELB 也拥有两种主要工作模式：Layer2 模式和 BGP 模式。OpenELB 的 BGP 模式目前暂不支持 IPv6。<br>无论是 Layer2 模式还是 BGP 模式，核心思路都是通过某种方式将特定 VIP 的流量引到 k8s 集群中，然后再通过 kube-proxy 将流量转发到后面的特定服务。</p><h3 id="1-1-Layer2-模式"><a href="#1-1-Layer2-模式" class="headerlink" title="1.1 Layer2 模式"></a>1.1 Layer2 模式</h3><blockquote><p>Layer2 模式需要我们的 k8s 集群基础环境支持发送 anonymous ARP&#x2F;NDP packets。因为 OpenELB 是针对裸金属服务器设计的，因此如果是在云环境中部署，需要注意是否满足条件。</p></blockquote><h3 id="1-2-BGP-模式"><a href="#1-2-BGP-模式" class="headerlink" title="1.2 BGP 模式"></a>1.2 BGP 模式</h3><p>OpenELB 的 BGP 模式使用的是gobgp实现的 BGP 协议，通过使用 BGP 协议和路由器建立 BGP 连接并实现 ECMP 负载均衡，从而实现高可用的 LoadBalancer。</p><h3 id="1-3-注意事项"><a href="#1-3-注意事项" class="headerlink" title="1.3 注意事项"></a>1.3 注意事项</h3><blockquote><p>配置 ARP 参数</p></blockquote><p>部署 Layer2 模式需要把 k8s 集群中的 ipvs 配置打开strictARP，<strong>开启之后 k8s 集群中的 <code>kube-proxy</code> 会停止响应 <code>kube-ipvs0</code> 网卡之外的其他网卡的 arp 请求，而由 OpenELB 接手处理（OpenELB和MetalLB处理方法类似）。</strong></p><p><code>strict ARP</code> 开启之后相当于把 将 <code>arp_ignore</code> 设置为 1 并将 <code>arp_announce</code> 设置为 2 启用严格的 ARP，这个原理和 LVS 中的 DR 模式对 RS 的配置一样。</p><h2 id="二、OpenELB安装及配置"><a href="#二、OpenELB安装及配置" class="headerlink" title="二、OpenELB安装及配置"></a>二、OpenELB安装及配置</h2><h3 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h3><ul><li><p>You need to prepare a Kubernetes cluster, and ensure that the Kubernetes version is 1.15 or later. OpenELB requires CustomResourceDefinition (CRD) v1, which is only supported by Kubernetes 1.15 or later. You can use the following methods to deploy a Kubernetes cluster（1.15之后的k8s集群）:</p></li><li><p>Use <a href="https://kubesphere.io/docs/installing-on-linux/">KubeKey</a> (recommended). You can use KubeKey to deploy a Kubernetes cluster with or without <a href="https://so.csdn.net/so/search?q=KubeSphere&spm=1001.2101.3001.7020">KubeSphere</a>（kubesphere部署的集群）.</p></li><li><p>Follow <a href="https://kubernetes.io/docs/home/">official Kubernetes guides</a>.</p></li></ul><p>OpenELB is designed to be used in bare-metal Kubernetes environments. However, you can also use a cloud-based Kubernetes cluster for learning and testing（除了裸金属服务器之外还可以是云服务器搭建的k8s节点）.</p><h3 id="2-2-Install-OpenELB-Using-kubectl"><a href="#2-2-Install-OpenELB-Using-kubectl" class="headerlink" title="2.2 Install OpenELB Using kubectl"></a>2.2 Install OpenELB Using kubectl</h3><p>可参照官网的安装方式来进行安装（选择不同的集群）：<a href="https://openelb.io/docs/getting-started/installation/">https://openelb.io/docs/getting-started/installation/</a></p><p>1.Log in to the Kubernetes cluster over SSH and run the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">旧版本</span><br>kubectl apply -f https://raw.githubusercontent.com/openelb/openelb/master/deploy/openelb.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新版本2024-08-27</span><br>wget https://raw.githubusercontent.com/openelb/openelb/release-0.6/deploy/openelb.yaml<br>kubectl apply -f openelb.yaml<br></code></pre></td></tr></table></figure><p>2.Run the following command to check whether the status of <code>openelb-manager</code> is <strong>READY</strong>: <strong>1&#x2F;1</strong> and <strong>STATUS</strong>: <strong>Running</strong>. If yes, OpenELB has been installed successfully.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 打开https://raw.githubusercontent.com/openelb/openelb/release-0.6/deploy/openelb.yaml 可以看到创建的资源都在openelb-system名称空间内，所以通过下面的语句查看创建的资源</span><br><span class="hljs-comment"># kubectl get pods -n openelb-system</span><br></code></pre></td></tr></table></figure><h3 id="2-2-OpenELB配置"><a href="#2-2-OpenELB配置" class="headerlink" title="2.2 OpenELB配置"></a>2.2 OpenELB配置</h3><blockquote><p>Use OpenELB in Layer 2 Mode（二层模式的使用）</p></blockquote><h4 id="2-2-1-需求"><a href="#2-2-1-需求" class="headerlink" title="2.2.1 需求"></a>2.2.1 需求</h4><ul><li>You need to <a href="https://openelb.io/docs/getting-started/installation/">prepare a Kubernetes cluster where OpenELB has been installed</a>. All Kubernetes cluster nodes must be on the same Layer 2 network (under the same router).</li><li>You need to prepare a client machine, which is used to verify whether OpenELB functions properly in Layer 2 mode. The client machine needs to be on the same network as the Kubernetes cluster nodes.</li><li>The Layer 2 mode requires your infrastructure environment to allow anonymous ARP&#x2F;NDP packets. If OpenELB is installed in a cloud-based Kubernetes cluster for testing, you need to confirm with your cloud vendor whether anonymous ARP&#x2F;NDP packets are allowed. If not, the Layer 2 mode cannot be used.</li></ul><h4 id="2-2-2-配置步骤"><a href="#2-2-2-配置步骤" class="headerlink" title="2.2.2 配置步骤"></a>2.2.2 配置步骤</h4><p><strong>Step 1: Enable strictARP for kube-proxy</strong></p><p>In Layer 2 mode, you need to enable strictARP for kube-proxy so that all NICs in the Kubernetes cluster stop answering ARP requests from other NICs and OpenELB handles ARP requests instead.</p><p>1.Log in to the Kubernetes cluster and run the following command to edit the kube-proxy ConfigMap:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl edit configmap kube-proxy -n kube-system</span><br></code></pre></td></tr></table></figure><p>2.In the kube-proxy ConfigMap YAML configuration, set <code>data.config.conf.ipvs.strictARP</code> to <code>true</code>.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ipvs:<br>  strictARP: true<br></code></pre></td></tr></table></figure><p>3.Run the following command to restart kube-proxy（重启kube-system名称空间当中的daemonset资源，让配置严格arp模式生效）:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl rollout restart daemonset kube-proxy -n kube-system</span><br></code></pre></td></tr></table></figure><p><strong>Step 2: Specify the NIC Used for OpenELB（如果是多网卡，那么可以指定出口）</strong></p><p>If the node where OpenELB is installed has multiple NICs, you need to specify the NIC used for OpenELB in Layer 2 mode. You can skip this step if the node has only one NIC.</p><p>In this example, the master1 node where OpenELB is installed has two NICs (eth0 192.168.0.2 and eth1 192.168.1.2), and eth0 192.168.0.2 will be used for OpenELB.</p><p>Run the following command to annotate master1 to specify the NIC:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl annotate nodes k8s-master01 layer2.openelb.kubesphere.io/v1alpha1=&quot;192.168.10.141&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Step 3: Create an Eip Object（创建EIP地址池，用于分配LoadBalancer请求时分配IP地址）</strong></p><p>The Eip object functions as an IP address pool for OpenELB.</p><p>1.Run the following command to create a YAML file for the Eip object:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim layer2-eip.yaml</span><br></code></pre></td></tr></table></figure><p>2.Add the following information to the YAML file:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 旧版本</span><br>apiVersion: network.kubesphere.io/v1alpha2<br>kind: Eip<br>metadata:<br>  name: layer2<span class="hljs-literal">-eip</span><br>spec:<br>  address: <span class="hljs-number">192.168</span>.<span class="hljs-number">10.70</span><span class="hljs-literal">-192</span>.<span class="hljs-number">168.10</span>.<span class="hljs-number">99</span><br>  interface: ens33<br>  protocol: layer2<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2024-08-27 基于官网最新的地址池配置，简要版本的往下拉一点就是</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">官方配置地址： https://openelb.io/docs/getting-started/configuration/configure-ip-address-pools-using-eip/</span><br>apiVersion: network.kubesphere.io/v1alpha2<br>kind: Eip<br>metadata:<br>    name: eip-sample-pool<br>    annotations:<br>      eip.openelb.kubesphere.io/is-default-eip: &quot;true&quot;<br>spec:<br>    address: 192.168.0.91-192.168.0.100<br>    # 地址池的优先级<br>    priority: 100<br>    # namespace 也可以看需求指定，这个地址池在什么名称空间当中使用<br>    namespaces:<br>      - test<br>      - default<br>    namespaceSelector:<br>      kubesphere.io/workspace: workspace<br>    disable: false<br>    protocol: layer2<br>    interface: eth0<br>    # interface: can_reach:192.168.0.1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下面这个不要，因为status是在创建资源后查看是否达到你要求的资源，所以在配置的时候可以不要</span><br>status:<br>    occupied: false<br>    usage: 1<br>    poolSize: 10<br>    used: <br>      &quot;192.168.0.91&quot;: &quot;default/test-svc&quot;<br>    firstIP: 192.168.0.91<br>    lastIP: 192.168.0.100<br>    ready: true<br>    v4: true<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2024-08-27 简要版</span><br>apiVersion: network.kubesphere.io/v1alpha2<br>kind: Eip<br>metadata:<br>  name: layer2-eip<br>spec:<br>  address: 172.31.73.130-172.31.73.132<br>  namespaces: <br>  - project<br>  interface: eth0<br>  protocol: layer2<br><br></code></pre></td></tr></table></figure><blockquote><ul><li>The IP addresses specified in <code>spec:address</code> must be on the same network segment as the Kubernetes cluster nodes.</li><li>For details about the fields in the Eip YAML configuration, see <a href="https://openelb.io/docs/getting-started/configuration/configure-ip-address-pools-using-eip/">Configure IP Address Pools Using Eip</a>.</li></ul></blockquote><p>3.Run the following command to create the Eip object:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl apply -f layer2-eip.yaml</span><br></code></pre></td></tr></table></figure><h2 id="三、OpenELB使用"><a href="#三、OpenELB使用" class="headerlink" title="三、OpenELB使用"></a>三、OpenELB使用</h2><h3 id="3-1-在k8s命令行中使用"><a href="#3-1-在k8s命令行中使用" class="headerlink" title="3.1 在k8s命令行中使用"></a>3.1 在k8s命令行中使用</h3><h4 id="3-1-1-Create-a-Deployment"><a href="#3-1-1-Create-a-Deployment" class="headerlink" title="3.1.1 Create a Deployment"></a>3.1.1 Create a Deployment</h4><p>The following creates a Deployment of two Pods using the luksa&#x2F;kubia image. Each Pod returns its own Pod name to external requests.</p><p>1.Run the following command to create a YAML file for the Deployment:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim layer2-openelb.yaml</span><br></code></pre></td></tr></table></figure><p>2.Add the following information to the YAML file:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建普通的dp资源，需要注意你上面创建的EIP在哪个名称空间当中。</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: layer2<span class="hljs-literal">-openelb</span><br>spec:<br>  replicas: <span class="hljs-number">2</span><br>  selector:<br>    matchLabels:<br>      app: layer2<span class="hljs-literal">-openelb</span><br>  template:<br>    metadata:<br>      labels:<br>        app: layer2<span class="hljs-literal">-openelb</span><br>    spec:<br>      containers:<br>        - image: luksa/kubia<br>          name: kubia<br>          ports:<br>            - containerPort: <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>3.Run the following command to create the Deployment:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl apply -f layer2-openelb.yaml</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-Create-a-Service"><a href="#3-1-2-Create-a-Service" class="headerlink" title="3.1.2 Create a Service"></a>3.1.2 Create a Service</h4><p>1.Run the following command to create a YAML file for the Service:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># vim layer2-svc.yaml</span><br></code></pre></td></tr></table></figure><p>2.Add the following information to the YAML file:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kind: Service<br>apiVersion: v1<br>metadata:<br>  name: layer2<span class="hljs-literal">-svc</span><br>  annotations:<br>    lb.kubesphere.io/v1alpha1: openelb<br>    protocol.openelb.kubesphere.io/v1alpha1: layer2<br>    eip.openelb.kubesphere.io/v1alpha2: layer2<span class="hljs-literal">-eip</span><br>spec:<br>  selector:<br>    app: layer2<span class="hljs-literal">-openelb</span><br>  <span class="hljs-built_in">type</span>: LoadBalancer<br>  ports:<br>    - name: http<br>      port: <span class="hljs-number">80</span><br>      targetPort: <span class="hljs-number">8080</span><br>  externalTrafficPolicy: Cluster<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2024-08-27  包含EIP地址池的使用方法</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里使用的是简要版的EIP地址池</span><br><br>kind: Service<br>apiVersion: v1<br>metadata:<br>  name: nginx<br>  namespace: project-test<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">EIP的使用主要是根据注解，如果是在其他的云平台上使用，也可以通过添加注解来达到使用openELB分配的IP地址</span><br>  annotations:<br>    lb.kubesphere.io/v1alpha1: openelb<br>    eip.openelb.kubesphere.io/v1alpha2: layer2-eip<br>spec:<br>  selector:<br>    app: nginx<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">选择分配LoadBalancer</span><br>  type: LoadBalancer<br>  ports:<br>    - name: http<br>      port: 80<br>      targetPort: 80<br>  externalTrafficPolicy: Cluster<br></code></pre></td></tr></table></figure><blockquote><ul><li>You must set <code>spec:type</code> to <code>LoadBalancer</code>.</li><li>The <code>lb.kubesphere.io/v1alpha1: openelb</code> annotation specifies that the Service uses OpenELB.</li><li>The <code>protocol.openelb.kubesphere.io/v1alpha1: layer2</code> annotation specifies that OpenELB is used in Layer 2 mode.</li><li>The <code>eip.openelb.kubesphere.io/v1alpha2: layer2-eip</code> annotation specifies the Eip object used by OpenELB. If this annotation is not configured, OpenELB automatically uses the first available Eip object that matches the protocol. You can also delete this annotation and add the <code>spec:loadBalancerIP</code> field (for example, <code>spec:loadBalancerIP: 192.168.0.91</code>) to assign a specific IP address to the Service.</li><li>If <code>spec:externalTrafficPolicy</code> is set to <code>Cluster</code> (default value), OpenELB randomly selects a node from all Kubernetes cluster nodes to handle Service requests. Pods on other nodes can also be reached over kube-proxy.</li><li>If <code>spec:externalTrafficPolicy</code> is set to <code>Local</code>, OpenELB randomly selects a node that contains a Pod in the Kubernetes cluster to handle Service requests. Only Pods on the selected node can be reached.</li></ul></blockquote><p>3.Run the following command to create the Service:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">kubectl apply <span class="hljs-operator">-f</span> layer2<span class="hljs-literal">-svc</span>.yaml<br></code></pre></td></tr></table></figure><h4 id="3-1-3-Verify-OpenELB-in-Layer-2-Mode"><a href="#3-1-3-Verify-OpenELB-in-Layer-2-Mode" class="headerlink" title="3.1.3 Verify OpenELB in Layer 2 Mode"></a>3.1.3 Verify OpenELB in Layer 2 Mode</h4><p>In the Kubernetes cluster, run the following command to obtain the external IP address of the Service:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># kubectl get svc</span><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生OpenELB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus基于集群模式Consul自动发现（consul_sd_configs）</title>
    <link href="/2025/03/19/Prometheus%E5%9F%BA%E4%BA%8E%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8FConsul%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0%EF%BC%88consul-sd-configs%EF%BC%89/"/>
    <url>/2025/03/19/Prometheus%E5%9F%BA%E4%BA%8E%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8FConsul%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0%EF%BC%88consul-sd-configs%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装配置-Consul-集群模式"><a href="#1-安装配置-Consul-集群模式" class="headerlink" title="1. 安装配置 Consul 集群模式"></a>1. 安装配置 Consul 集群模式</h2><p>Consul 集群模式支持高可用性，多个节点协同工作。以下是安装和配置步骤：</p><h3 id="1-1-安装-Consul集群"><a href="#1-1-安装-Consul集群" class="headerlink" title="1.1 安装 Consul集群"></a>1.1 安装 Consul集群</h3><ol><li><p>下载并解压 Consul 二进制文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://releases.hashicorp.com/consul/1.15.2/consul_1.15.2_linux_amd64.zip<br>unzip consul_1.15.2_linux_amd64.zip<br>sudo mv consul /usr/local/bin/<br></code></pre></td></tr></table></figure></li><li><p>创建 Consul 数据目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /opt/consul/data<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-2-配置-Consul-服务器节点"><a href="#1-2-配置-Consul-服务器节点" class="headerlink" title="1.2 配置 Consul 服务器节点"></a>1.2 配置 Consul 服务器节点</h3><p>在每个服务器节点上创建 Consul 配置文件（如 <code>/etc/consul.d/consul.json</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 每个服务器节点的配置相似，唯一不同的是 node_name 和 bind_addr 的 IP 地址，还有retry_join的ip地址需要根据bind_addr去指定。</span><br>&#123;<br>  <span class="hljs-attr">&quot;datacenter&quot;:</span> <span class="hljs-string">&quot;dc1&quot;</span>,<br>  <span class="hljs-attr">&quot;node_name&quot;:</span> <span class="hljs-string">&quot;consul-server-1&quot;</span>,<br>  <span class="hljs-attr">&quot;server&quot;:</span> <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;bootstrap_expect&quot;:</span> <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">&quot;bind_addr&quot;:</span> <span class="hljs-string">&quot;192.168.1.101&quot;</span>,<br>  <span class="hljs-attr">&quot;client_addr&quot;:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;retry_join&quot;:</span> [<span class="hljs-string">&quot;192.168.1.102&quot;</span>, <span class="hljs-string">&quot;192.168.1.103&quot;</span>],<br>  <span class="hljs-attr">&quot;data_dir&quot;:</span> <span class="hljs-string">&quot;/opt/consul/data&quot;</span>,<br>  <span class="hljs-attr">&quot;log_level&quot;:</span> <span class="hljs-string">&quot;INFO&quot;</span>,<br>  <span class="hljs-attr">&quot;ui&quot;:</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置说明："><a href="#配置说明：" class="headerlink" title="配置说明："></a>配置说明：</h4><ul><li><strong>bootstrap_expect</strong>：期望的 Consul 服务器节点数量（如上面配置当中的3，表示会有3个节点）。</li><li><strong>retry_join</strong>：加入集群的其他节点 IP。</li><li><strong>bind_addr</strong>：当前节点的 IP 地址。</li></ul><p>启动 Consul 服务器节点(集群模式需要在不同的服务器节点上进行启动)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">consul agent -server -config-file=/etc/consul.d/consul.json<br></code></pre></td></tr></table></figure><h3 id="1-3-配置-Consul-客户端节点"><a href="#1-3-配置-Consul-客户端节点" class="headerlink" title="1.3 配置 Consul 客户端节点"></a>1.3 配置 Consul 客户端节点</h3><p>客户端节点配置文件示例（位于 <code>/etc/consul.d/consul.json</code>）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"># 客户端地址也有一个bind_addr监听客户端地址<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;datacenter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dc1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;node_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;consul-client-1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bind_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.1.104&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;client_addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;retry_join&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;192.168.1.101&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;192.168.1.102&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;192.168.1.103&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data_dir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/opt/consul/data&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log_level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;INFO&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ui&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动客户端节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">consul agent -config-file=/etc/consul.d/consul.json<br></code></pre></td></tr></table></figure><h3 id="1-4-验证-Consul-集群"><a href="#1-4-验证-Consul-集群" class="headerlink" title="1.4 验证 Consul 集群"></a>1.4 验证 Consul 集群</h3><p>通过 Web UI 验证集群状态，访问 <code>http://&lt;任意服务器IP&gt;:8500/ui</code>。</p><hr><h2 id="2-将应用注册到-Consul-集群"><a href="#2-将应用注册到-Consul-集群" class="headerlink" title="2. 将应用注册到 Consul 集群"></a>2. 将应用注册到 Consul 集群</h2><p>Consul 支持 <strong>手动服务注册</strong> 和 <strong>自动服务注册</strong>。</p><h3 id="2-1-手动注册服务"><a href="#2-1-手动注册服务" class="headerlink" title="2.1 手动注册服务"></a>2.1 手动注册服务</h3><p>可以创建服务定义文件，如 <code>/etc/consul.d/my-web-app.json</code>，注册服务：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;service&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-web-app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;web&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;v1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8080</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;check&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-web-app-health&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HTTP Health Check&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;http&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8080/health&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1s&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后通过以下命令重新加载 Consul 配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">consul reload<br></code></pre></td></tr></table></figure><h3 id="2-2-自动注册服务"><a href="#2-2-自动注册服务" class="headerlink" title="2.2 自动注册服务"></a>2.2 自动注册服务</h3><p>服务可以通过调用 Consul API 自动注册。例如，使用 <code>curl</code> 命令进行注册：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --request PUT --data \<br>&#x27;&#123;<br>  &quot;ID&quot;: &quot;my-web-app&quot;,<br>  &quot;Name&quot;: &quot;my-web-app&quot;,<br>  &quot;Tags&quot;: [&quot;web&quot;, &quot;v1&quot;],<br>  &quot;Address&quot;: &quot;localhost&quot;,<br>  &quot;Port&quot;: 8080,<br>  &quot;Check&quot;: &#123;<br>    &quot;HTTP&quot;: &quot;http://localhost:8080/health&quot;,<br>    &quot;Interval&quot;: &quot;10s&quot;<br>  &#125;<br>&#125;&#x27; http://localhost:8500/v1/agent/service/register<br></code></pre></td></tr></table></figure><hr><h2 id="3-配置-Prometheus-动态发现-Consul-注册的服务"><a href="#3-配置-Prometheus-动态发现-Consul-注册的服务" class="headerlink" title="3. 配置 Prometheus 动态发现 Consul 注册的服务"></a>3. 配置 Prometheus 动态发现 Consul 注册的服务</h2><h3 id="3-1-修改-Prometheus-配置文件"><a href="#3-1-修改-Prometheus-配置文件" class="headerlink" title="3.1 修改 Prometheus 配置文件"></a>3.1 修改 Prometheus 配置文件</h3><p>在 Prometheus 配置文件 <code>prometheus.yml</code> 中添加 <strong>Consul 服务发现配置</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;consul-services&#x27;</span><br>    <span class="hljs-attr">consul_sd_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">server:</span> <span class="hljs-string">&#x27;localhost:8500&#x27;</span><br>        <span class="hljs-attr">services:</span> <br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;my-web-app&#x27;</span><br>    <span class="hljs-attr">relabel_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__meta_consul_service</span>]<br>        <span class="hljs-attr">regex:</span> <span class="hljs-string">&#x27;my-web-app&#x27;</span><br>        <span class="hljs-attr">action:</span> <span class="hljs-string">keep</span><br></code></pre></td></tr></table></figure><h3 id="3-2-重新启动-Prometheus"><a href="#3-2-重新启动-Prometheus" class="headerlink" title="3.2 重新启动 Prometheus"></a>3.2 重新启动 Prometheus</h3><p>更新配置后，重新启动 Prometheus：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./prometheus --config.file=prometheus.yml<br></code></pre></td></tr></table></figure><h3 id="3-3-验证服务发现"><a href="#3-3-验证服务发现" class="headerlink" title="3.3 验证服务发现"></a>3.3 验证服务发现</h3><p>访问 Prometheus Web UI (<code>http://localhost:9090</code>)，进入 <strong>Targets</strong> 页面，检查 <code>my-web-app</code> 是否已被动态发现并抓取。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>Consul 集群模式</strong> 提供高可用服务发现。</li><li>应用可以通过手动或自动方式注册到 Consul。</li><li><strong>Prometheus</strong> 可以通过 <strong>Consul 服务发现</strong> 动态抓取已注册的服务指标。</li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus基于文件的服务发现配置（file_sd_configs）</title>
    <link href="/2025/03/19/Prometheus%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E9%85%8D%E7%BD%AE%EF%BC%88file-sd-configs%EF%BC%89/"/>
    <url>/2025/03/19/Prometheus%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E9%85%8D%E7%BD%AE%EF%BC%88file-sd-configs%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h1><ul><li>之前手动配置了很多个traget<ul><li>redis</li><li>mysql</li><li>blackbox</li><li>pushgateway</li></ul></li><li>手动配置维护成本高，还容易出错</li></ul><h1 id="基于文件的服务发现配置"><a href="#基于文件的服务发现配置" class="headerlink" title="基于文件的服务发现配置"></a>基于文件的服务发现配置</h1><ul><li><a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#file_sd_config">文档地址</a></li><li>将配置写在yaml&#x2F;json的文件当中，通过Prometheus的主配置文件引入，实现在Prometheus主配置文件之外的文件当中动态的添加或删除对应的监控项</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>基于文件的服务发现提供了一种<strong>配置静态目标</strong>的更通用的方法</li><li>并充当了插入自定义服务发现机制的接口。</li><li>摆脱对特定服务发现源的依赖</li><li>只要能正确给出 json&#x2F;yaml文件即可</li><li>和服务树的最好匹配方案</li></ul><h2 id="yaml文件类型"><a href="#yaml文件类型" class="headerlink" title="yaml文件类型"></a>yaml文件类型</h2><ul><li>yaml</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">YAML yaml - targets: [ - &#x27;&lt;host&gt;&#x27; ] labels: [ &lt;labelname&gt;: &lt;labelvalue&gt; ... ]<br><br></code></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.101</span><span class="hljs-number">.222</span><span class="hljs-string">:9100</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.101</span><span class="hljs-number">.223</span><span class="hljs-string">:9100</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">account:</span> <span class="hljs-string">&quot;aliyun-01&quot;</span>   <br>    <span class="hljs-attr">region:</span> <span class="hljs-string">&quot;ap-south-1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="json文件类型"><a href="#json文件类型" class="headerlink" title="json文件类型"></a>json文件类型</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">json [ &#123; &quot;targets&quot;: [ &quot;&lt;host&gt;&quot;, ... ], &quot;labels&quot;: &#123; &quot;&lt;labelname&gt;&quot;: &quot;&lt;labelvalue&gt;&quot;, ... &#125; &#125;, ... ]<br></code></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;targets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;192.168.101.222:9100&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;account&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aliyun-01&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;region&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ap-south-1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prod&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inf&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;project&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;monitor&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;stree_gpa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inf.monitor.prometheus&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;targets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;192.168.101.223:9100&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;account&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aliyun-02&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;region&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ap-south-2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prod&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inf&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;project&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;middleware&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;stree_gpa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inf.middleware.kafka&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h3 id="下面来解读一下"><a href="#下面来解读一下" class="headerlink" title="下面来解读一下"></a>下面来解读一下</h3><ul><li><strong>targets 是一组实例地址的列表</strong></li><li><strong>labels 是这组实例的标签，应用到列表中所有实例</strong></li><li>如果想每个实例不同的标签，可以将targets列表保留一个实例即可</li><li>标签可以自定义，下面举几个例子<ul><li>account 代表公有云账户，多账户情况</li><li>region 代表区域</li><li>env 代表所属环境 prod代表生产，pre代表预发，test代表测试</li><li>group代表业务大组</li><li>project 代表项目</li><li>stree_gpa 代表服务树三级标签</li></ul></li><li>那么prometheus在采集对应target时就会将对应标签打入其metrics中</li><li>为后续我们按照标签过滤提供方便</li></ul><h2 id="配置举例"><a href="#配置举例" class="headerlink" title="配置举例"></a>配置举例</h2><ul><li>files 代表 文件路径 支持通配符</li><li>refresh_interval 代表 文件刷新间隔</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;node_exporter&#x27;</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">30s</span><br>  <span class="hljs-attr">scrape_timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/metrics</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">honor_timestamps:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 配置文件发现配置</span><br>  <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/app/prometheus/sd/node_exporter.json</span><br>    <span class="hljs-comment"># 刷新的频率</span><br>    <span class="hljs-attr">refresh_interval:</span> <span class="hljs-string">5m</span><br></code></pre></td></tr></table></figure><h2 id="改造为服务发现类型"><a href="#改造为服务发现类型" class="headerlink" title="改造为服务发现类型"></a>改造为服务发现类型</h2><ul><li>将 blackbox-http 和 node_exporter 改为文件发现</li><li>prometheus 配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;blackbox-http&#x27;</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/probe</span><br>  <span class="hljs-comment"># 传入的参数</span><br>  <span class="hljs-attr">params:</span><br>    <span class="hljs-attr">module:</span> [<span class="hljs-string">http_2xx</span>]  <span class="hljs-comment"># Look for a HTTP 200 response. 查看http_2xx的响应</span><br>  <span class="hljs-comment"># 抓取间隔</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">15s</span><br>  <span class="hljs-comment"># 抓取超时</span><br>  <span class="hljs-attr">scrape_timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">http</span><br>  <span class="hljs-comment"># 是否采用数据源提供的时间戳作为时间戳</span><br>  <span class="hljs-attr">honor_timestamps:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 原来是static_config,改为文件发现</span><br>  <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/app/prometheus/sd/blackbox_http.json</span><br>    <span class="hljs-attr">refresh_interval:</span> <span class="hljs-string">2m</span><br>  <span class="hljs-attr">relabel_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>]<br>      <span class="hljs-attr">target_label:</span> <span class="hljs-string">__param_target</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__param_target</span>]<br>      <span class="hljs-attr">target_label:</span> <span class="hljs-string">instance</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>      <span class="hljs-attr">replacement:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.101</span><span class="hljs-number">.222</span><span class="hljs-string">:9115</span> <br><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;node_exporter&#x27;</span><br>  <span class="hljs-comment"># metrics的path（metrics_path配置项） 注意不都是/metrics</span><br>  <span class="hljs-comment"># 传入的参数</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">30s</span><br>  <span class="hljs-attr">scrape_timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">scheme:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">honor_timestamps:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">file_sd_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/app/prometheus/sd/node_exporter.json</span><br>    <span class="hljs-attr">refresh_interval:</span> <span class="hljs-string">2m</span><br><br></code></pre></td></tr></table></figure><ul><li>创建sd目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -pv /opt/app/prometheus/sd/<br></code></pre></td></tr></table></figure><ul><li>写入json文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /opt/app/prometheus/sd/node_exporter.json<br>[<br>  &#123;<br>    &quot;targets&quot;: [<br>      &quot;192.168.101.222:9100&quot;<br>    ],<br>    &quot;labels&quot;: &#123;<br>      &quot;name&quot;: &quot;prome-master01&quot;,<br>      &quot;account&quot;: &quot;aliyun-01&quot;,<br>      &quot;region&quot;: &quot;ap-south-1&quot;,<br>      &quot;env&quot;: &quot;prod&quot;,<br>      &quot;group&quot;: &quot;inf&quot;,<br>      &quot;project&quot;: &quot;monitor&quot;,<br>      &quot;stree_gpa&quot;: &quot;inf.monitor.prometheus&quot;<br>    &#125;<br>  &#125;,<br>  &#123;<br>    &quot;targets&quot;: [<br>      &quot;192.168.101.223:9100&quot;<br>    ],<br>    &quot;labels&quot;: &#123;<br>      &quot;name&quot;: &quot;prome-node01&quot;,<br>      &quot;account&quot;: &quot;aliyun-02&quot;,<br>      &quot;region&quot;: &quot;ap-south-2&quot;,<br>      &quot;env&quot;: &quot;prod&quot;,<br>      &quot;group&quot;: &quot;inf&quot;,<br>      &quot;project&quot;: &quot;middleware&quot;,<br>      &quot;stree_gpa&quot;: &quot;inf.middleware.kafka&quot;<br>    &#125;<br>  &#125;<br>]<br>EOF<br><br>cat &lt;&lt;EOF &gt; /opt/app/prometheus/sd/blackbox_http.json<br>[<br>  &#123;<br>    &quot;targets&quot;: [<br>      &quot;192.168.101.222:9115&quot;,<br>      &quot;http://prometheus.io&quot;,<br>      &quot;http://www.baidu.com&quot;,<br>      &quot;https://www.baidu.com&quot;<br>    ]<br>  &#125;<br>]<br>EOF<br><br></code></pre></td></tr></table></figure><ul><li>reload prometheus</li><li>观察target页面 和 sd结果页面</li><li>修改文件 blackbox_http.json 新增 <a href="https://github.com/">https://github.com/</a> 的探测，重新观察target页面 和 sd结果页面，会发现新添加的检测站点也添加到了页面上。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /opt/app/prometheus/sd/blackbox_http.json<br>[<br>  &#123;<br>    &quot;targets&quot;: [<br>      &quot;192.168.101.222:9115&quot;,<br>      &quot;http://prometheus.io&quot;,<br>      &quot;http://www.baidu.com&quot;,<br>      &quot;https://www.baidu.com&quot;,<br>      &quot;https://github.com/&quot;<br>    ]<br>  &#125;<br>]<br>EOF<br><br><br>curl -X POST http://localhost:9090/-/reload<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应用程序已被JAVA安全阻止java被安全阻止解决办法</title>
    <link href="/2025/03/19/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B7%B2%E8%A2%ABJAVA%E5%AE%89%E5%85%A8%E9%98%BB%E6%AD%A2java%E8%A2%AB%E5%AE%89%E5%85%A8%E9%98%BB%E6%AD%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2025/03/19/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B7%B2%E8%A2%ABJAVA%E5%AE%89%E5%85%A8%E9%98%BB%E6%AD%A2java%E8%A2%AB%E5%AE%89%E5%85%A8%E9%98%BB%E6%AD%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>如果在windows 的控制面板当中可以找到<code>java的图标</code>，按照这个地址方法操作（<a href="https://blog.51cto.com/u_16099271/11623668%EF%BC%89%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%89%BE%E5%88%B0java%E7%9A%84%E5%9B%BE%E6%A0%87%EF%BC%8C%E6%8C%89%E7%85%A7%E4%B8%8B%E6%96%B9%E7%9A%84%E6%95%99%E7%A8%8B%E6%93%8D%E4%BD%9C%EF%BC%9A">https://blog.51cto.com/u_16099271/11623668），如果没有找到java的图标，按照下方的教程操作：</a></p><ol><li><p>找到 Java 安装目录中的 <strong><code>deployment.properties</code></strong> 文件，通常位于：</p><ul><li>Windows: <code>C:\Users\&lt;username&gt;\AppData\LocalLow\Sun\Java\Deployment\security\</code></li><li>Linux&#x2F;Mac: <code>~/.java/deployment/security/</code></li></ul></li><li><p>打开 <strong><code>deployment.properties</code></strong> 文件，在其中添加例外站点：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">deployment.<span class="hljs-keyword">user</span>.<span class="hljs-keyword">security</span>.<span class="hljs-keyword">exception</span>.sites=&lt;URL&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">deployment<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.exception</span>.sites=http:<span class="hljs-comment">//example.com</span><br></code></pre></td></tr></table></figure></li><li><p>保存文件，重启浏览器或相关 Java 应用程序。</p></li></ol><p>这样可以将指定的网站加入 Java 应用程序的信任列表。</p><p><strong>如果没有上面的 <code>deployment.properties</code> ，可以在路径【C:\Users&lt;username&gt;\AppData\LocalLow\Sun\Java\Deployment\security\】下找到exception.sites文件，在里面添加站点的url地址（<a href="http://192.68.101.1)这种形式的地址也是可以的/">http://192.68.101.1）这种形式的地址也是可以的</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows、JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7 快速部署k8s 1.27版本（一定要升级内核，因为cilium需要）</title>
    <link href="/2025/03/19/Centos7%20%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2k8s%201.27%E7%89%88%E6%9C%AC/"/>
    <url>/2025/03/19/Centos7%20%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2k8s%201.27%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h4 id="关闭selinux-一定要做"><a href="#关闭selinux-一定要做" class="headerlink" title="关闭selinux(一定要做)"></a>关闭selinux(一定要做)</h4><h4 id="关闭防火墙-推荐关闭"><a href="#关闭防火墙-推荐关闭" class="headerlink" title="关闭防火墙(推荐关闭)"></a>关闭防火墙(推荐关闭)</h4><h4 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://dl.lamp.sh/kernel/el7/kernel-ml-5.10.222-1.el7.x86_64.rpm<br>wget https://dl.lamp.sh/kernel/el7/kernel-ml-devel-5.10.222-1.el7.x86_64.rpm<br><br>yum localinstall -y kernel-ml-5.10.222-1.el7.x86_64.rpm kernel-ml-devel-5.10.222-1.el7.x86_64.rpm<br><span class="hljs-comment">#安装完毕后查看系统可用启动内核</span><br>awk -F\&#x27; <span class="hljs-string">&#x27;$1==&quot;menuentry &quot; &#123;print  $2&#125;&#x27;</span> /etc/grub2.cfg<br></code></pre></td></tr></table></figure><h4 id="查看当前内核"><a href="#查看当前内核" class="headerlink" title="查看当前内核"></a>查看当前内核</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub2-editenv list<br><span class="hljs-comment">#修改默认内核CentOS Linux (5.10.222-1.el7.x86_64) 7 (Core)是awk查询出来的内核名称</span><br>grub2-set-default <span class="hljs-string">&#x27;CentOS Linux (5.10.222-1.el7.x86_64) 7 (Core)&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="重新启动"><a href="#重新启动" class="headerlink" title="重新启动"></a>重新启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><h4 id="查看内核"><a href="#查看内核" class="headerlink" title="查看内核"></a>查看内核</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><h4 id="指定sealos版本下载sealos"><a href="#指定sealos版本下载sealos" class="headerlink" title="指定sealos版本下载sealos"></a>指定sealos版本下载sealos</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">VERSION=v4.3.7<br><span class="hljs-built_in">export</span> VERSION<br>wget https://mirror.ghproxy.com/https://github.com/labring/sealos/releases/download/<span class="hljs-variable">$&#123;VERSION&#125;</span>/sealos_<span class="hljs-variable">$&#123;VERSION#v&#125;</span>_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure><h4 id="安装k8s-1-27"><a href="#安装k8s-1-27" class="headerlink" title="安装k8s 1.27"></a>安装k8s 1.27</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sealos run registry.cn-shanghai.aliyuncs.com/labring/kubernetes:v1.27.7 registry.cn-shanghai.aliyuncs.com/labring/helm:v3.9.4 \<br>     registry.cn-shanghai.aliyuncs.com/labring/cilium:v1.13.4 \<br>     --masters 192.168.101.73 \<br>     --nodes 192.168.101.74,192.168.101.75 -p [你主机的密码,最好全部统一]<br></code></pre></td></tr></table></figure><h4 id="安装命令补全"><a href="#安装命令补全" class="headerlink" title="安装命令补全"></a>安装命令补全</h4><p><a href="https://www.t-ao.cn/archives/224/">https://www.t-ao.cn/archives/224/</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka的zookeeper、kraft、controller</title>
    <link href="/2025/03/19/Kafka%E7%9A%84zookeeper%E3%80%81kraft%E3%80%81controller/"/>
    <url>/2025/03/19/Kafka%E7%9A%84zookeeper%E3%80%81kraft%E3%80%81controller/</url>
    
    <content type="html"><![CDATA[<p><strong>Kafka 中 ZooKeeper 和 Kraft 模式的区别：</strong></p><p>在早期的 Kafka 版本中，Kafka 集群依赖于 ZooKeeper 来进行元数据管理、协调和集群管理。 而在 Kafka 3.x 版本之后，引入了 Kraft 模式，可以替代 ZooKeeper，实现无 ZooKeeper 的部署。</p><p><strong>1. ZooKeeper 模式：</strong></p><ul><li><strong>依赖 ZooKeeper：</strong> Kafka Broker 需要连接到 ZooKeeper 集群，获取集群的元数据信息。</li><li><strong>元数据存储：</strong> Kafka 集群的元数据 (例如 Topic 信息、分区信息、Broker 信息等) 存储在 ZooKeeper 中。</li><li><strong>Controller 选举：</strong> Kafka Controller 的选举由 ZooKeeper 完成。</li><li><strong>复杂性：</strong> 增加了部署和管理的复杂性，需要维护额外的 ZooKeeper 集群。</li><li><strong>性能瓶颈：</strong> ZooKeeper 的性能可能成为 Kafka 集群的瓶颈，尤其是在大规模集群中。</li><li><strong>外部依赖：</strong> 对外部系统 ZooKeeper 有依赖，增加了维护的成本。</li></ul><p><strong>2. Kraft 模式：</strong></p><ul><li><strong>无 ZooKeeper 依赖：</strong> Kafka 集群不再需要连接到 ZooKeeper，而是使用 Kafka 内部的 Kraft 机制进行元数据管理。</li><li><strong>元数据存储：</strong> Kafka 集群的元数据存储在 Controller 节点的内部存储中，而不是 ZooKeeper。</li><li><strong>Controller 选举：</strong> Kafka Controller 的选举由 Kafka 集群内部的 Kraft 机制完成。</li><li><strong>简化部署：</strong> 简化了部署和管理，不需要维护额外的 ZooKeeper 集群。</li><li><strong>性能提升：</strong> 提高了性能，减少了对外部系统的依赖。</li><li><strong>内部管理：</strong> 元数据管理和集群协调更加紧密地集成在 Kafka 内部。</li></ul><p><strong>总结：</strong></p><table><thead><tr><th align="center">特性</th><th align="center">ZooKeeper 模式</th><th align="center">Kraft 模式</th></tr></thead><tbody><tr><td align="center">依赖</td><td align="center">依赖 ZooKeeper 集群</td><td align="center">不依赖 ZooKeeper，使用内部 Kraft 机制</td></tr><tr><td align="center">元数据存储</td><td align="center">存储在 ZooKeeper 中</td><td align="center">存储在 Controller 节点内部</td></tr><tr><td align="center">Controller 选举</td><td align="center">由 ZooKeeper 完成</td><td align="center">由 Kraft 机制完成</td></tr><tr><td align="center">部署和管理</td><td align="center">复杂，需要维护 ZooKeeper 集群</td><td align="center">简化，无需维护 ZooKeeper 集群</td></tr><tr><td align="center">性能</td><td align="center">性能可能受 ZooKeeper 限制</td><td align="center">性能更高，减少外部依赖</td></tr><tr><td align="center">维护成本</td><td align="center">维护成本较高，需要维护 ZooKeeper 集群</td><td align="center">维护成本较低，无需维护 ZooKeeper 集群</td></tr></tbody></table><p><strong>什么是 Controller？</strong></p><p>在 Kafka 集群中，<strong>Controller</strong> 是一个特殊的 Broker，负责管理集群的元数据和执行一些关键的管理任务。Controller 是 Kafka 集群的核心组件之一，它负责协调和控制整个集群的运行。</p><p><strong>Controller 的作用：</strong></p><ol><li><strong>分区管理：</strong><ul><li>维护 Topic 分区的副本信息。</li><li>决定每个分区的 Leader 和 Follower。</li><li>当 Leader Broker 发生故障时，进行 Leader 的重新选举。</li></ul></li><li><strong>副本管理：</strong><ul><li>维护 Topic 分区的副本列表。</li><li>监控副本的状态，确保副本的同步。</li><li>当副本发生故障时，进行副本的重新分配。</li></ul></li><li><strong>Broker 管理：</strong><ul><li>监控 Broker 的状态，例如 Broker 是否在线、是否正常工作。</li><li>当 Broker 加入或离开集群时，更新集群的元数据。</li></ul></li><li><strong>Topic 管理：</strong><ul><li>创建、删除和修改 Topic。</li><li>管理 Topic 的分区和副本。</li></ul></li><li><strong>元数据管理：</strong><ul><li>维护整个集群的元数据信息。</li><li>将元数据信息同步到所有 Broker。</li></ul></li><li><strong>集群协调：</strong><ul><li>协调 Kafka 集群的各项操作，例如分区重分配、Broker 扩容等。</li></ul></li></ol><p><strong>Controller 的位置：</strong></p><ul><li><strong>ZooKeeper 模式：</strong> 在 ZooKeeper 模式下，Controller 是由 ZooKeeper 选举产生的。Kafka 集群中的所有 Broker 都会竞争成为 Controller，最终只有一个 Broker 会被选举为 Controller。</li><li><strong>Kraft 模式：</strong> 在 Kraft 模式下，Controller 是由 Kafka 集群内部的 Kraft 机制选举产生的。 Controller 是集群中具有特殊角色的 Broker，负责管理集群的元数据和执行管理任务。</li></ul><p><strong>总结：</strong></p><ul><li><strong>ZooKeeper 模式：</strong> Kafka 依赖 ZooKeeper 进行元数据管理和协调，需要维护额外的 ZooKeeper 集群。</li><li><strong>Kraft 模式：</strong> Kafka 不依赖 ZooKeeper，使用内部的 Kraft 机制进行元数据管理，简化了部署和管理，提高了性能。</li><li><strong>Controller：</strong> 是 Kafka 集群的核心组件，负责管理集群的元数据、分区、副本和 Broker。</li><li><strong>Controller 的位置：</strong> 在 ZooKeeper 模式下，Controller 由 ZooKeeper 选举产生；在 Kraft 模式下，Controller 由 Kafka 集群内部的 Kraft 机制选举产生。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arthas监控Elasticsearch报错</title>
    <link href="/2025/03/19/arthas%E7%9B%91%E6%8E%A7Elasticsearch%E6%8A%A5%E9%94%99/"/>
    <url>/2025/03/19/arthas%E7%9B%91%E6%8E%A7Elasticsearch%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h2 id="arthas介绍"><a href="#arthas介绍" class="headerlink" title="arthas介绍"></a>arthas介绍</h2><ul><li>arthas是Alibaba推出的java诊断工具</li><li><a href="https://arthas.aliyun.com/doc/install-detail.html">官方文档</a></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>准备docker环境(使用docker容器的方法部署arthas和ES)</li></ul><table><thead><tr><th>name</th><th>port（arthas启动默认监听的端口，可以在web端进行访问）</th></tr></thead><tbody><tr><td>centos_arthas</td><td>3658:3658</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -tid --name centos_arthas -p 3658:3658 <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span> centos:latest /sbin/init<br></code></pre></td></tr></table></figure><ul><li>可以按照以下安装elasticsearch<br><a href="https://www.cnblogs.com/liwangcai/p/14011981.html">elasticsearch集群安装</a><br><a href="https://www.cnblogs.com/liwangcai/p/14010028.html">elasticsearch单机快速安装</a></li><li>进入到容器中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it centos_arthas /bin/bash<br></code></pre></td></tr></table></figure><h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><ul><li>此处的配置修改按照本站之前博客路径进行修改</li><li>创建，修改java.policy文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 这个policy文件的名字叫什么都可以，但是需要放在这个目录下才行，推荐叫elasticsearch.policy 这样方便区别这个配置文件是干啥用的，原文的解决连接来自github的issue：https://github.com/alibaba/arthas/issues/156  @ralf0131大佬提供的解决办法</span><br><span class="hljs-string">vi</span> <span class="hljs-string">/opt/es/config/elasticsearch.policy</span>  <br><br><span class="hljs-comment"># 具体文件内的内容</span><br><span class="hljs-string">grant</span> <span class="hljs-string">codeBase</span> <span class="hljs-string">&quot;file:$&#123;user.home&#125;/.arthas/lib/-&quot;</span> &#123;<br>    <span class="hljs-string">//</span> <span class="hljs-string">允许</span> <span class="hljs-string">Arthas</span> <span class="hljs-string">读写自身目录及日志</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.io.FilePermission</span> <span class="hljs-string">&quot;$&#123;user.home&#125;/.arthas/-&quot;</span>, <span class="hljs-string">&quot;read,write&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.io.FilePermission</span> <span class="hljs-string">&quot;$&#123;user.home&#125;/logs/arthas/-&quot;</span>, <span class="hljs-string">&quot;read,write,delete&quot;</span><span class="hljs-string">;</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">核心运行时权限</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;createClassLoader&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;getClassLoader&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;modifyThreadGroup&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;modifyThread&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;shutdownHooks&quot;</span><span class="hljs-string">;</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">反射相关权限</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;accessClassInPackage.sun.reflect&quot;</span><span class="hljs-string">;</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">HTTP</span> <span class="hljs-string">协议访问权限</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;accessClassInPackage.sun.net.www.protocol.http&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;accessClassInPackage.sun.net.www.http&quot;</span><span class="hljs-string">;</span><br>    <br>    <span class="hljs-string">//</span> <span class="hljs-string">网络端口权限（Arthas</span> <span class="hljs-string">默认使用</span> <span class="hljs-number">3658</span> <span class="hljs-string">和</span> <span class="hljs-number">8563</span><span class="hljs-string">）</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.net.SocketPermission</span> <span class="hljs-string">&quot;127.0.0.1:3658&quot;</span>, <span class="hljs-string">&quot;listen,resolve&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.net.SocketPermission</span> <span class="hljs-string">&quot;127.0.0.1:8563&quot;</span>, <span class="hljs-string">&quot;listen,resolve&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.net.SocketPermission</span> <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;accept&quot;</span><span class="hljs-string">;</span><br>&#125;<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><ul><li>修改&#x2F;opt&#x2F;es&#x2F;jdk&#x2F;conf&#x2F;security&#x2F;java.policy配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">grant</span> &#123;<br>    <span class="hljs-string">permission</span> <span class="hljs-string">org.elasticsearch.ThreadPermission</span> <span class="hljs-string">&quot;modifyArbitraryThreadGroup&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">org.elasticsearch.ThreadPermission</span> <span class="hljs-string">&quot;modifyArbitraryThread&quot;</span><span class="hljs-string">;</span><br>&#125;<span class="hljs-string">;</span><br><br><br><span class="hljs-string">grant</span> &#123;<br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.io.FilePermission</span> <span class="hljs-string">&quot;&lt;&lt;ALL FILES&gt;&gt;&quot;</span>, <span class="hljs-string">&quot;read,write&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.util.PropertyPermission</span> <span class="hljs-string">&quot;JM.LOG.PATH&quot;</span>, <span class="hljs-string">&quot;write&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.RuntimePermission</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.lang.reflect.ReflectPermission</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">java.net.SocketPermission</span> <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;connect,listen,resolve,accept&quot;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">permission</span> <span class="hljs-string">ognl.OgnlInvokePermission</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-string">;</span><br>&#125;<span class="hljs-string">;</span><br><br></code></pre></td></tr></table></figure><ul><li>启动elasticsearch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/es/bin/elasticsearch -d<br></code></pre></td></tr></table></figure><h2 id="安装arthas"><a href="#安装arthas" class="headerlink" title="安装arthas"></a>安装arthas</h2><ul><li><h4 id="配置环境变量（这里使用es自带的jdk）"><a href="#配置环境变量（这里使用es自带的jdk）" class="headerlink" title="配置环境变量（这里使用es自带的jdk）"></a>配置环境变量（这里使用es自带的jdk）</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果是安装过JDK环境，es启动的时候也是用的安装过的JDK，那这部分内容可以不用配置，但是如果没有配置jdk的环境，建议还是配置一下，方便启动的时候可以执行java -jar 这样的命令</span><br>echo &#x27;export JAVA_HOME=/opt/es/jdk&#x27; &gt;&gt;  ~/.bashrc<br>echo &#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27; &gt;&gt; ~/.bashrc<br>echo &#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27; &gt;&gt; ~/.bashrc<br>chmod +x ~/.bashrc<br>source ~/.bashrc<br></code></pre></td></tr></table></figure><ul><li><h4 id="安装arthas-1"><a href="#安装arthas-1" class="headerlink" title="安装arthas"></a>安装arthas</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">[elastic@3f24eb371050 opt]$ curl -O https://arthas.aliyun.com/arthas-boot.jar<br><span class="hljs-meta prompt_">  % </span><span class="language-bash">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100  135k  100  135k    0     0   217k      0 --:--:-- --:--:-- --:--:--  217k<br>[elastic@3f24eb371050 opt]$ java -jar arthas-boot.jar --repo-mirror aliyun --use-http<br>[INFO] arthas-boot version: 3.4.4<br>[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.<br>* [1]: 513 org.elasticsearch.bootstrap.Elasticsearch<br>1<br>[INFO] Start download arthas from remote server: http://arthas.aliyun.com/download/3.4.4?mirror=aliyun<br>[INFO] File size: 11.94 MB, downloaded size: 4.32 MB, downloading ...<br>[INFO] File size: 11.94 MB, downloaded size: 7.45 MB, downloading ...<br>[INFO] File size: 11.94 MB, downloaded size: 9.85 MB, downloading ...<br>[INFO] Download arthas success.<br>[INFO] arthas home: /home/elastic/.arthas/lib/3.4.4/arthas<br>[INFO] Try to attach process 513<br>[INFO] Attach process 513 success.<br>[INFO] arthas-client connect 127.0.0.1 3658<br>  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.<br> /  O  \ |  .--. &#x27;&#x27;--.  .--&#x27;|  &#x27;--&#x27;  | /  O  \ &#x27;   .-&#x27;<br>|  .-.  ||  &#x27;--&#x27;.&#x27;   |  |   |  .--.  ||  .-.  |`.  `-.<br>|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#x27;    |<br>`--&#x27; `--&#x27;`--&#x27; &#x27;--&#x27;   `--&#x27;   `--&#x27;  `--&#x27;`--&#x27; `--&#x27;`-----&#x27;<br><br><br>wiki      https://arthas.aliyun.com/doc<br>tutorials https://arthas.aliyun.com/doc/arthas-tutorials.html<br>version   3.4.4<br>pid       513<br>time      2020-11-30 05:37:25<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">[arthas@513]$ </span><span class="language-bash">shutdown        <span class="hljs-comment">##安装完成后先退出增加--target-ip参数启动</span></span><br><br></code></pre></td></tr></table></figure><ul><li><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[elastic@3f24eb371050 opt]$ java -jar arthas-boot.jar  --target-ip 0.0.0.0<br>[INFO] arthas-boot version: 3.4.4<br>[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.<br>* [1]: 513 org.elasticsearch.bootstrap.Elasticsearch<br>1<br>[INFO] arthas home: /home/elastic/.arthas/lib/3.4.4/arthas<br>[INFO] Try to attach process 513<br>[INFO] Attach process 513 success.<br>[INFO] arthas-client connect 0.0.0.0 3658<br>  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.<br> /  O  \ |  .--. &#x27;&#x27;--.  .--&#x27;|  &#x27;--&#x27;  | /  O  \ &#x27;   .-&#x27;<br>|  .-.  ||  &#x27;--&#x27;.&#x27;   |  |   |  .--.  ||  .-.  |`.  `-.<br>|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&#x27;    |<br>`--&#x27; `--&#x27;`--&#x27; &#x27;--&#x27;   `--&#x27;   `--&#x27;  `--&#x27;`--&#x27; `--&#x27;`-----&#x27;<br><br><br>wiki      https://arthas.aliyun.com/doc<br>tutorials https://arthas.aliyun.com/doc/arthas-tutorials.html<br>version   3.4.4<br>pid       513<br>time      2020-11-30 05:39:45<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">[arthas@513]$ </span><span class="language-bash">dashboard</span><br><br></code></pre></td></tr></table></figure><ul><li><h4 id="监控数据，成功启动"><a href="#监控数据，成功启动" class="headerlink" title="监控数据，成功启动"></a>监控数据，成功启动</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">ID   NAME                          GROUP          PRIORITY  STATE     %CPU      DELTA_TIM TIME      INTERRUPT DAEMON<br>-1   C1 CompilerThread0            -              -1        -         0.23      0.011     0:2.577   false     true<br>-1   C2 CompilerThread0            -              -1        -         0.13      0.006     0:9.784   false     true<br>153  Timer-for-arthas-dashboard-02 system         5         RUNNABLE  0.08      0.004     0:0.055   false     true<br>151  arthas-NettyHttpTelnetBootstr system         5         RUNNABLE  0.06      0.003     0:0.086   false     true<br>19   elasticsearch[3f24eb371050][s main           5         TIMED_WAI 0.06      0.003     0:0.599   false     true<br>43   elasticsearch[3f24eb371050][m main           5         TIMED_WAI 0.05      0.002     0:0.032   false     true<br>45   elasticsearch[3f24eb371050][m main           5         TIMED_WAI 0.04      0.002     0:0.023   false     true<br>-1   VM Periodic Task Thread       -              -1        -         0.04      0.002     0:0.391   false     true<br>-1   VM Thread                     -              -1        -         0.01      0.000     0:0.225   false     true<br>18   elasticsearch[3f24eb371050][[ main           5         TIMED_WAI 0.01      0.000     0:0.101   false     true<br>-1   Sweeper thread                -              -1        -         0.0       0.000     0:0.159   false     true<br>Memory                    used    total    max     usage    GC<br>heap                      264M    989M     989M    26.73%   gc.parnew.count               8<br>par_eden_space            190M    273M     273M    69.70%   gc.parnew.time(ms)            138<br>par_survivor_space        26M     34M      34M     77.56%   gc.concurrentmarksweep.count  2<br>cms_old_gen               47M     682M     682M    7.00%    gc.concurrentmarksweep.time(m 39<br>nonheap                   126M    137M     -1      92.30%   s)<br>codeheap_&#x27;non-nmethods&#x27;   1M      2M       5M      27.30%<br>metaspace                 97M     104M     -1      93.26%<br><br>Runtime<br>os.name                                                     Linux<br>os.version                                                  4.19.76-linuxkit<br>java.version                                                13.0.2<br>java.home                                                   /opt/es/jdk<br>systemload.average                                          0.00<br>processors                                                  6<br>uptime<br><br></code></pre></td></tr></table></figure><ul><li><p>arthas命令(官方文档里有：<a href="https://arthas.aliyun.com/doc/commands.html">https://arthas.aliyun.com/doc/commands.html</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell">jvm 相关<br>    dashboard - 当前系统的实时数据面板<br>    getstatic - 查看类的静态属性<br>    heapdump - dump java heap, 类似 jmap 命令的 heap dump 功能<br>    jvm - 查看当前 JVM 的信息<br>    logger - 查看和修改 logger<br>    mbean - 查看 Mbean 的信息<br>    memory - 查看 JVM 的内存信息<br>    ognl - 执行 ognl 表达式<br>    perfcounter - 查看当前 JVM 的 Perf Counter 信息<br>    sysenv - 查看 JVM 的环境变量<br>    sysprop - 查看和修改 JVM 的系统属性<br>    thread - 查看当前 JVM 的线程堆栈信息<br>    vmoption - 查看和修改 JVM 里诊断相关的 option<br>    vmtool - 从 jvm 里查询对象，执行 forceGc<br>    class/classloader 相关<br>    classloader - 查看 classloader 的继承树，urls，类加载信息，使用 classloader 去 getResource<br>    dump - dump 已加载类的 byte code 到特定目录<br>    jad - 反编译指定已加载类的源码<br>    mc - 内存编译器，内存编译.java文件为.class文件<br>    redefine - 加载外部的.class文件，redefine 到 JVM 里<br>    retransform - 加载外部的.class文件，retransform 到 JVM 里<br>    sc - 查看 JVM 已加载的类信息<br>    sm - 查看已加载类的方法信息<br><br>monitor/watch/trace 相关<br>    注意：请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 stop 或将增强过的类执行 reset 命令。<br><br>    monitor - 方法执行监控<br>    stack - 输出当前方法被调用的调用路径<br>    trace - 方法内部调用路径，并输出方法路径上的每个节点上耗时<br>    tt - 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测<br>    watch - 方法执行数据观测<br>    profiler/火焰图<br>    profiler - 使用async-profiler对应用采样，生成火焰图<br>    jfr - 动态开启关闭 JFR 记录<br><br>鉴权<br>    auth - 鉴权<br>    options<br>    options - 查看或设置 Arthas 全局开关<br><br>管道<br>    Arthas 支持使用管道对上述命令的结果进行进一步的处理，如sm java.lang.String * | grep &#x27;index&#x27;<br>    grep - 搜索满足条件的结果<br>    plaintext - 将命令的结果去除 ANSI 颜色<br>    wc - 按行统计输出结果<br><br>后台异步任务<br>当线上出现偶发的问题，比如需要 watch 某个条件，而这个条件一天可能才会出现一次时，异步后台任务就派上用场了，详情请参考这里<br><br>    使用 &gt; 将结果重写向到日志文件，使用 &amp; 指定命令是后台运行，session 断开不影响任务执行（生命周期默认为 1 天）<br>    jobs - 列出所有 job<br>    kill - 强制终止任务<br>    fg - 将暂停的任务拉到前台执行<br>    bg - 将暂停的任务放到后台执行<br><br>基础命令<br>    base64 - base64 编码转换，和 linux 里的 base64 命令类似<br>    cat - 打印文件内容，和 linux 里的 cat 命令类似<br>    cls - 清空当前屏幕区域<br>    echo - 打印参数，和 linux 里的 echo 命令类似<br>    grep - 匹配查找，和 linux 里的 grep 命令类似<br>    help - 查看命令帮助信息<br>    history - 打印命令历史<br>    keymap - Arthas 快捷键列表及自定义快捷键<br>    pwd - 返回当前的工作目录，和 linux 命令类似<br>    quit - 退出当前 Arthas 客户端，其他 Arthas 客户端不受影响<br>    reset - 重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类<br>    session - 查看当前会话的信息<br>    stop - 关闭 Arthas 服务端，所有 Arthas 客户端全部退出<br>    tee - 复制标准输入到标准输出和指定的文件，和 linux 里的 tee 命令类似<br>    version - 输出当前目标 Java 进程所加载的 Arthas 版本号<br></code></pre></td></tr></table></figure></li></ul><h2 id="通过web访问arthas"><a href="#通过web访问arthas" class="headerlink" title="通过web访问arthas"></a>通过web访问arthas</h2><ul><li>增加–target-ip参数（上面的操作步骤中已经加过了）</li><li>通过宿主机浏览器进行访问（<a href="http://localhost:3658/">http://localhost:3658</a>）<br><img src="https://pic.yt/i/2025/02/28/67c1293bb983c.png"></li></ul><p>原文连接，在作者的基础上添加修改了部分内容： <a href="https://www.cnblogs.com/liwangcai/p/14060875.html">https://www.cnblogs.com/liwangcai/p/14060875.html</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ARTHAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM垃圾回收器常见的组合和各自的特点</title>
    <link href="/2025/03/19/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%84%E5%90%88%E5%92%8C%E5%90%84%E8%87%AA%E7%9A%84%E7%89%B9%E7%82%B9/"/>
    <url>/2025/03/19/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%84%E5%90%88%E5%92%8C%E5%90%84%E8%87%AA%E7%9A%84%E7%89%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="一、新生代与老年代垃圾回收器的组合"><a href="#一、新生代与老年代垃圾回收器的组合" class="headerlink" title="一、新生代与老年代垃圾回收器的组合"></a><strong>一、新生代与老年代垃圾回收器的组合</strong></h3><table><thead><tr><th><strong>新生代回收器</strong></th><th><strong>老年代回收器</strong></th><th><strong>适用场景</strong></th><th><strong>JDK 默认版本</strong></th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td><strong>Serial Old</strong></td><td>单线程客户端应用、低资源环境</td><td>JDK 1.3~8（客户端模式）</td></tr><tr><td><strong>ParNew</strong></td><td><strong>CMS</strong></td><td>低延迟 Web 服务、响应优先系统</td><td>JDK 5~8（需手动启用）</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td><strong>Parallel Old</strong></td><td>高吞吐量后台任务（计算密集型）</td><td>JDK 7~8（服务端模式默认）</td></tr><tr><td><strong>G1</strong></td><td><strong>G1 自身管理分代</strong></td><td>大堆内存、低延迟、动态分代</td><td>JDK 9+（服务端模式默认）</td></tr></tbody></table><h3 id="二、各组合核心特点"><a href="#二、各组合核心特点" class="headerlink" title="二、各组合核心特点"></a><strong>二、各组合核心特点</strong></h3><h4 id="1-Serial-Serial-Old"><a href="#1-Serial-Serial-Old" class="headerlink" title="1. Serial + Serial Old"></a><strong>1. Serial + Serial Old</strong></h4><ul><li>新生代（Serial）：<ul><li>单线程复制算法（Stop-The-World，STW）。</li><li>简单高效，无线程交互开销。</li></ul></li><li>老年代（Serial Old）：<ul><li>单线程标记-整理算法（STW）。</li></ul></li><li>适用场景：<ul><li>客户端应用（如 Swing 桌面程序）、嵌入式设备。</li><li><strong>缺点</strong>：STW 时间长，不适用于服务端大堆内存。</li></ul></li></ul><h4 id="2-ParNew-CMS"><a href="#2-ParNew-CMS" class="headerlink" title="2. ParNew + CMS"></a><strong>2. ParNew + CMS</strong></h4><ul><li>新生代（ParNew）：<ul><li>多线程复制算法（STW），与 Serial 兼容。</li></ul></li><li>老年代（CMS）：<ul><li>多线程并发标记-清除算法（Concurrent Mark Sweep）。</li><li><strong>四阶段</strong>：初始标记（STW）→ 并发标记→ 重新标记（STW）→ 并发清除。</li></ul></li><li>适用场景：<ul><li>Web 服务、API 服务器（追求低延迟，容忍内存碎片）。</li><li><strong>缺点</strong>：CPU 敏感，内存碎片可能导致 Full GC 退化（需压缩）。</li></ul></li></ul><h4 id="3-Parallel-Scavenge-Parallel-Old"><a href="#3-Parallel-Scavenge-Parallel-Old" class="headerlink" title="3. Parallel Scavenge + Parallel Old"></a><strong>3. Parallel Scavenge + Parallel Old</strong></h4><ul><li>新生代（Parallel Scavenge）：<ul><li>多线程复制算法（STW），<strong>吞吐量优先</strong>。</li></ul></li><li>老年代（Parallel Old）：<ul><li>多线程标记-整理算法（STW）。</li></ul></li><li>适用场景：<ul><li>批处理、科学计算（如 Hadoop 离线任务）。</li><li><strong>缺点</strong>：STW 时间不可控，不适合低延迟场景。</li></ul></li></ul><h4 id="4-G1（Garbage-First）"><a href="#4-G1（Garbage-First）" class="headerlink" title="4. G1（Garbage-First）"></a><strong>4. G1（Garbage-First）</strong></h4><ul><li>分代管理：<ul><li><strong>逻辑分代</strong>：仍保留新生代（Eden&#x2F;Survivor）和老年代（Old）。</li><li><strong>物理划分</strong>：将堆划分为多个大小固定的 Region（1MB~32MB），动态分配为 Eden&#x2F;Survivor&#x2F;Old&#x2F;Humongous（大对象区）。</li></ul></li><li>回收机制：<ul><li><strong>Young GC</strong>：回收新生代 Region（STW）。</li><li><strong>Mixed GC</strong>：同时回收新生代和部分老年代 Region（STW），基于停顿预测模型。</li><li><strong>Full GC</strong>：退化时触发（单线程整理，类似 Serial Old）。</li></ul></li><li>特点：<ul><li><strong>低延迟</strong>：通过 Region 回收和停顿预测控制 STW 时间（默认 200ms）。</li><li><strong>大堆友好</strong>：适合 4GB 以上堆内存。</li><li><strong>内存整理</strong>：Mixed GC 阶段并行整理，减少碎片。</li></ul></li><li>适用场景：<ul><li>现代服务端应用（如微服务、云原生环境）。</li></ul></li></ul><h3 id="三、关于-G1-的疑问解答"><a href="#三、关于-G1-的疑问解答" class="headerlink" title="三、关于 G1 的疑问解答"></a><strong>三、关于 G1 的疑问解答</strong></h3><p><strong>Q: G1 没有老年代了吗？</strong><br><strong>A</strong>: 不是。G1 <strong>仍然有老年代</strong>，但分代方式与传统回收器不同：</p><ol><li><strong>逻辑分代保留</strong>：对象年龄（Age）达到阈值后晋升到老年代。</li><li><strong>物理 Region 动态分配</strong>：老年代由多个 Region 组成，不要求连续内存。</li><li><strong>混合回收（Mixed GC）</strong> ：选择性回收高垃圾比例的老年代 Region，避免全堆扫描。</li></ol><h3 id="四、对比总结"><a href="#四、对比总结" class="headerlink" title="四、对比总结"></a><strong>四、对比总结</strong></h3><table><thead><tr><th><strong>回收器组合</strong></th><th><strong>吞吐量</strong></th><th><strong>延迟</strong></th><th><strong>内存碎片</strong></th><th><strong>适用堆大小</strong></th></tr></thead><tbody><tr><td>Serial + Serial Old</td><td>低</td><td>高</td><td>低</td><td>&lt;100MB</td></tr><tr><td>ParNew + CMS</td><td>中</td><td>低</td><td>高</td><td>2~4GB</td></tr><tr><td>Parallel Scavenge</td><td>高</td><td>中</td><td>低</td><td>2~8GB</td></tr><tr><td>G1</td><td>中高</td><td>低</td><td>低</td><td>&gt;4GB</td></tr></tbody></table><h3 id="五、选择建议"><a href="#五、选择建议" class="headerlink" title="五、选择建议"></a><strong>五、选择建议</strong></h3><ol><li><strong>小堆 &amp; 客户端</strong>：Serial + Serial Old。</li><li><strong>中等堆 &amp; 低延迟</strong>：ParNew + CMS（JDK 8 及之前）。</li><li><strong>大堆 &amp; 高吞吐</strong>：Parallel Scavenge + Parallel Old（计算密集型）。</li><li><strong>大堆 &amp; 低延迟</strong>：G1（JDK 9+ 首选）或 ZGC&#x2F;Shenandoah（超大堆+极低延迟）。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
